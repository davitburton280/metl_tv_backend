{"version":3,"sources":["webpack:///src/app/core/services/subscription-plan.service.ts","webpack:///src/app/chanel-subscription/subscription-chanel/subscription-chanel.component.html","webpack:///src/app/chanel-subscription/subscription-chanel/subscription-chanel.component.ts","webpack:///src/app/chanel-subscription/subscription-chanel/plan-chanel/plan-chanel.component.html","webpack:///src/app/chanel-subscription/chanel-subscription-routing.module.ts","webpack:///src/app/chanel-subscription/subscription-chanel/plan-chanel/plan-chanel.component.ts","webpack:///src/app/chanel-subscription/chanel-subscription.module.ts"],"names":["SubscriptionPlanService","_httpClient","token","localStorage","getItem","headers","Authorization","this","get","permission","formData","post","SubscriptionChanelComponent","router","_subscriptionPlanService","planListImg","_getSubscriptionPlan","cost","plan_id","navigate","queryParams","plan","JSON","stringify","getSubscriptionPlan","subscribe","data","planList","PlanChanelComponent","ChanelSubscriptionRoutingModule","ChanelSubscriptionModule","routes","path","component","title","route","_location","subject","dialog","paymentsService","_userInfoService","subscriptions","_getAuthInfo","params","snapshot","constantCost","console","log","_getPlan","push","currentUserCards","dt","userCards","_userInfo","authUser","getSubscriptionPlanViewByPermission","reverse","forEach","elem","element","toLowerCase","includes","custom_fields","badgeColor","planIcon","img","planName","event","value","total","totalCost","saleCostTotal","toFixed","discount","discountMonths","open","width","cards","afterClosed","payment","paymentIntent","status","height","getAllPaymentsHistory","user_id","id","customer","ph","setAllPaymentsData","changePaymentsData","buySubscriptionPlan","planId","back","backPage","forChild"],"mappings":"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","file":"x","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {SubscriptionPlanResponseInterface} from '@core/interfaces/subscription-plan.interface';\r\nimport {PlanChanelResponseInterface} from '@core/interfaces/plan-chanel.interface';\r\nimport {API_URL} from '@core/constants/global';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class SubscriptionPlanService {\r\n    constructor(\r\n        private _httpClient: HttpClient) {\r\n    }\r\n\r\n    public getSubscriptionPlan() {\r\n        const token = localStorage.getItem('token');\r\n        const headers = new HttpHeaders({\r\n            // 'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        });\r\n\r\n        const requestOptions = {headers};\r\n\r\n        return this._httpClient.get<SubscriptionPlanResponseInterface>(`${API_URL}plan`, requestOptions);\r\n\r\n    }\r\n\r\n    public getSubscriptionPlanViewByPermission(permission) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = new HttpHeaders({\r\n            // 'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        });\r\n\r\n        const requestOptions = {headers};\r\n\r\n        return this._httpClient.get<PlanChanelResponseInterface>(`${API_URL}permission?idList=${permission}`\r\n            , requestOptions);\r\n    }\r\n\r\n    public buySubscriptionPlan(formData) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = new HttpHeaders({\r\n            Authorization: `Bearer ${token}`\r\n        });\r\n\r\n        const requestOptions = {headers};\r\n\r\n        return this._httpClient.post<any>(`${API_URL}stripe/payments/create-subscription-payment-intent`,\r\n            formData, requestOptions);\r\n    }\r\n}\r\n","<div class=\"channelDiv\">\r\n    <div class=\"channelSubscriptionDiv\">\r\n        <div class=\"logoAndChannel\">\r\n            <img src=\"../../assets/img/logoSubscriptionPart.png\" alt=\"logo\">\r\n            <div class=\"channelAndIcon\">\r\n                <div class=\"channelSubscription\"> Metl.tv Channel Subscribtion</div>\r\n                <img src=\"../../assets/img/rocket.png\" alt=\"rocket\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"channelBelowDiv\">\r\n        <div class=\"chooseTrier\">Choose Trier for Subscrition</div>\r\n        <div class=\"subscriptionText\">With Metl.tv Channel subscribtion gets even better with features you can't get\r\n            anywhere else.\r\n        </div>\r\n        <div class=\"cardDivs\">\r\n            <div class=\"cardDiv\" *ngFor=\"let plan of planList;let i = index\">\r\n                <div class=\"cardPart1\">\r\n                    <img [src]=planListImg[i].img alt=\"bronzeFrame\">\r\n                    <div class=\"cardTitle\">{{plan.name}}</div>\r\n                </div>\r\n                <div class=\"cardText\">{{plan.description}}</div>\r\n                <div class=\"cardPart2\">\r\n                    <div class=\"cardLeftPart\">\r\n                        <div class=\"cardLeftPart1\">{{plan.name}}</div>\r\n                        <div class=\"cardLeftPart2\">${{plan.cost}} / Month</div>\r\n                    </div>\r\n                    <button class=\"cardRightPartBtn\" (click)=\"goToPlanChanel(plan.permissions,plan.cost,plan.id)\">View\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {SubscriptionPlanService} from '@core/services/subscription-plan.service';\r\nimport {SubscriptionPlanData, SubscriptionPlanResponseInterface} from '@core/interfaces/subscription-plan.interface';\r\nimport {CHANEL_SUBSCRIPTIONS_LIST} from '@core/constants/global';\r\n\r\n@Component({\r\n    selector: 'app-subscription-chanel',\r\n    templateUrl: './subscription-chanel.component.html',\r\n    styleUrls: ['./subscription-chanel.component.scss']\r\n})\r\nexport class SubscriptionChanelComponent implements OnInit {\r\n\r\n    public planList: SubscriptionPlanData [] | undefined;\r\n    public planListImg = CHANEL_SUBSCRIPTIONS_LIST;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private _subscriptionPlanService: SubscriptionPlanService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._getSubscriptionPlan();\r\n    }\r\n\r\n    goToPlanChanel(permission, cost, plan_id) {\r\n        this.router.navigate(['turbo-plan/plan-chanel'], {\r\n            queryParams: {\r\n                plan: JSON.stringify(permission),\r\n                cost: JSON.stringify(cost),\r\n                plan_id: JSON.stringify(plan_id)\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getSubscriptionPlan() {\r\n        this._subscriptionPlanService.getSubscriptionPlan()\r\n            .subscribe((data: SubscriptionPlanResponseInterface) => {\r\n                this.planList = data.data;\r\n            });\r\n    }\r\n\r\n}\r\n","<div class=\"channelDiv\">\r\n    <div class=\"channelSubscriptionDiv\">\r\n        <div class=\"logoAndChannel\">\r\n            <img src=\"../../assets/img/logoSubscriptionPart.png\" alt=\"logo\">\r\n            <div class=\"channelAndIcon\">\r\n                <div class=\"channelSubscription\"> Metl.tv Channel Subscribtion</div>\r\n                <img src=\"../../assets/img/rocket.png\" alt=\"logo\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"backAndDetailsDiv\">\r\n        <div class=\"backDiv\" (click)=\"backPage()\">\r\n            <img src=\"../../assets/img/backSign.png\" alt=\"backSign\">\r\n            <div class=\"back\">Back</div>\r\n        </div>\r\n        <div class=\"detailsDiv\">Details</div>\r\n        <div></div>\r\n    </div>\r\n    <div class=\"cardDetailed\" *ngIf=\"plan\">\r\n        <div class=\"CardDetailedTitleAndLogo\">\r\n            <div class=\"CardDetailedLogo\">\r\n                <img [src]='planIcon' alt=\"goldFrame\">\r\n            </div>\r\n            <div class=\"CardDetailedTitle\">\r\n                {{plan[0]?.custom_fields?.badgeColor | capitalizeAddSpaces}} Trier\r\n            </div>\r\n        </div>\r\n        <div class=\"cardsTotal\">\r\n            <div class=\"cardTotalDiv\" *ngFor=\"let item of plan;let i = index\">\r\n                <div class=\"cardDiv1\">{{item.name}}</div>\r\n                <div class=\"cardDiv2\">\r\n                    <img *ngIf=\"i === 0\"\r\n                         src=\"../../assets/img/freeGreenIcon.png\" alt=\"freeIcon\">\r\n                    <img *ngIf=\"i === 1\"\r\n                         [src]='planIcon' alt=\"goldIcon\">\r\n                    <img *ngIf=\"(planName === 'silver' || planName === 'gold') && i === 2\"\r\n                         src=\"../../assets/img/colorCircle.png\" alt=\"colorCircle\">\r\n                    <img *ngIf=\"(planName === 'gold') && i === 3\"\r\n                         src=\"../../assets/img/sadIcon.png\" alt=\"sadIcon\">\r\n                    <img *ngIf=\"(planName === 'gold') && i === 3\"\r\n                         class=\"coolImgClassName\"\r\n                         src=\"../../assets/img/coolIcon.png\" alt=\"coolIcon\">\r\n                </div>\r\n                <div class=\"cardDiv3\">{{item.description}}</div>\r\n            </div>\r\n            <!--            <div class=\"cardTotalDiv\">-->\r\n            <!--                <div class=\"cardDiv1\">{{plan[0].name}}</div>-->\r\n            <!--                <div class=\"cardDiv2\">-->\r\n            <!--                    <img [src]='planIcon' alt=\"goldIcon\">-->\r\n            <!--                </div>-->\r\n            <!--                <div class=\"cardDiv3\">{{plan[0].description}}</div>-->\r\n            <!--            </div>-->\r\n            <!--            <div class=\"cardTotalDiv\" *ngIf=\"planName === 'silver' || planName === 'gold'\">-->\r\n            <!--                <div class=\"cardDiv1\">Custom Chat Username Colors</div>-->\r\n            <!--                <div class=\"cardDiv2\">-->\r\n            <!--                    <img src=\"../../assets/img/colorCircle.png\" alt=\"colorCircle\">-->\r\n            <!--                </div>-->\r\n            <!--                <div class=\"cardDiv3\">{{plan[0].description}}-->\r\n            <!--                </div>-->\r\n            <!--            </div>-->\r\n            <!--            <div class=\"cardTotalDiv\" *ngIf=\"planName === 'gold'\">-->\r\n            <!--                <div class=\"cardDiv1\">Custom Chat Username Colors</div>-->\r\n            <!--                <div class=\"cardDiv2\">-->\r\n            <!--                    <img src=\"../../assets/img/sadIcon.png\" alt=\"sadIcon\">-->\r\n            <!--                    <img class=\"coolImgClassName\" src=\"../../assets/img/coolIcon.png\" alt=\"coolIcon\">-->\r\n            <!--                </div>-->\r\n            <!--                <div class=\"cardDiv3\">User gets custom emojis that other users do not have access to for the live stream-->\r\n            <!--                    chat-->\r\n            <!--                </div>-->\r\n            <!--            </div>-->\r\n        </div>\r\n        <div class=\"subscriptionDivs\">\r\n            <div class=\"subscriptionLeftPart\">\r\n                <div class=\"subscriptionLeftPart1\" *ngIf=\"plan\">\r\n                    {{plan[0]?.custom_fields?.badgeColor | capitalizeAddSpaces}}\r\n                </div>\r\n                <div class=\"select\">\r\n                    <select (change)=\"onChange($event.target)\" class=\"custom_select\">\r\n                        <option value=\"\" class=\"custom_select_option\">Select for sale</option>\r\n                        <option value=\"3\" class=\"custom_select_option\">3% off for 3 months subscription</option>\r\n                        <option value=\"7\" class=\"custom_select_option\">7% off for 6 months. subscription</option>\r\n                        <option value=\"11\" class=\"custom_select_option\"> 11% off for a year. subscriptions</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"subscriptionLeftPart2\">\r\n                    <div class=\"sale_cost\" *ngIf=\"totalCost\">\r\n                        <sub class=\"sale\">For {{discountMonths}} {{discountMonths === 1 ? 'Year ' : 'Months ' }}</sub>\r\n                        <p class=\"sale_cost_text\">\r\n                            ${{totalCost}}\r\n                        </p>\r\n                    </div>\r\n                    <div class=\" subscriptionLeftDiv2\">$ {{constantCost}} {{totalCost ? ' ' : ' / Month'}}</div>\r\n                </div>\r\n            </div>\r\n            <button class=\"subscribeBtn\" (click)=\"openModalPayment()\">Subscribe</button>\r\n        </div>\r\n    </div>\r\n    <div class=\"belowGreyDiv\"></div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SubscriptionChanelComponent } from '@app/chanel-subscription/subscription-chanel/subscription-chanel.component';\r\nimport { PlanChanelComponent } from '@app/chanel-subscription/subscription-chanel/plan-chanel/plan-chanel.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SubscriptionChanelComponent,\r\n        data: {\r\n            title: 'Channel Subscription'\r\n        }\r\n    },\r\n    {\r\n        path: 'plan-chanel',\r\n        component: PlanChanelComponent,\r\n        data: {\r\n            title: 'Plan Channel'\r\n        }\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ChanelSubscriptionRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {CHANEL_SUBSCRIPTIONS_LIST} from '@core/constants/global';\r\nimport {Location} from '@angular/common';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {PaymentPlanComponent} from '@core/components/modals/payment-plan/payment-plan.component';\r\nimport {PaymentCompletedComponent} from '@core/components/modals/payment-completed/payment-completed.component';\r\nimport {PaymentsService} from '@core/services/wallet/payments.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {SubscriptionPlanService} from '@core/services/subscription-plan.service';\r\nimport {PlanChanelData, PlanChanelResponseInterface} from '@core/interfaces/plan-chanel.interface';\r\n\r\n@Component({\r\n    selector: 'app-plan-chanel',\r\n    templateUrl: './plan-chanel.component.html',\r\n    styleUrls: ['./plan-chanel.component.scss']\r\n})\r\nexport class PlanChanelComponent implements OnInit {\r\n\r\n    public params: any;\r\n    private planList = CHANEL_SUBSCRIPTIONS_LIST;\r\n    public plan: PlanChanelData [];\r\n    public planIcon: string;\r\n    public userCards;\r\n    public cost: any;\r\n    public constantCost: any;\r\n    public totalCost: any | undefined;\r\n    public planName: string;\r\n    public discount: number | undefined;\r\n    public discountMonths: number | undefined;\r\n    public plan_id: number | undefined;\r\n    private saleCostTotal: string;\r\n    subscriptions: Subscription[] = [];\r\n    authUser: CurrentUserData;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private _location: Location,\r\n        private subject: SubjectService,\r\n        private dialog: MatDialog,\r\n        private paymentsService: PaymentsService,\r\n        private _subscriptionPlanService: SubscriptionPlanService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n        this.params = this.route.snapshot?.queryParams?.plan;\r\n        this.cost = this.route.snapshot?.queryParams?.cost;\r\n        this.constantCost = this.route.snapshot?.queryParams?.cost;\r\n        this.plan_id = this.route.snapshot?.queryParams?.plan_id;\r\n        console.log(this.plan_id,\"HRACH\");\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._getPlan();\r\n        this.subscriptions.push(this.subject.currentUserCards.subscribe(dt => {\r\n            this.userCards = dt;\r\n        }));\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n        });\r\n    }\r\n\r\n    private _getPlan() {\r\n        this._subscriptionPlanService.getSubscriptionPlanViewByPermission(this.params)\r\n            .subscribe((data: PlanChanelResponseInterface) => {\r\n                this.plan = data.data.reverse();\r\n                this.planList.forEach((elem) => {\r\n                    this.plan.forEach((element: any) => {\r\n                        if (elem.title.toLowerCase().includes(element.custom_fields.badgeColor)) {\r\n                            this.planIcon = elem.img;\r\n                            this.planName = element.custom_fields.badgeColor;\r\n                        }\r\n                    });\r\n\r\n                });\r\n            });\r\n    }\r\n\r\n    public onChange(event) {\r\n        if (+event.value) {\r\n            let total = this.cost * event.value;\r\n            this.totalCost = total;\r\n            this.saleCostTotal = (total - (total * (+event.value / 100))).toFixed(2);\r\n            this.constantCost = this.saleCostTotal;\r\n            this.discount = +event.value / 100;\r\n            if (+event.value > 3 && +event.value <= 7) {\r\n                this.discountMonths = 6;\r\n            } else if (+event.value > 7 && +event.value <= 11) {\r\n                this.discountMonths = 1;\r\n            } else {\r\n                this.discountMonths = +event.value;\r\n            }\r\n        } else {\r\n            let total = this.cost;\r\n            this.saleCostTotal = total;\r\n            this.constantCost = this.saleCostTotal;\r\n            this.discount = undefined;\r\n            this.totalCost = undefined;\r\n            this.discountMonths = undefined;\r\n        }\r\n\r\n    }\r\n\r\n    openModalPayment() {\r\n        this.dialog.open(PaymentPlanComponent, {\r\n            width: '1085px',\r\n            data: {\r\n                plan: this.plan,\r\n                cards: this.userCards,\r\n                cost: this.constantCost,\r\n                discount: this.discount\r\n            }\r\n        }).afterClosed().subscribe(dt => {\r\n            if (dt?.payment.paymentIntent.status === 'succeeded') {\r\n                this.dialog.open(PaymentCompletedComponent, {\r\n                    width: '591px',\r\n                    height: '292px'\r\n                }).afterClosed().subscribe();\r\n            }\r\n            this.paymentsService.getAllPaymentsHistory({\r\n                user_id: this.authUser.id,\r\n                customer: dt.customer\r\n            }).subscribe(ph => {\r\n                this.subject.setAllPaymentsData(ph);\r\n                this.subject.changePaymentsData(ph);\r\n                const buySubscriptionInfoForBack = {\r\n                    customer: dt.customer,\r\n                    discount: dt.discount,\r\n                    planId: +this.plan_id\r\n                };\r\n                this._subscriptionPlanService.buySubscriptionPlan(buySubscriptionInfoForBack)\r\n                    .subscribe((data: any) => {\r\n                    console.log(data);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    backPage() {\r\n        this._location.back();\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChanelSubscriptionRoutingModule } from './chanel-subscription-routing.module';\r\nimport { SubscriptionChanelComponent } from './subscription-chanel/subscription-chanel.component';\r\nimport { PlanChanelComponent } from './subscription-chanel/plan-chanel/plan-chanel.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [SubscriptionChanelComponent, PlanChanelComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ChanelSubscriptionRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class ChanelSubscriptionModule { }\r\n"]}