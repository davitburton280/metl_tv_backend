{"version":3,"sources":["webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.ts","webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.html","webpack:///src/app/shared/components/user-tags/user-tags.component.ts","webpack:///src/app/shared/components/user-tags/user-tags.component.html","webpack:///src/app/core/components/modals/create-new-group-dialog/invite-chanel/invite-channel.component.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/invite-chanel/invite-channel.component.html","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/groups/dialogs/helper/remuveType.ts","webpack:///src/app/groups/dialogs/delete-group/delete-group.dialog.html","webpack:///src/app/groups/dialogs/delete-group/delete-group.dialog.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.ts","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.html","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.ts","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.html","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/single-group/edit-group/edit-group.component.html","webpack:///src/app/groups/single-group/edit-group/edit-group.component.ts","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/groups.module.ts"],"names":["SocialShareDialogComponent","data","dialog","toastr","this","shareUrl","encodeURIComponent","inputElement","closeAll","select","document","execCommand","setSelectionRange","success","copyInputMessage","UserTagsComponent","videoService","auth","_userInfoService","tags","tagSelected","_getAuthInfo","loggedIn","getUserTags","_userInfo","subscribe","authUser","console","log","user_id","id","dt","name","emit","InviteChannelComponent","_channelsService","_unsubscribe$","Subject","_usersInviteData","getSubscriptionUser","getUserChannelSubscriptions","pipe","takeUntil","usersConnection","userData","includes","push","CreateNewGroupDialogComponent","fb","_dialog","groupsService","socketService","groupsStore","uploadFile","lowerCaseRemoveSpaces","words","addDescriptionSectionShow","step","coverShowImg","avatarShowImg","discardORSave","subscriptions","_initForm","groupForm","group","required","custom_name","privacy","description","creator_id","username","event","shape","open","maxWidth","maxHeight","height","width","title","file","target","files","afterClosed","imageCoverFile","blob","reader","FileReader","onload","e","coverImgSrc","result","toString","readAsDataURL","imageAvatarFile","avatarImgSrc","avatar","cover","fdCover","FormData","append","_imgCoverSuccess","path","fdAvatar","_imgAvatarSuccess","_wordCount","text","nativeElement","value","split","length","patchValue","transform","valid","formValue","addGroup","close","closeDialog","submitForm","RemuveType","irrevocably","removeMembers","DeleteGroupDialog","_fb","dialogRef","_groupsService","typeEnum","nextStep","textChangeType","_formBuilder","changeValueRadioButton","deleteGroupForm","deleteOption","invalid","remuveData","type","get","remuveGroupByTypeAndGroupId","valueChanges","GroupItemComponent","url","replace","openDeleteDialog","ShowGroupsComponent","chatService","userStore","router","groups","searchKeyValue","isPrivate","dataSource$","groupsState$","state$","trackGroups","_getGroupList","filterGroup","searchKey","radioButton","checkboxButton","checked","eventTarget","filterData","group_type","getGroupList","search","onlyMy","groups$","filter","g","selectedGroup","navigateByUrl","next","complete","openModal","myGroupFilter","handleChange","_filterSearchKey","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","initForm","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","find","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","status","control","foundControl","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","SingleGroupComponent","route","isEmptyObj","loading","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","getUserGroupConnStatus","params","passedGroupName","_getGroupById","getGroupFromServer","getGroupById","selectGroup","joinGroup","link","rest","leaveGroup","member_id","setGroups","leavePageGroup","leavePageGroupNotify","member","leftGroups","removeFromPageGroupNotify","component","GroupMembersActionsMenuComponent","notificationsStore","adminRequestSent","moderatorRequestSent","sendMakeAdminRequest","removeGroupMember","removeFromPageGroup","removeAdminPrivileges","removePageGroupAdminPrivileges","is_admin","is_moderator","removeMember","AdminsListComponent","admin","user","connection","admins","a","isGroupCreator","authUserGroupConnection","getUserGroupConnection","GroupMembersListComponent","getAcceptedPageGroupAdminRequest","getDeclinedPageGroupAdminRequest","notification","updateNotifications","MemberRequestsListComponent","confirmGroupJoin","d","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","MediaTabComponent","AboutTabComponent","PeopleTabComponent","members","requestedMembers","getRemovedPageGroupAdminPrivileges","filterMembers","PostsTabComponent","postsService","trackByElement","getGroupPosts","groupPosts$","EditGroupComponent","GroupsRoutingModule","GroupsModule","routes","_route","_patchInitialValueForm","editGroupForm","nameGroup","_groupId","Boolean","UPDATE_FORM_DATA_GROUP","updateGroup","createImage","addDescriptionHideShow","updateGGroupInfo","children","forChild"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-social-share-dialog',\r\n    templateUrl: './social-share-dialog.component.html',\r\n    styleUrls: ['./social-share-dialog.component.scss']\r\n})\r\nexport class SocialShareDialogComponent implements OnInit {\r\n    shareUrl;\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n    ) {\r\n        this.shareUrl = data.shareUrl;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getTweeterLink() {\r\n        return 'https://twitter.com/intent/tweet?text=' + this.shareUrl;\r\n    }\r\n\r\n    getFacebookLink() {\r\n        return 'https://www.facebook.com/sharer/sharer.php?href=' + encodeURIComponent(this.shareUrl);\r\n    }\r\n\r\n    copyInputMessage(inputElement){\r\n        this.dialog.closeAll();\r\n        inputElement.select();\r\n        document.execCommand('copy');\r\n        inputElement.setSelectionRange(0, 0);\r\n        this.toastr.success('Captioned');\r\n    }\r\n\r\n}\r\n","<div class=\"modalDiv\">\r\n    <p class=\"shareLink\" >Share this link via</p>\r\n    <div class=\"linkImages\">\r\n        <a  target=\"_blank\" [href]=\"getTweeterLink()\">\r\n            <img class=\"twitterImg\" src=\"assets/img/twitter.svg\" alt=\"\">\r\n        </a>\r\n        <a  [href]=\"getFacebookLink()\"\r\n           onclick=\"javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');return false;\"\r\n           target=\"_blank\" title=\"Share on Facebook\">\r\n            <img class=\"facebookImg\" src=\"assets/img/facebook.svg\" alt=\"\">\r\n        </a>\r\n    </div>\r\n    <div class=\"copyingDiv\">\r\n        <input id=\"link-address-holder\" [value]=\"shareUrl\" #urlHolder>\r\n        <p class=\"copyLink\" (click)=\"copyInputMessage(urlHolder)\">Or copy link</p>\r\n    </div>\r\n    <button class=\"copy-url\" (click)=\"copyInputMessage(urlHolder)\">Copy</button>\r\n</div>\r\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-user-tags',\r\n    templateUrl: './user-tags.component.html',\r\n    styleUrls: ['./user-tags.component.scss']\r\n})\r\nexport class UserTagsComponent implements OnInit {\r\n    tags = [];\r\n    authUser: CurrentUserData;\r\n\r\n    @Output('tagSelected') tagSelected = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public auth: AuthService,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.authUser = this.getAuthUser.transform();\r\n        if (this.auth.loggedIn()) {\r\n            this.getUserTags();\r\n        }\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'WALLET SAVE CARD AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getUserTags() {\r\n        this.videoService.getUserTags({user_id: this.authUser?.id}).subscribe((dt: any) => {\r\n            this.tags = dt;\r\n        });\r\n    }\r\n\r\n    selectTag(name) {\r\n        this.tagSelected.emit(name);\r\n    }\r\n\r\n}\r\n","<ul class=\"categories\">\r\n    <ng-container *ngFor=\"let tag of tags\">\r\n\r\n        <li *ngIf=\"tag.tag_details\">\r\n            <a (click)=\"selectTag(tag.tag_details.name)\">{{tag.tag_details.name}}</a>\r\n        </li>\r\n    </ng-container>\r\n</ul>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ChanelInterface, CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-invite-channel',\r\n    templateUrl: './invite-channel.component.html',\r\n    styleUrls: ['invite-channel.component.scss']\r\n})\r\n\r\nexport class InviteChannelComponent implements OnInit, OnDestroy {\r\n    private usersConnection: any;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private authUser: CurrentUserData;\r\n    private _usersInviteData = [];\r\n    public channelSubscriptionMembers: ChanelInterface[];\r\n\r\n\r\n    constructor(\r\n        private _channelsService: ChannelsService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getSubscriptionUser();\r\n    }\r\n\r\n    private getSubscriptionUser() {\r\n        this._channelsService.getUserChannelSubscriptions({user_id: this.authUser.id})\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe((data: any) => {\r\n                this.usersConnection = data;\r\n                console.log(this.usersConnection);\r\n            });\r\n    }\r\n\r\n    private _getAuthInfo(): void {\r\n        this._userInfoService._userInfo\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe((data) => {\r\n                this.authUser = data;\r\n            });\r\n    }\r\n\r\n    public inviteUserInGroup(userData: any): void {\r\n        if (this._usersInviteData === [] || !this._usersInviteData.includes(userData)) {\r\n            this._usersInviteData.push(userData);\r\n            console.log('Concat Data ', this._usersInviteData);\r\n        } else {\r\n            console.log('Concat Data ', this._usersInviteData);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"invite-channel-members-wrapper\">\r\n    <mat-icon class=\"mat-icon-close\">\r\n        close\r\n    </mat-icon>\r\n    <div class=\"invite-channel-members-section-filter\">\r\n        <input type=\"text\" placeholder=\"Search\">\r\n        <mat-icon>\r\n            search\r\n        </mat-icon>\r\n    </div>\r\n    <div class=\"top-members-section\">\r\n        <div class=\"top-members-section-title\">\r\n            <h4>Top communities / channel or your Friends</h4>\r\n        </div>\r\n        <div class=\"members-block\">\r\n<!--            <div class=\"member\" *ngFor=\"let user of usersConnection\">-->\r\n<!--                <div class=\"images-members\">-->\r\n<!--                    <img [src]=\"user.avatar  | getImgPath:'images'\" alt=\"\">-->\r\n<!--                    <span class=\"member-name\">{{user.name}} </span>-->\r\n<!--                </div>-->\r\n<!--                <button class=\"invite-btn\" (click)=\"inviteUserInGroup(user)\">-->\r\n<!--                    <mat-icon>-->\r\n<!--                        {{'add'}}-->\r\n<!--                    </mat-icon>-->\r\n<!--                    <span>-->\r\n<!--                        Invite-->\r\n<!--                    </span>-->\r\n<!--                </button>-->\r\n<!--            </div>-->\r\n        </div>\r\n    </div>\r\n    <!--    <div class=\"other-channel-section\">-->\r\n    <!--        <div class=\"other-members-section-title\">-->\r\n    <!--            <h4>Other-channel</h4>-->\r\n    <!--        </div>-->\r\n    <!--        <div class=\"members-block\">-->\r\n    <!--            <div class=\"member\">-->\r\n    <!--                <div class=\"images-members\">-->\r\n    <!--                    <img src=\"assets/img/chatUser1.png\" alt=\"\">-->\r\n    <!--                    <span class=\"member-name\">Name Surname</span>-->\r\n    <!--                </div>-->\r\n    <!--                <button class=\"invite-btn\">-->\r\n    <!--                    <mat-icon>-->\r\n    <!--                        {{'add'}}-->\r\n    <!--                    </mat-icon>-->\r\n    <!--                    <span>-->\r\n    <!--                        Invite-->\r\n    <!--                    </span>-->\r\n    <!--                </button>-->\r\n    <!--            </div>-->\r\n    <!--        </div>-->\r\n    <!--    </div>-->\r\n    <div class=\"invite-btn\">\r\n        <button>Ok</button>\r\n    </div>\r\n</div>\r\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <!--    <div id=\"admin-info\">-->\r\n    <!--        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">-->\r\n    <!--        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>-->\r\n    <!--    </div>-->\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"step\" *ngIf=\"step === 1\">\r\n            <div class=\"field-row\">\r\n                <input\r\n                    id=\"group-name-input\"\r\n                    formControlName=\"name\"\r\n                    placeholder=\"Group name\">\r\n            </div>\r\n            <div class=\"add-description-action\" (click)=\"addDescriptionHideShow()\">\r\n                <mat-icon [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    {{!addDescriptionSectionShow ? 'add' : 'close'}}\r\n                </mat-icon>\r\n                <span [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    ADD DESCRIPTION\r\n                </span>\r\n            </div>\r\n            <div class=\"field-row\" *ngIf=\"addDescriptionSectionShow\">\r\n\r\n                <textarea\r\n                    #text\r\n                    (keydown)=\"_validatorDescription()\"\r\n                    formControlName=\"description\"\r\n                    placeholder=\"Type Text here...\"\r\n                    class=\"form-group-textarea\"></textarea>\r\n            </div>\r\n            <div class=\"border\"></div>\r\n            <div class=\"field-row\">\r\n                <label>Please choose Mode of Group</label>\r\n                <mat-radio-group\r\n                    aria-label=\"Select an option\"\r\n                    formControlName=\"privacy\">\r\n\r\n                    <mat-radio-button [value]=\"0\"\r\n                                      name=\"privacy\"\r\n                    >Public\r\n                    </mat-radio-button>\r\n                    <mat-radio-button [value]=\"1\"\r\n                                      name=\"privacy\"\r\n                    >Private\r\n                    </mat-radio-button>\r\n                </mat-radio-group>\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"add-cover-avatar\" *ngIf=\"step === 2\">\r\n            <div class=\"add-cover-avatar-title\">\r\n                <h2>Please choose cover images for your group</h2>\r\n            </div>\r\n            <div class=\"images-box\">\r\n                <div class=\"images-cover\">\r\n<!--                    {{_imgCoverSuccess}}-->\r\n                    <img class=\"images-cover-create c1\" *ngIf=\"!coverShowImg\" [src]=\"_imgCoverSuccess|getImgPath:'images'\" alt=\"\">\r\n                    <img class=\"images-cover-create c2\" *ngIf=\"coverShowImg\" [src]=\"coverImgSrc\" alt=\"\">\r\n                    <input type=\"file\" #coverChangeImg hidden (change)=\"createImage($event, 'square')\">\r\n                    <button (click)=\"coverChangeImg.click()\" class=\"position-btn\">\r\n                        <mat-icon>\r\n                            create\r\n                        </mat-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"images-avatar\">\r\n                    <img *ngIf=\"avatarImgSrc\" [src]=\"avatarImgSrc\" alt=\"\">\r\n                    <mat-icon *ngIf=\"!avatarImgSrc\">add_a_photo</mat-icon>\r\n                    <input type=\"file\" #avatarChangeImg hidden (change)=\"createImage($event, 'circle')\">\r\n                    <button (click)=\"avatarChangeImg.click()\" class=\"position-btn\">\r\n                        <mat-icon>\r\n                            create\r\n                        </mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div class=\"images-save-btn-box\" *ngIf=\"(avatarImgSrc && discardORSave) || (coverImgSrc && discardORSave)\">\r\n                <button class=\"save-btn\" (click)=\"saveAvatarImage(avatarImgSrc,coverImgSrc)\">Save</button>\r\n                <button class=\"discard-btn\" (click)=\"remuveAvatarImage('','')\">DISCARD</button>\r\n            </div>\r\n<!--            <div class=\"invite-group\" [ngClass]=\"{'m-60':!avatarImgSrc}\">-->\r\n<!--                <div class=\"invite-group-section-title\">-->\r\n<!--                    <h3 style=\"font-size: 14px;\">Please invite members for your group</h3>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"images-members_and-invite-members-action\">-->\r\n<!--                    <div class=\"images-members\">-->\r\n<!--                        <div class=\"images-members-img\">-->\r\n<!--                            <img src=\"assets/img/chatUser1.png\" alt=\"\">-->\r\n<!--                            <mat-icon>-->\r\n<!--                                add-->\r\n<!--                            </mat-icon>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                    <div class=\"invite-members-action\">-->\r\n<!--                        <button class=\"invite-members-btn\" (click)=\"inviteChanelMembersDialog()\">-->\r\n<!--                            <mat-icon>-->\r\n<!--                                plus-->\r\n<!--                            </mat-icon>-->\r\n<!--                            <span>-->\r\n<!--                                Invite-->\r\n<!--                            </span>-->\r\n<!--                        </button>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button class=\"back\" (click)=\"backStep()\" *ngIf=\"step === 2\">Back</button>\r\n            <button class=\"submit\" (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {ImgEditCropperComponent} from '@core/components/modals/img-edit-cropper/img-edit-cropper.component';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {InviteChannelComponent} from '@core/components/modals/create-new-group-dialog/invite-chanel';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-create-new-group-dialog',\r\n    templateUrl: './create-new-group-dialog.component.html',\r\n    styleUrls: ['./create-new-group-dialog.component.scss']\r\n})\r\nexport class CreateNewGroupDialogComponent implements OnInit {\r\n    @ViewChild('text') text: ElementRef;\r\n    private _wordCount: any;\r\n    public words = 0;\r\n    public groupForm: FormGroup;\r\n    public addDescriptionSectionShow = false;\r\n    public step = 1;\r\n    public coverShowImg = false;\r\n    public avatarShowImg = false;\r\n    public discardORSave = false;\r\n    public coverImgSrc;\r\n    public avatarImgSrc;\r\n    private imageCoverFile;\r\n    private imageAvatarFile;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    public _imgCoverSuccess;\r\n    private _imgAvatarSuccess;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private fb: FormBuilder,\r\n        private _dialog: MatDialog,\r\n        private _userInfoService: UserInfoService,\r\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService,\r\n        private groupsStore: GroupsStoreService,\r\n        private uploadFile: VideoService,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n        // console.log(this.authUser,\"HRach\");\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-types\r\n    get coverImg(): Boolean {\r\n        return false;\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-types\r\n    get profileImg(): Boolean {\r\n        return false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._initForm();\r\n    }\r\n\r\n    private _initForm() {\r\n        this.groupForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            custom_name: ['', Validators.required],\r\n            privacy: [0, Validators.required],\r\n            description: ['', Validators.required],\r\n            creator_id: this.authUser.id,\r\n            username: this.authUser.username\r\n        });\r\n    }\r\n\r\n    public addDescriptionHideShow(): void {\r\n        this.addDescriptionSectionShow = !this.addDescriptionSectionShow;\r\n    }\r\n\r\n    public backStep(): void {\r\n        this.step = 1;\r\n    }\r\n\r\n    public createImage(event, shape) {\r\n        const file = event.target.files[0];\r\n        this._dialog.open(ImgEditCropperComponent, {\r\n            maxWidth: '60vw',\r\n            maxHeight: '70vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {\r\n                title: 'Profile Image Cropper',\r\n                shape,\r\n                file\r\n            }\r\n        }).afterClosed()\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    if (dt.shape === 'square') {\r\n                        this.imageCoverFile = dt.blob;\r\n                        this.coverShowImg = true;\r\n                        this.discardORSave = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.coverImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageCoverFile);\r\n                    }\r\n                    if (dt.shape === 'circle') {\r\n                        this.imageAvatarFile = dt.blob;\r\n                        this.avatarShowImg = true;\r\n                        this.discardORSave = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.avatarImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageAvatarFile);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    public inviteChanelMembersDialog() {\r\n        this._dialog.open(InviteChannelComponent, {\r\n            height: '600px',\r\n            width: '400px',\r\n            // data: {\r\n            //     title: 'Profile Image Cropper',\r\n            //     shape,\r\n            //     file\r\n            // }\r\n        });\r\n    }\r\n\r\n    public saveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n        if (this.coverShowImg) {\r\n            const fdCover = new FormData();\r\n            fdCover.append('image', this.imageCoverFile);\r\n            fdCover.append('belonging', 'group_cover_img');\r\n            fdCover.append('duration', '');\r\n            this.uploadFile.uploadFile(fdCover, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgCoverSuccess = data.path;\r\n                console.log(this._imgCoverSuccess);\r\n            });\r\n        }\r\n        if (this.avatarShowImg) {\r\n            const fdAvatar = new FormData();\r\n            fdAvatar.append('image', this.imageAvatarFile);\r\n            fdAvatar.append('belonging', 'group_avatar_img');\r\n            fdAvatar.append('duration', '');\r\n            this.uploadFile.uploadFile(fdAvatar, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgAvatarSuccess = data.path;\r\n                console.log(this._imgAvatarSuccess);\r\n            });\r\n        }\r\n    }\r\n\r\n    public remuveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n    }\r\n\r\n    public _validatorDescription() {\r\n        this._wordCount = this.text ? this.text.nativeElement.value.split(/\\s+/) : 0;\r\n\r\n        switch (this._wordCount) {\r\n            case this._wordCount.includes('a'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            case this._wordCount.includes('the'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            case this._wordCount.includes('an'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            default:\r\n                this.words = this._wordCount ? this._wordCount.length : 0;\r\n            // code block\r\n        }\r\n\r\n        console.log(this.words);\r\n        this.words = 0;\r\n    }\r\n\r\n    public submitForm(): void {\r\n        this.step++;\r\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\r\n        if (this.groupForm.valid && this.step === 3) {\r\n            console.log(this._imgAvatarSuccess, this._imgCoverSuccess, 'Images');\r\n            const formValue = {\r\n                ...this.groupForm.value,\r\n                avatar: this._imgAvatarSuccess,\r\n                cover: this._imgCoverSuccess,\r\n            };\r\n            this.groupsService.addGroup(formValue);\r\n        // .subscribe(async (dt) => {\r\n        //         console.log(dt,\"hrach\");\r\n        //         const selectedGroup = dt.find(d => formValue.name === d.name);\r\n        //         this.groupsStore.setGroups(dt);\r\n        //         this.groupsStore.selectGroup(selectedGroup);\r\n        //         this.socketService.setNewPageGroup(formValue);\r\n        //\r\n        //\r\n        //     });\r\n            this.dialog.close(this.groupForm.value);\r\n            this.step = 1;\r\n        }\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close(null);\r\n    }\r\n\r\n}\r\n","export enum RemuveType {\r\n    irrevocably = 'It will be deleted permanently',\r\n    removeMembers = 'Access to group members will be removed',\r\n}\r\n","<form class=\"delete-group_dialog\" [formGroup]='deleteGroupForm'>\r\n    <div class=\"delete-group_dialog-title\">\r\n        <img src=\"assets/img/question_mark.svg\" alt=\"\">\r\n    </div>\r\n\r\n    <mat-radio-group\r\n        *ngIf=\"!nextStep\"\r\n        aria-label=\"Select an option\"\r\n        formControlName=\"deleteOption\">\r\n        <mat-radio-button [value]=\"1\">\r\n            <span class=\"radio-btn_desc\">\r\n                 You are about to delete this group permanently.\r\n                You will not be able to get your group back after deletion.\r\n            </span>\r\n        </mat-radio-button>\r\n        <mat-radio-button [value]=\"2\">\r\n              <span class=\"radio-btn_desc\">\r\n                  Many people within the community are interacting with this group.\r\n                  Are you sure you want to delete?\r\n            </span>\r\n        </mat-radio-button>\r\n        <!--        <mat-radio-button [value]=\"3\" >-->\r\n        <!--              <span class=\"radio-btn_desc\">-->\r\n        <!--                  You are about to delete a group permanently.-->\r\n        <!--                  Would you like to let an admin take over the group instead?-->\r\n        <!--            </span>-->\r\n        <!--        </mat-radio-button>-->\r\n    </mat-radio-group>\r\n\r\n\r\n    <div class=\"btn-section\"\r\n         *ngIf=\"!nextStep\">\r\n\r\n        <button class=\"remuve-btn\" (click)=\"nextStepTrue()\">Remove</button>\r\n        <button class=\"cancel-btn\" (click)=\"closeDialog()\">Cancel</button>\r\n    </div>\r\n\r\n    <div class=\"submit_form\"  *ngIf=\"nextStep\">\r\n        <div class=\"submit_form-desc\">\r\n            <div class=\"submit_form-title\">\r\n                <span>Are you sure you want to delete this group?</span>\r\n            </div>\r\n            <div class=\"submit_form-subtitle\">\r\n               <span>{{textChangeType}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"submit-button\">\r\n            <button class=\"no-btn\" (click)=\"prevStepFalse()\">NO</button>\r\n            <button class=\"yes-btn\" (click)=\"remuveGroupByType()\">YES</button>\r\n        </div>\r\n\r\n    </div>\r\n</form>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {RemuveType} from '@app/groups/dialogs/helper/remuveType';\r\n\r\n@Component({\r\n    selector: 'app-delete-group-dialog',\r\n    templateUrl: 'delete-group.dialog.html',\r\n    styleUrls: ['delete-group.dialog.scss']\r\n})\r\n\r\nexport class DeleteGroupDialog implements OnInit, OnDestroy {\r\n    public deleteGroupForm: FormGroup;\r\n    private typeEnum = RemuveType;\r\n    public nextStep = false;\r\n    public textChangeType = this.typeEnum.irrevocably;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private dialogRef: MatDialogRef<any>,\r\n        private _groupsService: GroupsService,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._formBuilder();\r\n        this.changeValueRadioButton();\r\n    }\r\n\r\n    private _formBuilder(): void {\r\n        this.deleteGroupForm = this._fb.group({\r\n            deleteOption: [1, Validators.required]\r\n        });\r\n    }\r\n\r\n    public nextStepTrue() {\r\n        this.nextStep = true;\r\n    }\r\n\r\n    public prevStepFalse() {\r\n        this.nextStep = false;\r\n    }\r\n\r\n    public closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public remuveGroupByType() {\r\n        if (this.deleteGroupForm.invalid) {\r\n            return;\r\n        }\r\n\r\n        const remuveData = {\r\n            type: this.deleteGroupForm.get('deleteOption').value,\r\n            id: this.data\r\n        };\r\n        this._groupsService.remuveGroupByTypeAndGroupId(remuveData);\r\n    }\r\n\r\n    public changeValueRadioButton() {\r\n        this.deleteGroupForm.get('deleteOption').valueChanges\r\n            .subscribe((data) => {\r\n                console.log(data, 1213);\r\n                if (data === 1) {\r\n                    this.textChangeType = this.typeEnum.irrevocably;\r\n                }\r\n                this.textChangeType = this.typeEnum.removeMembers;\r\n                console.log(this.textChangeType);\r\n            });\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<!-- Group list item start-->\r\n<div  class=\"groupMessageDiv\">\r\n    <!-- Group list item avatar start-->\r\n    <div class=\"img-wrap\">\r\n        <img class=\"groupMessageImg\" *ngIf=\"!group.avatar\" [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n        <img class=\"groupMessageImg\" *ngIf=\"group.avatar\" [src]=\"group.avatar|getImgPath:'images'\">\r\n\r\n        <!--Group action start-->\r\n        <div class=\"group-action\">\r\n            <mat-icon appNavigateToFixedGroupUrl [name]=\"group.id\" >remove_red_eye</mat-icon>\r\n            <mat-icon [routerLink]=\"'/groups/edit/'+group?.id\">edit</mat-icon>\r\n            <mat-icon (click)=\"openDeleteDialog()\">delete</mat-icon>\r\n        </div>\r\n        <!--Group action end-->\r\n    </div>\r\n    <!-- Group list item avatar end-->\r\n\r\n    <!-- Group list item name start-->\r\n    <div class=\"group-name-wrap\">\r\n\r\n        <!-- Group name start-->\r\n        <strong>{{group.name}}</strong>\r\n        <!-- Group name end-->\r\n\r\n        <!-- Group privacy start-->\r\n        <mat-icon *ngIf=\"group.privacy === 1\">enhanced_encryption</mat-icon>\r\n        <!-- Group privacy end-->\r\n    </div>\r\n    <!-- Group list item name end-->\r\n</div>\r\n<!-- Group list item end-->\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {DeleteGroupDialog} from '@app/groups/dialogs';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-group-item',\r\n    templateUrl: './group-item.component.html',\r\n    styleUrls: ['./group-item.component.scss']\r\n})\r\nexport class GroupItemComponent implements OnInit {\r\n    @Input() group;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private _dialog: MatDialog\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    public openDeleteDialog() {\r\n        this._dialog.open(DeleteGroupDialog, {\r\n            height: '400px',\r\n            width: 'auto',\r\n            data: this.group.id,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        });\r\n    }\r\n\r\n    getUrl() {\r\n        const url = '/groups/' + this.group.id.replace(' /g', '_') + '/about';\r\n        return this.lowerCaseRemoveSpaces.transform(url);\r\n    }\r\n\r\n}\r\n","<!--create group button start-->\r\n<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<!--create group button end-->\r\n<form [formGroup]=\"filterGroup\">\r\n    <!--radio button filter start-->\r\n    <div class=\"filter-groups-section\">\r\n\r\n        <div class=\"filter-groups-section-radio_button\">\r\n            <!--   Filter Radio  value  all start-->\r\n            <input\r\n                type=\"radio\"\r\n\r\n                formControlName=\"radioButton\"\r\n                (change)=\"myGroupFilter($event.target)\"\r\n                value=\"\"\r\n                id=\"all\">\r\n            <label for=\"all\">All</label>\r\n            <!--   Filter Radio  value  all start-->\r\n\r\n            <!--   Filter Radio  value  my_group start-->\r\n            <input\r\n                type=\"radio\"\r\n                (change)=\"myGroupFilter($event.target)\"\r\n                value=\"true\"\r\n\r\n                formControlName=\"radioButton\"\r\n                id=\"my_group\">\r\n            <label for=\"my_group\">My groups</label>\r\n            <!--   Filter Radio  value  my_group start-->\r\n\r\n            <!--   Filter checkbox  value  privat_group start-->\r\n            <input\r\n                type=\"checkbox\"\r\n                formControlName=\"checkboxButton\"\r\n                (change)=\"handleChange($event.target)\"\r\n                value=\"false\"\r\n                id=\"privat_groups\">\r\n            <label for=\"privat_groups\">{{!isPrivate ? 'Public' : 'Private'}} groups</label>\r\n            <!--   Filter checkbox  value  privat_group start-->\r\n        </div>\r\n\r\n\r\n    </div>\r\n    <!--radio button filter end-->\r\n\r\n    <!--Search filter start-->\r\n    <div class=\"filter-groups-section_search\">\r\n        <input type=\"text\"\r\n               placeholder=\"Search\"\r\n               (keyup)=\"_filterSearchKey($event.target)\"\r\n               formControlName=\"searchKey\">\r\n        <mat-icon>\r\n            search\r\n        </mat-icon>\r\n    </div>\r\n    <!--Search filter end-->\r\n</form>\r\n<!--Group List start-->\r\n<ng-container *ngIf=\"( dataSource$ | async) as state\">\r\n    <ul class=\"ulBorderBottom\" *ngIf=\"state.groups.length && !state.loading\">\r\n\r\n        <li class=\"group-item-wrap\" *ngFor=\"let group of state.groups\">\r\n            <app-group-item [group]=\"group\"></app-group-item>\r\n        </li>\r\n\r\n    </ul>\r\n    <div class=\"no_result\" *ngIf=\"state.groups.length == 0 && !state.loading\">\r\n        <div class=\"no_result-img\">\r\n            <img src=\"assets/img/Error-amico.svg\" alt=\"amico\">\r\n        </div>\r\n        <div class=\"no_result-title\">\r\n            <h2>No Result Found</h2>\r\n        </div>\r\n        <div class=\"no_result-desc\">\r\n            <span>\r\n                We can`t find any item matching\r\n            </span>\r\n            <span>\r\n                your search\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"( state.loading)\" style=\"height: 400px;position: relative;\">\r\n        <app-loading></app-loading>\r\n    </div>\r\n</ng-container>\r\n<!--Group List end-->\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {UserStoreService} from '@core/services/stores/user-store.service';\nimport {Observable, Subject} from 'rxjs';\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ChatService} from '@core/services/chat.service';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {Router} from '@angular/router';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {CurrentUserData} from '@core/interfaces';\nimport {UserInfoService} from '@core/services/user-info.service';\nimport {takeUntil} from 'rxjs/operators';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {GroupsService} from '@core/services/groups.service';\nimport {GroupInitialStateInterface} from '@core/interfaces/group.interface';\n\n@Component({\n    selector: 'app-show-groups',\n    templateUrl: './show-groups.component.html',\n    styleUrls: ['./show-groups.component.scss']\n})\nexport class ShowGroupsComponent implements OnInit, OnDestroy {\n    public filterGroup: FormGroup | undefined;\n    public dataSource$: Observable<GroupInitialStateInterface>;\n    public authUser: CurrentUserData;\n    private _unsubscribe$ = new Subject<void>();\n    private groups = [];\n    private searchKeyValue = '';\n    public isPrivate = false;\n\n    constructor(\n        public groupsStore: GroupsStoreService,\n        private _groupsService: GroupsService,\n        private chatService: ChatService,\n        private userStore: UserStoreService,\n        private socketService: SocketIoService,\n        public router: Router,\n        private dialog: MatDialog,\n        private _fb: FormBuilder,\n        private _userInfoService: UserInfoService,\n    ) {\n        this._getAuthInfo();\n        this.dataSource$ = this._groupsService.groupsState$.state$;\n    }\n\n    ngOnInit(): void {\n        this.trackGroups();\n        this._formBuilder();\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    private _formBuilder(): void {\n        this.filterGroup = this._fb.group({\n            searchKey: [''],\n            radioButton: [''],\n            checkboxButton: [false],\n        });\n    }\n\n    public handleChange(e): void {\n        this.isPrivate = e.checked;\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    public myGroupFilter(e): void {\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    public _filterSearchKey(eventTarget): any {\n        this.searchKeyValue = eventTarget.value;\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    private _getGroupList(filterData, group_type, isPrivate): any {\n        const params = {\n            search: filterData,\n            onlyMy: group_type,\n            isPrivate: isPrivate ? 1 : 0\n        };\n        this._groupsService.getGroupList(params);\n    }\n\n    private trackGroups() {\n        this.groupsStore.groups$\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe(dt => {\n                this.groups = dt;\n            });\n    }\n\n    private _getAuthInfo() {\n        this._userInfoService._userInfo\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe((data) => {\n                this.authUser = data;\n            });\n    }\n\n    public filterGroups(type) {\n        return this.groups.filter(g => {\n            return type === 'managed' ?\n                g.creator_id === this.authUser?.id :\n                g.creator_id !== this.authUser?.id;\n        });\n    }\n\n    public openModal() {\n        this.dialog.open(CreateNewGroupDialogComponent, {\n            width: '700px',\n            height: 'auto',\n            data: this.authUser\n        }).afterClosed()\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe(async (selectedGroup) => {\n                if (selectedGroup) {\n                    await this.router.navigateByUrl('/groups');\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._unsubscribe$.next();\n        this._unsubscribe$.complete();\n    }\n}\n","<div id=\"dialog-header\">\r\n    <h3>Invite contacts to this group</h3>\r\n    <div>\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n</div>\r\n<form [formGroup]=\"contactsInviteForm\">\r\n    <div id=\"group-members-wrap\">\r\n        <div id=\"suggested-contacts\">\r\n            <div id=\"contact-search-wrap\">\r\n                <input placeholder=\"Find a contact\">\r\n                <i class=\"fas fa-search\"></i>\r\n            </div>\r\n\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\r\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"'contact_'+control.value.i\">\r\n                            <div class=\"avatar-wrap\">\r\n                                <img class=\"avatar\"\r\n                                     [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\r\n                                <p class=\"contact-status\"\r\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <label>\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"hidden\" formControlName=\"name\">\r\n                            <input type=\"checkbox\" formControlName=\"checked\"\r\n                                   [id]=\"'contact_'+control.value.id\"\r\n                                   (change)=\"selectContact($event,control)\"\r\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\r\n                            >\r\n                            <span></span>\r\n                        </label>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"selected-contacts\">\r\n            <p id=\"selected-contacts-count\" *ngIf=\"selectedContacts.length as length\">\r\n                {{length + ' ' + (length === 1 ? 'contact' : 'contacts')}}  selected\r\n            </p>\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"control.value.id+'_'+i\">\r\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <button id=\"remove-from-selected-contacts-btn\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div id=\"dialog-actions\">\r\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {Subscription} from 'rxjs';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-invitation-dialog',\r\n    templateUrl: './group-members-invitation-dialog.component.html',\r\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\r\n})\r\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\r\n    selectedGroup;\r\n    userContacts: User[] = [];\r\n    selectedContacts: User[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    contactsInviteForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private groupsStore: GroupsStoreService,\r\n        private usersMessagesStore: UsersMessagesSubjectService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\r\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\r\n        private fb: FormBuilder\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedGroup = this.groupsStore.selectedGroup;\r\n        this.initForm();\r\n    }\r\n\r\n\r\n    initForm() {\r\n        this.contactsInviteForm = this.fb.group({\r\n            contacts: this.fb.array(this.getContactsFormGroup()),\r\n        });\r\n    }\r\n\r\n    getContactsFormGroup() {\r\n        const formArray = [];\r\n        this.usersMessagesStore.usersMessages.map((c, index) => {\r\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\r\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\r\n            let connectionWithGroup = 'not joined';\r\n\r\n            if (foundInGroup) {\r\n                const connectionContainer = foundInGroup.groups_members;\r\n\r\n                if (foundInGroup) {\r\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\r\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\r\n                        connectionWithGroup = 'accepted';\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            formArray.push(this.fb.group({\r\n                name: 'contact_' + index,\r\n                checked: !!foundInSelected,\r\n                status: connectionWithGroup,\r\n                ...c\r\n            }));\r\n        });\r\n        return formArray;\r\n    }\r\n\r\n    selectContact(event: Event, control: AbstractControl) {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.selectedContacts.push(control.value);\r\n        } else {\r\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        }\r\n    }\r\n\r\n    removeContactFromSelected(control: AbstractControl) {\r\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\r\n        this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        foundControl.patchValue({checked: false});\r\n    }\r\n\r\n    sendInvitationsToContacts() {\r\n        this.subscriptions.push(this.groupsService.addGroupMembers({\r\n            group_id: this.selectedGroup.id,\r\n            member_ids: this.selectedContacts.map(c => c.id)\r\n        }).subscribe(dt => {\r\n            this.socketService.inviteToNewPageGroup({\r\n                invited_members: this.selectedContacts,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsStore.changeGroup(dt);\r\n            this.closeDialog();\r\n        }));\r\n    }\r\n\r\n    isProcessedContact(status) {\r\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\r\n    }\r\n\r\n    get contactCtrls() {\r\n        return this.contactsInviteForm.controls.contacts as FormArray;\r\n    }\r\n\r\n    get checkedContactCtrls() {\r\n        return this.contactCtrls.controls.filter(c => c.value.checked);\r\n    }\r\n\r\n    getCheckBoxControl(control) {\r\n        return control.controls.checked;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"selectedGroup && !loading\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div class=\"images-box\">\r\n            <div class=\"images-cover\">\r\n                <img class=\"images-cover-create\" [src]=\"selectedGroup?.cover|getImgPath:'images'\" alt=\"\">\r\n            </div>\r\n            <div class=\"images-avatar\">\r\n                <img [src]=\"selectedGroup?.avatar|getImgPath:'images'\" alt=\"\">\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row groupsRow\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n\r\n                <button type=\"button\" id=\"edit-profile\"\r\n                        [routerLink]=\"'/groups/edit/'+selectedGroup?.id\">\r\n                    <mat-icon>edit</mat-icon>\r\n                    Edit profile\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<div style=\"height: 400px;position: relative;\" *ngIf=\"loading\">\r\n        <app-loading></app-loading>\r\n</div>\r\n\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-single-group',\r\n    templateUrl: './single-group.component.html',\r\n    styleUrls: ['./single-group.component.scss']\r\n})\r\nexport class SingleGroupComponent implements OnInit, OnDestroy {\r\n    authUser: CurrentUserData;\r\n    public loading = false;\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    selectedGroup;\r\n    isOwnGroup = false;\r\n    passedGroupName: string;\r\n    groupTabs = GROUP_PAGE_TABS;\r\n    groupPrivacy = 'public';\r\n\r\n    userGroupConnStatus = 'not connected';\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        private socketService: SocketIoService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackSelectedGroup();\r\n        this.getSelectedGroup();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getConfirmedJoinGroup();\r\n        this.getIgnoredJoinGroup();\r\n        this.getJoinGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n    }\r\n\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n        });\r\n    }\r\n\r\n    trackSelectedGroup() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\r\n            console.log(dt, 159357);\r\n            this.selectedGroup = dt;\r\n            // this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\r\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\r\n                this.getUserGroupConnStatus();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.id;\r\n            if (!this._getGroupById()) {\r\n                this.getGroupFromServer();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getGroupById() {\r\n        this.groupsService.getGroupById(+this.passedGroupName)\r\n            .subscribe((data: any) => {\r\n                this.selectedGroup = data;\r\n                this.groupsStore.selectGroup(this.selectedGroup);\r\n            });\r\n        return !!this.selectedGroup;\r\n    }\r\n\r\n    getGroupFromServer() {\r\n        this.loading = true;\r\n        this.groupsService.getGroupById(+this.passedGroupName)\r\n            .subscribe(data => {\r\n            this.selectedGroup = data;\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupPrivacy = data.privacy === 1 ? 'private' : 'public';\r\n            this.loading = false;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        });\r\n    }\r\n\r\n    joinGroup() {\r\n        console.log(this.selectedGroup);\r\n        this.groupsService.joinGroup({\r\n            member_ids: [this.authUser.id],\r\n            group_id: this.selectedGroup.id,\r\n            accepted: 1\r\n        }).subscribe(dt => {\r\n            this.userGroupConnStatus = 'unconfirmed';\r\n\r\n            this.socketService.joinGroup({\r\n                group: this.selectedGroup,\r\n                from_user: this.authUser,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n\r\n            this.groupsStore.changeGroup(dt);\r\n        });\r\n    }\r\n\r\n    getJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('get joined', rest.group);\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    this.groupsStore.setGroups(dt);\r\n                    this.socketService.leavePageGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedMembersCount() {\r\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('confirmed in group page', data);\r\n            this.userGroupConnStatus = 'confirmed';\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getIgnoredJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('ignored in group page', rest);\r\n            if (rest.member.id === this.authUser.id) {\r\n                this.groupsStore.setGroups(rest.leftGroups);\r\n                this.groupsStore.selectGroup(rest.group);\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\r\n            const {member, leftGroups} = data;\r\n            console.log('removed from group in group page', data);\r\n            this.groupsStore.changeGroup(data.group);\r\n            if (member.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n        }));\r\n    }\r\n\r\n    private getUserGroupConnStatus() {\r\n        this.selectedGroup.group_members?.map(m => {\r\n            if (m.id === this.authUser.id) {\r\n                if (m.groups_members.confirmed === 1) {\r\n                    this.userGroupConnStatus = 'confirmed';\r\n                } else {\r\n                    if (m.groups_members.accepted === 1) {\r\n                        this.userGroupConnStatus = 'unconfirmed';\r\n                    } else {\r\n                        this.userGroupConnStatus = 'not connected';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    showJoinBtn() {\r\n        return !this.isOwnGroup;\r\n    }\r\n\r\n    onOutletLoaded(component) {\r\n        if (this.selectedGroup) {\r\n            component.selectedGroup = this.selectedGroup;\r\n            component.isOwnGroup = this.isOwnGroup;\r\n            component.authUser = this.authUser;\r\n        }\r\n    }\r\n\r\n    openMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\r\n            height: '690px',\r\n            width: '950px',\r\n            data: this.authUser,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div>\r\n    <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\r\n        <i class=\"fas fa-ellipsis-h\"></i>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button id=\"make-admin\" mat-menu-item\r\n                *ngIf=\"!isAdmin(member) && !adminRequestSent\"\r\n                (click)=\"makeAdmin(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make admin</span>\r\n        </button>\r\n        <button id=\"remove-make-admin\" mat-menu-item *ngIf=\"isAdmin(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group admin privileges</span>\r\n        </button>\r\n        <button id=\"remove-make-moderator\" mat-menu-item\r\n                *ngIf=\"isModerator(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group moderator privileges</span>\r\n        </button>\r\n        <button id=\"make-moderator\" *ngIf=\"!isModerator(member) && !moderatorRequestSent\" mat-menu-item\r\n                (click)=\"makeAdmin(member,'moderator')\"\r\n                [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make moderator</span>\r\n        </button>\r\n        <button id=\"remove-member-btn\" mat-menu-item [disableRipple]=\"true\" (click)=\"removeMember(member)\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-group-members-actions-menu',\r\n    templateUrl: './group-members-actions-menu.component.html',\r\n    styleUrls: ['./group-members-actions-menu.component.scss']\r\n})\r\nexport class GroupMembersActionsMenuComponent implements OnInit, OnDestroy {\r\n    @Input() member;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    adminRequestSent = false;\r\n    moderatorRequestSent = false;\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private dialog: MatDialog,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    makeAdmin(member, type = 'admin') {\r\n        console.log('make admin', member)\r\n        this.socketService.sendMakeAdminRequest({\r\n            from_user: this.authUser,\r\n            group: this.selectedGroup,\r\n            member,\r\n            type,\r\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                invites you to become ${type === 'admin' ? 'an admin' : 'a moderator'}\r\n                 for the <strong>${this.selectedGroup.name}</strong> group`\r\n        });\r\n\r\n        this.adminRequestSent = type === 'admin';\r\n        this.moderatorRequestSent = type === 'moderator';\r\n    }\r\n\r\n    removeMember(member) {\r\n        console.log('remove')\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromPageGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    removeAdminPrivileges(member, type = 'admin') {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.subscriptions.push(this.groupsService.removeAdminPrivileges({\r\n                    member_id: member.id,\r\n                    group_id: this.selectedGroup.id\r\n                }).subscribe(dt => {\r\n                    this.socketService.removePageGroupAdminPrivileges({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed ${type}  privileges of <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       for the <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                    this.groupsStore.changeGroup(dt);\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    makeModerator(member) {\r\n\r\n    }\r\n\r\n    isAdmin(member) {\r\n        return member.groups_members.is_admin;\r\n    }\r\n\r\n    isModerator(member) {\r\n        return member.groups_members.is_moderator;\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"admins\">\r\n    <strong>Admins & moderators</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let admin of admins\">\r\n            <div class=\"details\">\r\n                <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'images'\">\r\n                <div>\r\n                    <p class=\"full-name\" [routerLink]=\"'/users/'+admin.username\">\r\n                        {{admin.first_name + ' ' + admin.last_name}}\r\n                    </p>\r\n                    <span class=\"role\">{{getRoleName(admin)}}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <app-group-members-actions-menu *ngIf=\"showActionsMenu(admin)\"\r\n                                            [member]=\"admin\"\r\n                                            [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            [isOwnGroup]=\"isOwnGroup\"></app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admins-list',\r\n    templateUrl: './admins-list.component.html',\r\n    styleUrls: ['./admins-list.component.scss']\r\n})\r\nexport class AdminsListComponent implements OnInit {\r\n    @Input() admins;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.selectedGroup,\"HRach\");\r\n    }\r\n\r\n    isGroupCreator(admin) {\r\n        return admin.id === this.selectedGroup?.creator_id;\r\n    }\r\n\r\n    isGroupAdmin(admin) {\r\n        return !!admin.groups_members.is_admin;\r\n    }\r\n\r\n\r\n    getUserGroupConnection(user) {\r\n        let connection;\r\n        this.admins.map(a => {\r\n            if (a.id === user?.id) {\r\n                connection = a.groups_members.is_admin ? 'Admin' : 'Moderator';\r\n\r\n                if (this.isGroupCreator(user)) {\r\n                    connection = 'Group creator';\r\n                }\r\n            }\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    showActionsMenu(admin) {\r\n        if (this.authUserGroupConnection === 'Admin') {\r\n            return !this.isGroupCreator(admin) && (admin.id === this.authUser.id || admin.groups_members.is_moderator);\r\n        } else if (this.authUserGroupConnection === 'Group creator') {\r\n            return !this.isGroupCreator(admin);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getRoleName(admin) {\r\n        return this.getUserGroupConnection(admin);\r\n    }\r\n\r\n    get authUserGroupConnection(): string {\r\n        return this.getUserGroupConnection(this.authUser);\r\n    }\r\n\r\n}\r\n","<div id=\"members\">\r\n    <strong>Members</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let member of members\" [class.rounded]=\"!isOwnGroup\">\r\n            <div class=\"details\">\r\n                <div class=\"avatarDiv\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n                </div>\r\n                <strong class=\"member-name\" [routerLink]=\"'/users/'+member.username\">\r\n                    {{member.first_name + ' ' + member.last_name}}\r\n                </strong>\r\n            </div>\r\n            <app-group-members-actions-menu [member]=\"member\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            *ngIf=\"isOwnGroup\" [isOwnGroup]=\"isOwnGroup\">\r\n            </app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-list',\r\n    templateUrl: './group-members-list.component.html',\r\n    styleUrls: ['./group-members-list.component.scss']\r\n})\r\nexport class GroupMembersListComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() members;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAcceptedPageGroupAdminRequest();\r\n        this.getDeclinedPageGroupAdminRequest();\r\n    }\r\n\r\n\r\n    getAcceptedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getAcceptedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            // console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getDeclinedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getDeclinedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            // this.adminRequestSent = false;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"member-requests\">\r\n    <strong>Requests</strong>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n            <div class=\"requestPartDiv\">\r\n            <div class=\"avatarDiv\">\r\n                <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n            </div>\r\n            <strong class=\"avatarName\">{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <div class=\"confirmIgnoreBtns\">\r\n                <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\n\r\n@Component({\r\n    selector: 'app-member-requests-list',\r\n    templateUrl: './member-requests-list.component.html',\r\n    styleUrls: ['./member-requests-list.component.scss']\r\n})\r\nexport class MemberRequestsListComponent implements OnInit {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() requestedMembers;\r\n    subscriptions = [];\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    confirmJoinGroup(member) {\r\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.confirmJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    ignoreJoinGroup(member) {\r\n        console.log(member);\r\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.ignoreJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n}\r\n","<div class=\"tab-container\">\r\n    <div id=\"all-members-wrap\">\r\n        <app-admins-list [admins]=\"admins\" [authUser]=\"authUser\"\r\n                         [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-admins-list>\r\n        <app-group-members-list [members]=\"members\" [authUser]=\"authUser\"\r\n                                [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-group-members-list>\r\n        <app-member-requests-list *ngIf=\"isOwnGroup\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                  [requestedMembers]=\"requestedMembers\"></app-member-requests-list>\r\n    </div>\r\n</div>\r\n\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    @Input() authUser;\r\n\r\n    admins = [];\r\n    members = [];\r\n    requestedMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    constructor(\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        private chatService: ChatService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroups();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getRemovedPageGroupAdminPrivileges();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\r\n            console.log(dt);\r\n            this.selectedGroup = dt;\r\n            this.admins = [];\r\n            this.members = [];\r\n            this.requestedMembers = [];\r\n\r\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\r\n                this.filterMembers();\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n    filterMembers() {\r\n        this.selectedGroup?.group_members?.map(m => {\r\n            if (this.selectedGroup.creator_id === m.id || m.groups_members.is_admin || m.groups_members.is_moderator) {\r\n                this.admins.push(m);\r\n            } else {\r\n                if (m.groups_members.confirmed) {\r\n                    this.members.push(m);\r\n                } else if (m.groups_members.accepted) {\r\n                    this.requestedMembers.push(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getRemovedPageGroupAdminPrivileges() {\r\n        this.subscriptions.push(this.socketService.getRemovedPageGroupAdminPrivileges().subscribe((data: any) => {\r\n            const {notification, member, group} = data;\r\n            this.notificationsStore.updateNotifications(notification);\r\n            console.log('removed privileges', group);\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-media-tab',\r\n  templateUrl: './media-tab.component.html',\r\n  styleUrls: ['./media-tab.component.scss']\r\n})\r\nexport class MediaTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.isOwnGroup)\r\n    }\r\n\r\n}\r\n","<p>about-tab works!</p>\r\n","<p>media-tab works!</p>\r\n","<app-post-form-placeholder [selectedGroup]=\"selectedGroup\"></app-post-form-placeholder>\r\n<app-post-item *ngFor=\"let post of groupPosts$|async; trackBy: trackByElement\"\r\n               [post]=\"post\" [group]=\"selectedGroup\" [accessedFromGroup]=\"true\">\r\n</app-post-item>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {Post} from '@shared/models/post';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-posts-tab',\r\n    templateUrl: './posts-tab.component.html',\r\n    styleUrls: ['./posts-tab.component.scss']\r\n})\r\nexport class PostsTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    groupPosts$: Observable<Post[]>;\r\n\r\n\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getGroupPosts();\r\n    }\r\n\r\n    getGroupPosts() {\r\n        this.groupPosts$ = this.postsService.getGroupPosts({group_id: this.selectedGroup.id});\r\n    }\r\n\r\n\r\n}\r\n","<section id=\"group-img-edit\" class=\"editCoverDiv\">\r\n    <div class=\"images-box\">\r\n        <div class=\"images-cover\">\r\n            <img class=\"images-cover-create c2\" *ngIf=\"coverShowImg\" [src]=\"coverImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <img class=\"images-cover-create c1\" *ngIf=\"!coverShowImg\" [src]=\"coverImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <input type=\"file\" #coverChangeImg hidden (change)=\"createImage($event, 'square')\">\r\n            <button (click)=\"coverChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"images-avatar\">\r\n            <!--            <img *ngIf=\"!coverShowImg\" [src]=\"coverImg|getImgPath:'images'\" alt=\"\">-->\r\n            <img *ngIf=\"!avatarShowImg\" [src]=\"avatarImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <img *ngIf=\"avatarShowImg\" [src]=\"avatarImgSrc\" alt=\"\">\r\n            <!--            <mat-icon *ngIf=\"!avatarImgSrc\">add_a_photo</mat-icon>-->\r\n            <input type=\"file\" #avatarChangeImg hidden (change)=\"createImage($event, 'circle')\">\r\n            <button (click)=\"avatarChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"images-save-btn-box\" *ngIf=\"(avatarImgSrc && discardORSave) || (coverImgSrc && discardORSave)\">\r\n        <button class=\"save-btn\" (click)=\"saveAvatarImage(avatarImgSrc,coverImgSrc)\">Save</button>\r\n        <button class=\"discard-btn\" (click)=\"remuveAvatarImage('','')\">DISCARD</button>\r\n    </div>\r\n</section>\r\n\r\n<div class=\"border m-60\"></div>\r\n\r\n<section class=\"form-edit_group\">\r\n    <form class=\"form_edit\" [formGroup]=\"editGroupForm\">\r\n        <div class=\"form-group w-80\">\r\n            <input type=\"text\" formControlName=\"nameGroup\" placeholder=\"Name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label>Please choose Mode of Group</label>\r\n            <mat-radio-group\r\n                aria-label=\"Select an option\"\r\n                formControlName=\"privacy\">\r\n\r\n                <mat-radio-button [value]=\"0\"\r\n                                  name=\"privacy\"\r\n                >Public\r\n                </mat-radio-button>\r\n                <mat-radio-button [value]=\"1\"\r\n                                  name=\"privacy\"\r\n                >Private\r\n                </mat-radio-button>\r\n            </mat-radio-group>\r\n\r\n        </div>\r\n        <div class=\"border\"></div>\r\n        <div class=\"add-description-action\" (click)=\"addDescriptionHideShow()\">\r\n            <mat-icon [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                {{!addDescriptionSectionShow ? 'add' : 'close'}}\r\n            </mat-icon>\r\n            <span [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    ADD DESCRIPTION\r\n                </span>\r\n        </div>\r\n        <div class=\"field-row w-80\" *ngIf=\"addDescriptionSectionShow\">\r\n            <textarea\r\n                formControlName=\"description\"\r\n                placeholder=\"Type Text here...\"\r\n                class=\"form-group-textarea \"></textarea>\r\n        </div>\r\n        <div class=\"form-submit_btn\">\r\n            <button (click)=\"updateGGroupInfo()\">Save Changes</button>\r\n        </div>\r\n\r\n    </form>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ImgEditCropperComponent} from '@core/components/modals/img-edit-cropper/img-edit-cropper.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {EditGroupInterface} from '@app/groups/single-group/edit-group/interface';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-edit-group',\r\n    templateUrl: 'edit-group.component.html',\r\n    styleUrls: ['edit-group.component.scss']\r\n})\r\n\r\nexport class EditGroupComponent implements OnInit, OnDestroy {\r\n    public editGroupForm: FormGroup | any;\r\n    private imageCoverFile;\r\n    private _groupId: number;\r\n    private imageAvatarFile;\r\n    public addDescriptionSectionShow = false;\r\n    public coverShowImg = false;\r\n    public avatarShowImg = false;\r\n    public discardORSave = false;\r\n    private _imgCoverSuccess;\r\n    private _imgAvatarSuccess;\r\n    public coverImgSrc;\r\n    public avatarImgSrc;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private passedGroupName: string;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private _groupsService: GroupsService,\r\n        private _route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        private uploadFile: VideoService,\r\n    ) {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.id;\r\n        });\r\n    }\r\n\r\n\r\n    get coverImg(): any {\r\n        return false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._formBuilder();\r\n        this._patchInitialValueForm();\r\n    }\r\n\r\n    public addDescriptionHideShow(): void {\r\n        this.addDescriptionSectionShow = !this.addDescriptionSectionShow;\r\n    }\r\n\r\n    public saveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n        if (this.coverShowImg) {\r\n            const fdCover = new FormData();\r\n            fdCover.append('image', this.imageCoverFile);\r\n            fdCover.append('belonging', 'group_cover_img');\r\n            fdCover.append('duration', '');\r\n            this.uploadFile.uploadFile(fdCover, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgCoverSuccess = data.path;\r\n                this.coverImgSrc = data.path;\r\n                console.log(this._imgCoverSuccess);\r\n            });\r\n        }\r\n        if (this.avatarShowImg) {\r\n            const fdAvatar = new FormData();\r\n            fdAvatar.append('image', this.imageAvatarFile);\r\n            fdAvatar.append('belonging', 'group_avatar_img');\r\n            fdAvatar.append('duration', '');\r\n            this.uploadFile.uploadFile(fdAvatar, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgAvatarSuccess = data.path;\r\n                // this.coverImgSrc = data.path;\r\n                console.log(this._imgAvatarSuccess);\r\n            });\r\n        }\r\n    }\r\n\r\n    public remuveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n    }\r\n\r\n    public createImage(event, shape) {\r\n        const file = event.target.files[0];\r\n        this.dialog.open(ImgEditCropperComponent, {\r\n            maxWidth: '60vw',\r\n            maxHeight: '70vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {\r\n                title: 'Profile Image Cropper',\r\n                shape,\r\n                file\r\n            }\r\n        }).afterClosed()\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    if (dt.shape === 'square') {\r\n                        this.imageCoverFile = dt.blob;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        this.coverShowImg = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.coverImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageCoverFile);\r\n                    }\r\n                    if (dt.shape === 'circle') {\r\n                        this.imageAvatarFile = dt.blob;\r\n                        this.avatarShowImg = true;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.avatarImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageAvatarFile);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private _formBuilder(): void {\r\n        this.editGroupForm = this._fb.group({\r\n            nameGroup: [null, Validators.required],\r\n            privacy: [null, Validators.required],\r\n            description: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n    private _patchInitialValueForm(): void {\r\n        console.log(this.passedGroupName);\r\n        this._groupsService.getGroupById(this.passedGroupName)\r\n            .subscribe((data: EditGroupInterface) => {\r\n                this._groupId = data?.id;\r\n                if (data?.cover || data?.avatar) {\r\n                    this.coverImgSrc = data?.cover;\r\n                    this.avatarImgSrc = data?.avatar;\r\n                    this.avatarShowImg = !Boolean(data?.avatar);\r\n                    this.coverShowImg = !Boolean(data?.cover);\r\n                }\r\n                this.editGroupForm.patchValue({\r\n                    nameGroup: data?.name,\r\n                    privacy: data?.privacy,\r\n                    description: data?.description\r\n                });\r\n                if (data?.description) {\r\n                    this.addDescriptionSectionShow = true;\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    public updateGGroupInfo() {\r\n        if (this.editGroupForm.invalid) {\r\n            return;\r\n        }\r\n        const UPDATE_FORM_DATA_GROUP = {\r\n            name: this.editGroupForm.get('nameGroup').value,\r\n            description: this.editGroupForm.get('nameGroup').value,\r\n            cover: this._imgCoverSuccess,\r\n            avatar: this._imgAvatarSuccess,\r\n            privacy: this.editGroupForm.get('privacy').value\r\n        };\r\n        this._groupsService.updateGroup(this._groupId, UPDATE_FORM_DATA_GROUP).subscribe((data) => {\r\n            console.log(data, 'UPDATE_FORM_DATA_GROUP');\r\n        });\r\n        // console.log(UPDATE_FORM_DATA_GROUP, );\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribe$.next();\r\n        this._unsubscribe$.complete();\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\r\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\r\nimport {EditGroupComponent} from '@app/groups/single-group/edit-group';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ShowGroupsComponent,\r\n        data: {\r\n            title: 'Groups'\r\n        },\r\n    },\r\n    {path: 'edit/:id', component:  EditGroupComponent, data: {title: 'Group page | People tab'}},\r\n    {\r\n        path: ':id',\r\n        component: SingleGroupComponent,\r\n        children: [\r\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\r\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\r\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\r\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GroupsRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {GroupsRoutingModule} from './groups-routing.module';\r\nimport {ShowGroupsComponent} from './show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {GroupItemComponent} from './show-groups/group-item/group-item.component';\r\nimport {AboutTabComponent} from './single-group/about-tab/about-tab.component';\r\nimport {PeopleTabComponent} from './single-group/people-tab/people-tab.component';\r\nimport {MediaTabComponent} from './single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from './single-group/posts-tab/posts-tab.component';\r\nimport {AdminsListComponent} from './single-group/people-tab/admins-list/admins-list.component';\r\nimport {GroupMembersListComponent} from './single-group/people-tab/group-members-list/group-members-list.component';\r\nimport {MemberRequestsListComponent} from './single-group/people-tab/member-requests-list/member-requests-list.component';\r\nimport {GroupMembersActionsMenuComponent} from './single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component';\r\nimport {EditGroupComponent} from '@app/groups/single-group/edit-group';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {DeleteGroupDialog} from '@app/groups/dialogs';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowGroupsComponent,\r\n        SingleGroupComponent,\r\n        GroupItemComponent,\r\n        AboutTabComponent,\r\n        PeopleTabComponent,\r\n        MediaTabComponent,\r\n        PostsTabComponent,\r\n        AdminsListComponent,\r\n        GroupMembersListComponent,\r\n        MemberRequestsListComponent,\r\n        EditGroupComponent,\r\n        GroupMembersActionsMenuComponent,\r\n        DeleteGroupDialog\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        GroupsRoutingModule,\r\n        SharedModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    entryComponents:[\r\n        DeleteGroupDialog\r\n    ]\r\n})\r\nexport class GroupsModule {\r\n}\r\n"]}