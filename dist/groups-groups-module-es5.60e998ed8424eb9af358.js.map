{"version":3,"sources":["webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/shared/directives/fix-group-page-url.directive.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/shared/directives/disable-control-properly.directive.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.ts","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.html","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.ts","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.html","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/groups.module.ts"],"names":["CreateNewGroupDialogComponent","GroupItemComponent","FixGroupPageUrlDirective","authUser","fb","dialog","groupsService","socketService","groupsStore","lowerCaseRemoveSpaces","subscriptions","this","initForm","groupForm","group","name","required","custom_name","privacy","creator_id","id","username","patchValue","transform","value","formValue","valid","push","addGroup","subscribe","dt","selectedGroup","find","d","setGroups","selectGroup","setNewPageGroup","close","closeDialog","submitForm","router","url","replace","navigate","ShowGroupsComponent","DisableControlProperlyDirective","chatService","userStore","groups","getAuthUser","trackGroups","groups$","authUser$","user","type","filter","g","open","width","height","data","afterClosed","navigateByUrl","openModal","control","condition","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","checked","status","event","target","foundControl","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","SingleGroupComponent","route","isEmptyObj","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","getUserGroupConnStatus","params","passedGroupName","getGroupFromStore","getGroupFromServer","getGroupByCustomName","console","log","joinGroup","link","rest","leaveGroup","member_id","leavePageGroup","group_type","leavePageGroupNotify","length","member","leftGroups","removeFromPageGroupNotify","component","GroupMembersActionsMenuComponent","notificationsStore","adminRequestSent","moderatorRequestSent","sendMakeAdminRequest","removeGroupMember","removeFromPageGroup","removeAdminPrivileges","removePageGroupAdminPrivileges","is_admin","is_moderator","removeMember","AdminsListComponent","admin","connection","admins","a","isGroupCreator","authUserGroupConnection","getUserGroupConnection","GroupMembersListComponent","getAcceptedPageGroupAdminRequest","getDeclinedPageGroupAdminRequest","notification","updateNotifications","MemberRequestsListComponent","confirmGroupJoin","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","MediaTabComponent","AboutTabComponent","PeopleTabComponent","members","requestedMembers","getRemovedPageGroupAdminPrivileges","filterMembers","PostsTabComponent","GroupsRoutingModule","GroupsModule","routes","path","title","children","postsService","trackByElement","getGroupPosts","groupPosts$","forChild"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {User} from '@shared/models/user';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {Subscription} from 'rxjs';\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {GroupsService} from '@core/services/groups.service';\n\n@Component({\n    selector: 'app-create-new-group-dialog',\n    templateUrl: './create-new-group-dialog.component.html',\n    styleUrls: ['./create-new-group-dialog.component.scss']\n})\nexport class CreateNewGroupDialogComponent implements OnInit {\n    groupForm: FormGroup;\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\n        private fb: FormBuilder,\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\n        private groupsService: GroupsService,\n        private socketService: SocketIoService,\n        private groupsStore: GroupsStoreService,\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.initForm();\n    }\n\n    initForm() {\n        this.groupForm = this.fb.group({\n            name: ['', Validators.required],\n            custom_name: ['', Validators.required],\n            privacy: ['0'],\n            creator_id: this.authUser.id,\n            username: this.authUser.username\n        });\n    }\n\n    submitForm() {\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\n        const formValue = this.groupForm.value;\n        if (this.groupForm.valid) {\n            this.subscriptions.push(this.groupsService.addGroup(formValue).subscribe(async (dt) => {\n                const selectedGroup = dt.find(d => formValue.name === d.name);\n                this.groupsStore.setGroups(dt);\n                this.groupsStore.selectGroup(selectedGroup);\n                this.socketService.setNewPageGroup(formValue);\n                this.dialog.close(this.groupForm.value);\n            }));\n        }\n    }\n\n    closeDialog() {\n        this.dialog.close(null);\n    }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\n\n@Component({\n    selector: 'app-group-item',\n    templateUrl: './group-item.component.html',\n    styleUrls: ['./group-item.component.scss']\n})\nexport class GroupItemComponent implements OnInit {\n    @Input() group;\n\n    constructor(\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    getUrl() {\n        const url = '/groups/' + this.group.name.replace(' /g', '_') + '/about';\n        return this.lowerCaseRemoveSpaces.transform(url);\n    }\n\n}\n","import {Directive, HostListener, Input} from '@angular/core';\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\nimport {Router} from '@angular/router';\n\n@Directive({\n    selector: '[appNavigateToFixedGroupUrl]'\n})\nexport class FixGroupPageUrlDirective {\n\n    @Input() name;\n\n    constructor(\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\n        private router: Router\n    ) {\n    }\n\n    @HostListener('click', ['$event'])\n    async onClick() {\n        const url = '/groups/' + this.name.replace(' /g', '_') + '/people';\n        await this.router.navigate([this.lowerCaseRemoveSpaces.transform(url)]);\n    }\n\n}\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <div id=\"admin-info\">\r\n        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>\r\n    </div>\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"field-row\">\r\n            <label for=\"group-name-input\">Group name</label>\r\n            <input id=\"group-name-input\" formControlName=\"name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label for=\"privacy-types\">Choose privacy</label>\r\n            <select id=\"privacy-types\" formControlName=\"privacy\">\r\n                <option class=\"backOption\" value=\"0\">Public</option>\r\n                <option class=\"backOption\" value=\"1\">Private</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","<div appNavigateToFixedGroupUrl [name]=\"group.name\" class=\"groupMessageDiv\">\r\n    <div class=\"img-wrap\">\r\n        <img class=\"groupMessageImg\" [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n    </div>\r\n    <div class=\"group-name-wrap\">\r\n        <strong>{{group.name}}</strong>\r\n    </div>\r\n</div>\r\n","<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you manage</h3>\r\n<ul class=\"ulBorderBottom\">\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('managed')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you've joined</h3>\r\n<ul>\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('joined')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n","import {Component, OnInit} from '@angular/core';\nimport {UserStoreService} from '@core/services/stores/user-store.service';\nimport {Subscription} from 'rxjs';\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ChatService} from '@core/services/chat.service';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {Router} from '@angular/router';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\n\n@Component({\n    selector: 'app-show-groups',\n    templateUrl: './show-groups.component.html',\n    styleUrls: ['./show-groups.component.scss']\n})\nexport class ShowGroupsComponent implements OnInit {\n    authUser;\n    groups = [];\n\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        public groupsStore: GroupsStoreService,\n        private chatService: ChatService,\n        private userStore: UserStoreService,\n        private socketService: SocketIoService,\n        public router: Router,\n        private dialog: MatDialog\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.getAuthUser();\n        this.trackGroups();\n    }\n\n    trackGroups() {\n        this.subscriptions.push(this.groupsStore.groups$.subscribe(dt => {\n            this.groups = dt;\n        }));\n    }\n\n    getAuthUser() {\n        this.userStore.authUser$.subscribe(user => {\n            this.authUser = user;\n        });\n    }\n\n    filterGroups(type) {\n        return this.groups.filter(g => {\n            return type === 'managed' ?\n                g.creator_id === this.authUser.id :\n                g.creator_id !== this.authUser.id;\n        });\n    }\n\n    openModal() {\n        this.dialog.open(CreateNewGroupDialogComponent, {\n            width: '500px',\n            height: '450px',\n            data: this.authUser\n        }).afterClosed().subscribe(async (selectedGroup) => {\n            if (selectedGroup) {\n                await this.router.navigateByUrl('/groups/' + selectedGroup.custom_name + '/people');\n            }\n        });\n    }\n\n}\n","import {Directive, Injector, Input, Self} from '@angular/core';\n\n@Directive({\n    selector: '[disableControl]'\n})\nexport class DisableControlProperlyDirective {\n\n    @Input() set disableControl({condition, control}) {\n        const action = condition ? 'disable' : 'enable';\n        control?.[action]();\n    }\n\n\n}\n","<div id=\"dialog-header\">\n    <h3>Invite contacts to this group</h3>\n    <div>\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\n    </div>\n</div>\n<form [formGroup]=\"contactsInviteForm\">\n    <div id=\"group-members-wrap\">\n        <div id=\"suggested-contacts\">\n            <div id=\"contact-search-wrap\">\n                <input placeholder=\"Find a contact\">\n                <i class=\"fas fa-search\"></i>\n            </div>\n\n            <ul formArrayName=\"contacts\">\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\n                    <div class=\"details\">\n                        <label [for]=\"'contact_'+control.value.i\">\n                            <div class=\"avatar-wrap\">\n                                <img class=\"avatar\"\n                                     [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\n                            </div>\n                            <div>\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\n                                <p class=\"contact-status\"\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\n                            </div>\n                        </label>\n                    </div>\n                    <div class=\"state\">\n                        <label>\n                            <input type=\"hidden\" formControlName=\"id\">\n                            <input type=\"hidden\" formControlName=\"name\">\n                            <input type=\"checkbox\" formControlName=\"checked\"\n                                   [id]=\"'contact_'+control.value.id\"\n                                   (change)=\"selectContact($event,control)\"\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\n                            >\n                            <span></span>\n                        </label>\n                    </div>\n                </li>\n            </ul>\n        </div>\n\n        <div id=\"selected-contacts\">\n            <p id=\"selected-contacts-count\" *ngIf=\"selectedContacts.length as length\">\n                {{length + ' ' + (length === 1 ? 'contact' : 'contacts')}}  selected\n            </p>\n            <ul formArrayName=\"contacts\">\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\n                    <div class=\"details\">\n                        <label [for]=\"control.value.id+'_'+i\">\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\n                        </label>\n                    </div>\n                    <div class=\"state\">\n                        <button id=\"remove-from-selected-contacts-btn\">\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</form>\n<div id=\"dialog-actions\">\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\n</div>\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {User} from '@shared/models/user';\nimport {Subscription} from 'rxjs';\nimport {UsersService} from '@core/services/users.service';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {GroupsService} from '@core/services/groups.service';\n\n@Component({\n    selector: 'app-group-members-invitation-dialog',\n    templateUrl: './group-members-invitation-dialog.component.html',\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\n})\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\n    selectedGroup;\n    userContacts: User[] = [];\n    selectedContacts: User[] = [];\n\n    subscriptions: Subscription[] = [];\n\n    contactsInviteForm: FormGroup;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\n        private groupsStore: GroupsStoreService,\n        private usersMessagesStore: UsersMessagesSubjectService,\n        private usersService: UsersService,\n        private socketService: SocketIoService,\n        private groupsService: GroupsService,\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\n        private fb: FormBuilder\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.selectedGroup = this.groupsStore.selectedGroup;\n        this.initForm();\n    }\n\n\n    initForm() {\n        this.contactsInviteForm = this.fb.group({\n            contacts: this.fb.array(this.getContactsFormGroup()),\n        });\n    }\n\n    getContactsFormGroup() {\n        const formArray = [];\n        this.usersMessagesStore.usersMessages.map((c, index) => {\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\n            let connectionWithGroup = 'not joined';\n\n            if (foundInGroup) {\n                const connectionContainer = foundInGroup.groups_members;\n\n                if (foundInGroup) {\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\n                        connectionWithGroup = 'accepted';\n                    }\n                }\n            }\n\n\n            formArray.push(this.fb.group({\n                name: 'contact_' + index,\n                checked: !!foundInSelected,\n                status: connectionWithGroup,\n                ...c\n            }));\n        });\n        return formArray;\n    }\n\n    selectContact(event: Event, control: AbstractControl) {\n        const isChecked = (event.target as HTMLInputElement).checked;\n        if (isChecked) {\n            this.selectedContacts.push(control.value);\n        } else {\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\n        }\n    }\n\n    removeContactFromSelected(control: AbstractControl) {\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\n        this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\n        foundControl.patchValue({checked: false});\n    }\n\n    sendInvitationsToContacts() {\n        this.subscriptions.push(this.groupsService.addGroupMembers({\n            group_id: this.selectedGroup.id,\n            member_ids: this.selectedContacts.map(c => c.id)\n        }).subscribe(dt => {\n            this.socketService.inviteToNewPageGroup({\n                invited_members: this.selectedContacts,\n                from_user: this.authUser,\n                group: this.selectedGroup,\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\n            });\n            this.groupsStore.changeGroup(dt);\n            this.closeDialog();\n        }));\n    }\n\n    isProcessedContact(status) {\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\n    }\n\n    get contactCtrls() {\n        return this.contactsInviteForm.controls.contacts as FormArray;\n    }\n\n    get checkedContactCtrls() {\n        return this.contactCtrls.controls.filter(c => c.value.checked);\n    }\n\n    getCheckBoxControl(control) {\n        return control.controls.checked;\n    }\n\n    closeDialog() {\n        this.dialog.close();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n}\n","<ng-container *ngIf=\"selectedGroup\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div id=\"group-cover-image\">\r\n            <img [src]=\"selectedGroup?.cover|getImgPath:'group_covers'\">\r\n        </div>\r\n\r\n        <div class=\"row groupsRow\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, Params} from '@angular/router';\nimport {UserStoreService} from '@core/services/stores/user-store.service';\nimport {Subscription} from 'rxjs';\nimport {User} from '@shared/models/user';\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\nimport {MatDialog} from '@angular/material/dialog';\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\nimport {GroupsService} from '@core/services/groups.service';\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\n\n@Component({\n    selector: 'app-single-group',\n    templateUrl: './single-group.component.html',\n    styleUrls: ['./single-group.component.scss']\n})\nexport class SingleGroupComponent implements OnInit, OnDestroy {\n    authUser: User;\n    subscriptions: Subscription[] = [];\n\n\n    selectedGroup;\n    isOwnGroup = false;\n    passedGroupName: string;\n    groupTabs = GROUP_PAGE_TABS;\n    groupPrivacy = 'public';\n\n    userGroupConnStatus = 'not connected';\n\n    constructor(\n        private groupsStore: GroupsStoreService,\n        private groupsService: GroupsService,\n        private route: ActivatedRoute,\n        private userStore: UserStoreService,\n        private dialog: MatDialog,\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\n        private isEmptyObj: CheckForEmptyObjectPipe,\n        private socketService: SocketIoService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.trackSelectedGroup();\n        this.getAuthUser();\n        this.getSelectedGroup();\n        this.getAcceptedJoinPageGroup();\n        this.getConfirmedJoinGroup();\n        this.getIgnoredJoinGroup();\n        this.getJoinGroup();\n        this.getRemovedSavedMember();\n        this.getLeftGroup();\n    }\n\n    getAuthUser() {\n        this.subscriptions.push(this.userStore.authUser$.subscribe(user => {\n            this.authUser = user;\n        }));\n    }\n\n    trackSelectedGroup() {\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\n            this.selectedGroup = dt;\n            this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\n            // console.log(this.selectedGroup, this.groupPrivacy);\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\n                this.getUserGroupConnStatus();\n            }\n        }));\n    }\n\n    getSelectedGroup() {\n        this.route.params.subscribe((params: Params) => {\n            this.passedGroupName = params.name;\n\n            if (!this.getGroupFromStore()) {\n                this.getGroupFromServer();\n            }\n        });\n    }\n\n    getGroupFromStore() {\n        this.selectedGroup = this.groupsStore.groups.find(g => {\n            const groupName = this.lowerCaseRemoveSpaces.transform(g.name);\n            return groupName === this.passedGroupName;\n        });\n        if (this.selectedGroup) {\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\n            this.groupsStore.selectGroup(this.selectedGroup);\n        }\n        return !!this.selectedGroup;\n    }\n\n    getGroupFromServer() {\n        this.groupsService.getGroupByCustomName({custom_name: this.passedGroupName}).subscribe(dt => {\n            this.selectedGroup = dt;\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\n            this.groupsStore.selectGroup(this.selectedGroup);\n        });\n    }\n\n    joinGroup() {\n        console.log(this.selectedGroup);\n        this.groupsService.joinGroup({\n            member_ids: [this.authUser.id],\n            group_id: this.selectedGroup.id,\n            accepted: 1\n        }).subscribe(dt => {\n            this.userGroupConnStatus = 'unconfirmed';\n\n            this.socketService.joinGroup({\n                group: this.selectedGroup,\n                from_user: this.authUser,\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\n                link: `/channels/show?username=${this.authUser.username}`,\n            });\n\n            this.groupsStore.changeGroup(dt);\n        });\n    }\n\n    getJoinGroup() {\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\n            const {rest} = data;\n            console.log('get joined', rest.group);\n            this.groupsStore.changeGroup(rest.group);\n        }));\n    }\n\n    leaveGroup() {\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.groupsService.leaveGroup({\n                    member_id: this.authUser.id,\n                    group_id: this.selectedGroup.id,\n                }).subscribe(dt => {\n                    this.groupsStore.setGroups(dt);\n                    this.socketService.leavePageGroup({\n                        group: this.selectedGroup,\n                        from_user: this.authUser,\n                        group_type: 'page',\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\n                    });\n                });\n            }\n        }));\n    }\n\n    getLeftGroup() {\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\n            const {group} = data;\n\n            if (data.from_user.id === this.authUser.id) {\n                this.userGroupConnStatus = 'not connected';\n                // console.log(this.selectedGroup);\n                // this.groupsStore.selectGroup({});\n            }\n            this.groupsStore.changeGroup(group);\n        }));\n    }\n\n    getConfirmedMembersCount() {\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\n    }\n\n    getAcceptedJoinPageGroup() {\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\n            const {rest} = data;\n            console.log('accepted', rest.group);\n            // this.groupsStore.changeGroup(rest.group);\n        }));\n    }\n\n    getConfirmedJoinGroup() {\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\n            const {rest} = data;\n            console.log('confirmed in group page', data);\n            this.userGroupConnStatus = 'confirmed';\n            this.groupsStore.changeGroup(rest.group);\n        }));\n    }\n\n    getIgnoredJoinGroup() {\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\n            const {rest} = data;\n            console.log('ignored in group page', rest);\n            if (rest.member.id === this.authUser.id) {\n                this.groupsStore.setGroups(rest.leftGroups);\n                this.groupsStore.selectGroup(rest.group);\n                this.userGroupConnStatus = 'not connected';\n            }\n            console.log(this.groupsStore.groups);\n        }));\n    }\n\n    getRemovedSavedMember() {\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\n            const {member, leftGroups} = data;\n            console.log('removed from group in group page', data);\n            this.groupsStore.changeGroup(data.group);\n            if (member.id === this.authUser.id) {\n                this.userGroupConnStatus = 'not connected';\n            }\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\n            // console.log(this.groupsMessagesStore.groupsMessages)\n            // }\n        }));\n    }\n\n    getUserGroupConnStatus() {\n        this.selectedGroup.group_members?.map(m => {\n            if (m.id === this.authUser.id) {\n                if (m.groups_members.confirmed === 1) {\n                    this.userGroupConnStatus = 'confirmed';\n                } else {\n                    if (m.groups_members.accepted === 1) {\n                        this.userGroupConnStatus = 'unconfirmed';\n                    } else {\n                        this.userGroupConnStatus = 'not connected';\n                    }\n                }\n            }\n        });\n    }\n\n    showJoinBtn() {\n        return !this.isOwnGroup;\n    }\n\n    onOutletLoaded(component) {\n        if (this.selectedGroup) {\n            component.selectedGroup = this.selectedGroup;\n            component.isOwnGroup = this.isOwnGroup;\n            component.authUser = this.authUser;\n        }\n    }\n\n    openMembersModal() {\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\n            height: '690px',\n            width: '950px',\n            data: this.authUser,\n        }).afterClosed().subscribe(dt => {\n\n        }));\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n}\n","<div>\n    <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\n        <i class=\"fas fa-ellipsis-h\"></i>\n    </button>\n\n    <mat-menu #menu=\"matMenu\">\n        <button id=\"make-admin\" mat-menu-item\n                *ngIf=\"!isAdmin(member) && !adminRequestSent\"\n                (click)=\"makeAdmin(member)\" [disableRipple]=\"true\">\n            <i class=\"fas fa-check\"></i>\n            <span>Make admin</span>\n        </button>\n        <button id=\"remove-make-admin\" mat-menu-item *ngIf=\"isAdmin(member)\"\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\n            <i class=\"fas fa-times\"></i>\n            <span>Remove group admin privileges</span>\n        </button>\n        <button id=\"remove-make-moderator\" mat-menu-item\n                *ngIf=\"isModerator(member)\"\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\n            <i class=\"fas fa-times\"></i>\n            <span>Remove group moderator privileges</span>\n        </button>\n        <button id=\"make-moderator\" *ngIf=\"!isModerator(member) && !moderatorRequestSent\" mat-menu-item\n                (click)=\"makeAdmin(member,'moderator')\"\n                [disableRipple]=\"true\">\n            <i class=\"fas fa-check\"></i>\n            <span>Make moderator</span>\n        </button>\n        <button id=\"remove-member-btn\" mat-menu-item [disableRipple]=\"true\" (click)=\"removeMember(member)\">\n            <i class=\"fas fa-times\"></i>\n            <span>Remove</span>\n        </button>\n    </mat-menu>\n</div>\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {GroupsService} from '@core/services/groups.service';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\nimport {Subscription} from 'rxjs';\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-group-members-actions-menu',\n    templateUrl: './group-members-actions-menu.component.html',\n    styleUrls: ['./group-members-actions-menu.component.scss']\n})\nexport class GroupMembersActionsMenuComponent implements OnInit, OnDestroy {\n    @Input() member;\n    @Input() authUser;\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n\n    subscriptions: Subscription[] = [];\n    adminRequestSent = false;\n    moderatorRequestSent = false;\n\n    constructor(\n        private socketService: SocketIoService,\n        private groupsService: GroupsService,\n        private groupsStore: GroupsStoreService,\n        private notificationsStore: NotificationsSubjectStoreService,\n        private dialog: MatDialog,\n    ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    makeAdmin(member, type = 'admin') {\n        console.log('make admin', member)\n        this.socketService.sendMakeAdminRequest({\n            from_user: this.authUser,\n            group: this.selectedGroup,\n            member,\n            type,\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\n                invites you to become ${type === 'admin' ? 'an admin' : 'a moderator'}\n                 for the <strong>${this.selectedGroup.name}</strong> group`\n        });\n\n        this.adminRequestSent = type === 'admin';\n        this.moderatorRequestSent = type === 'moderator';\n    }\n\n    removeMember(member) {\n        console.log('remove')\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.groupsService.removeGroupMember({\n                    group_id: this.selectedGroup.id,\n                    member_id: member.id\n                }).subscribe(dt => {\n                    this.selectedGroup = dt;\n                    this.groupsStore.changeGroup(this.selectedGroup);\n                    this.socketService.removeFromPageGroup({\n                        member,\n                        from_user: this.authUser,\n                        group: this.selectedGroup,\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\n                       from <strong>${this.selectedGroup.name}</strong> group`,\n                    });\n                });\n            }\n        }));\n    }\n\n    removeAdminPrivileges(member, type = 'admin') {\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.subscriptions.push(this.groupsService.removeAdminPrivileges({\n                    member_id: member.id,\n                    group_id: this.selectedGroup.id\n                }).subscribe(dt => {\n                    this.socketService.removePageGroupAdminPrivileges({\n                        member,\n                        from_user: this.authUser,\n                        group: this.selectedGroup,\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed ${type}  privileges of <strong>${member.first_name + ' ' + member.last_name}</strong>\n                       for the <strong>${this.selectedGroup.name}</strong> group`,\n                    });\n                    this.groupsStore.changeGroup(dt);\n                }));\n            }\n        }));\n    }\n\n    makeModerator(member) {\n\n    }\n\n    isAdmin(member) {\n        return member.groups_members.is_admin;\n    }\n\n    isModerator(member) {\n        return member.groups_members.is_moderator;\n    }\n\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n}\n","<div id=\"admins\">\n    <strong>Admins & moderators</strong>\n\n    <ul class=\"bordered\">\n        <li *ngFor=\"let admin of admins\">\n            <div class=\"details\">\n                <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'user_avatars'\">\n                <div>\n                    <p class=\"full-name\" [routerLink]=\"'/users/'+admin.username\">\n                        {{admin.first_name + ' ' + admin.last_name}}\n                    </p>\n                    <span class=\"role\">{{getRoleName(admin)}}</span>\n                </div>\n            </div>\n\n            <app-group-members-actions-menu *ngIf=\"showActionsMenu(admin)\"\n                                            [member]=\"admin\"\n                                            [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\n                                            [isOwnGroup]=\"isOwnGroup\"></app-group-members-actions-menu>\n        </li>\n    </ul>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-admins-list',\n    templateUrl: './admins-list.component.html',\n    styleUrls: ['./admins-list.component.scss']\n})\nexport class AdminsListComponent implements OnInit {\n    @Input() admins;\n    @Input() authUser;\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        // console.log(this.authUserGroupConnection)\n    }\n\n    isGroupCreator(admin) {\n        return admin.id === this.selectedGroup.creator_id;\n    }\n\n    isGroupAdmin(admin) {\n        return !!admin.groups_members.is_admin;\n    }\n\n\n    getUserGroupConnection(user) {\n        let connection;\n        this.admins.map(a => {\n            if (a.id === user.id) {\n                connection = a.groups_members.is_admin ? 'Admin' : 'Moderator';\n\n                if (this.isGroupCreator(user)) {\n                    connection = 'Group creator';\n                }\n            }\n        });\n        return connection;\n    }\n\n    showActionsMenu(admin) {\n        if (this.authUserGroupConnection === 'Admin') {\n            return !this.isGroupCreator(admin) && (admin.id === this.authUser.id || admin.groups_members.is_moderator);\n        } else if (this.authUserGroupConnection === 'Group creator') {\n            return !this.isGroupCreator(admin);\n        }\n        return false;\n    }\n\n    getRoleName(admin) {\n        return this.getUserGroupConnection(admin);\n    }\n\n    get authUserGroupConnection(): string {\n        return this.getUserGroupConnection(this.authUser);\n    }\n\n}\n","<div id=\"members\">\r\n    <strong>Members</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let member of members\" [class.rounded]=\"!isOwnGroup\">\r\n            <div class=\"details\">\r\n                <div class=\"avatarDiv\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n                </div>\r\n                <strong class=\"member-name\" [routerLink]=\"'/users/'+member.username\">\r\n                    {{member.first_name + ' ' + member.last_name}}\r\n                </strong>\r\n            </div>\r\n            <app-group-members-actions-menu [member]=\"member\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            *ngIf=\"isOwnGroup\" [isOwnGroup]=\"isOwnGroup\">\r\n            </app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {GroupsService} from '@core/services/groups.service';\nimport {Subscription} from 'rxjs';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\n\n@Component({\n    selector: 'app-group-members-list',\n    templateUrl: './group-members-list.component.html',\n    styleUrls: ['./group-members-list.component.scss']\n})\nexport class GroupMembersListComponent implements OnInit, OnDestroy {\n\n    @Input() authUser;\n    @Input() selectedGroup;\n    @Input() members;\n    @Input() isOwnGroup;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        private socketService: SocketIoService,\n        private groupsService: GroupsService,\n        private groupsStore: GroupsStoreService,\n        private notificationsStore: NotificationsSubjectStoreService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.getAcceptedPageGroupAdminRequest();\n        this.getDeclinedPageGroupAdminRequest();\n    }\n\n\n    getAcceptedPageGroupAdminRequest() {\n        this.subscriptions.push(this.socketService.getAcceptedPageGroupAdminRequest().subscribe((data: any) => {\n            const {notification, ...rest} = data;\n            if (notification.from_user.id !== this.authUser.id) {\n                this.notificationsStore.updateNotifications(notification);\n            }\n            this.groupsStore.changeGroup(rest.group);\n            // console.log(this.groupsStore.groups);\n        }));\n    }\n\n    getDeclinedPageGroupAdminRequest() {\n        this.subscriptions.push(this.socketService.getDeclinedPageGroupAdminRequest().subscribe((data: any) => {\n            const {notification, ...rest} = data;\n            // this.adminRequestSent = false;\n            if (notification.from_user.id !== this.authUser.id) {\n                this.notificationsStore.updateNotifications(notification);\n            }\n            this.groupsStore.changeGroup(rest.group);\n            console.log(this.groupsStore.groups);\n        }));\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n}\n","<div id=\"member-requests\">\r\n    <strong>Requests</strong>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n            <div class=\"requestPartDiv\">\r\n            <div class=\"avatarDiv\">\r\n                <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n            </div>\r\n            <strong class=\"avatarName\">{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <div class=\"confirmIgnoreBtns\">\r\n                <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport {GroupsService} from '@core/services/groups.service';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {SocketIoService} from '@core/services/socket-io.service';\n\n@Component({\n    selector: 'app-member-requests-list',\n    templateUrl: './member-requests-list.component.html',\n    styleUrls: ['./member-requests-list.component.scss']\n})\nexport class MemberRequestsListComponent implements OnInit {\n\n    @Input() authUser;\n    @Input() selectedGroup;\n    @Input() requestedMembers;\n    subscriptions = [];\n\n    constructor(\n        private groupsStore: GroupsStoreService,\n        private groupsService: GroupsService,\n        private socketService: SocketIoService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    confirmJoinGroup(member) {\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\n            member_id: member.id,\n            group_id: this.selectedGroup.id\n        }).subscribe(dt => {\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\n            this.groupsStore.changeGroup(selectedGroup);\n\n            this.socketService.confirmJoinGroup({\n                group: selectedGroup,\n                from_user: this.authUser,\n                member,\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\n                link: `/channels/show?username=${this.authUser.username}`,\n            });\n        }));\n    }\n\n    ignoreJoinGroup(member) {\n        console.log(member);\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\n            member_id: member.id,\n            group_id: this.selectedGroup.id\n        }).subscribe(dt => {\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\n            this.groupsStore.changeGroup(selectedGroup);\n\n            this.socketService.ignoreJoinGroup({\n                group: selectedGroup,\n                from_user: this.authUser,\n                member,\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\n                link: `/channels/show?username=${this.authUser.username}`,\n            });\n        }));\n    }\n\n}\n","<div class=\"tab-container\">\n    <div id=\"all-members-wrap\">\n        <app-admins-list [admins]=\"admins\" [authUser]=\"authUser\"\n                         [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-admins-list>\n        <app-group-members-list [members]=\"members\" [authUser]=\"authUser\"\n                                [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-group-members-list>\n        <app-member-requests-list *ngIf=\"isOwnGroup\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\n                                  [requestedMembers]=\"requestedMembers\"></app-member-requests-list>\n    </div>\n</div>\n\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {GroupsService} from '@core/services/groups.service';\nimport {Subscription} from 'rxjs';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ChatService} from '@core/services/chat.service';\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\n\n@Component({\n    selector: 'app-people-tab',\n    templateUrl: './people-tab.component.html',\n    styleUrls: ['./people-tab.component.scss']\n})\nexport class PeopleTabComponent implements OnInit, OnDestroy {\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n    @Input() authUser;\n\n    admins = [];\n    members = [];\n    requestedMembers = [];\n\n    subscriptions: Subscription[] = [];\n\n\n    constructor(\n        private groupsService: GroupsService,\n        private groupsStore: GroupsStoreService,\n        private notificationsStore: NotificationsSubjectStoreService,\n        private socketService: SocketIoService,\n        private chatService: ChatService,\n        private isEmptyObj: CheckForEmptyObjectPipe,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.trackGroups();\n        this.getAcceptedJoinPageGroup();\n        this.getRemovedPageGroupAdminPrivileges();\n    }\n\n    trackGroups() {\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\n            console.log(dt);\n            this.selectedGroup = dt;\n            this.admins = [];\n            this.members = [];\n            this.requestedMembers = [];\n\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\n                this.filterMembers();\n            }\n        }));\n    }\n\n\n    filterMembers() {\n        this.selectedGroup?.group_members?.map(m => {\n            if (this.selectedGroup.creator_id === m.id || m.groups_members.is_admin || m.groups_members.is_moderator) {\n                this.admins.push(m);\n            } else {\n                if (m.groups_members.confirmed) {\n                    this.members.push(m);\n                } else if (m.groups_members.accepted) {\n                    this.requestedMembers.push(m);\n                }\n            }\n        });\n    }\n\n    getAcceptedJoinPageGroup() {\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\n            const {rest} = data;\n            console.log('accepted', rest.group);\n            // this.groupsStore.changeGroup(rest.group);\n        }));\n    }\n\n    getRemovedPageGroupAdminPrivileges() {\n        this.subscriptions.push(this.socketService.getRemovedPageGroupAdminPrivileges().subscribe((data: any) => {\n            const {notification, member, group} = data;\n            this.notificationsStore.updateNotifications(notification);\n            console.log('removed privileges', group);\n            this.groupsStore.changeGroup(group);\n        }));\n    }\n\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-media-tab',\n  templateUrl: './media-tab.component.html',\n  styleUrls: ['./media-tab.component.scss']\n})\nexport class MediaTabComponent implements OnInit {\n\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        // console.log(this.selectedGroup)\n    }\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-about-tab',\n    templateUrl: './about-tab.component.html',\n    styleUrls: ['./about-tab.component.scss']\n})\nexport class AboutTabComponent implements OnInit {\n\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        // console.log(this.isOwnGroup)\n    }\n\n}\n","<p>about-tab works!</p>\n","<p>media-tab works!</p>\n","<app-post-form-placeholder [selectedGroup]=\"selectedGroup\"></app-post-form-placeholder>\n<app-post-item *ngFor=\"let post of groupPosts$|async; trackBy: trackByElement\"\n               [post]=\"post\" [group]=\"selectedGroup\" [accessedFromGroup]=\"true\">\n</app-post-item>\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ShowGroupsComponent,\n        data: {\n            title: 'Groups'\n        },\n    },\n    {\n        path: ':name',\n        component: SingleGroupComponent,\n        children: [\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class GroupsRoutingModule {\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {PostsService} from '@core/services/posts.service';\nimport {Observable, Subscription} from 'rxjs';\nimport {Post} from '@shared/models/post';\nimport trackByElement from '@core/helpers/track-by-element';\n\n@Component({\n    selector: 'app-posts-tab',\n    templateUrl: './posts-tab.component.html',\n    styleUrls: ['./posts-tab.component.scss']\n})\nexport class PostsTabComponent implements OnInit {\n\n    @Input() selectedGroup;\n    @Input() isOwnGroup;\n    groupPosts$: Observable<Post[]>;\n\n\n    trackByElement = trackByElement;\n\n    constructor(\n        private postsService: PostsService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.getGroupPosts();\n    }\n\n    getGroupPosts() {\n        this.groupPosts$ = this.postsService.getGroupPosts({group_id: this.selectedGroup.id});\n    }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GroupsRoutingModule } from './groups-routing.module';\nimport { ShowGroupsComponent } from './show-groups/show-groups.component';\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\nimport {SharedModule} from '@shared/shared.module';\nimport { GroupItemComponent } from './show-groups/group-item/group-item.component';\nimport { AboutTabComponent } from './single-group/about-tab/about-tab.component';\nimport { PeopleTabComponent } from './single-group/people-tab/people-tab.component';\nimport { MediaTabComponent } from './single-group/media-tab/media-tab.component';\nimport { PostsTabComponent } from './single-group/posts-tab/posts-tab.component';\nimport { AdminsListComponent } from './single-group/people-tab/admins-list/admins-list.component';\nimport { GroupMembersListComponent } from './single-group/people-tab/group-members-list/group-members-list.component';\nimport { MemberRequestsListComponent } from './single-group/people-tab/member-requests-list/member-requests-list.component';\nimport { GroupMembersActionsMenuComponent } from './single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component';\n\n\n@NgModule({\n  declarations: [ShowGroupsComponent, SingleGroupComponent, GroupItemComponent, AboutTabComponent, PeopleTabComponent, MediaTabComponent, PostsTabComponent, AdminsListComponent, GroupMembersListComponent, MemberRequestsListComponent, GroupMembersActionsMenuComponent],\n  imports: [\n    CommonModule,\n    GroupsRoutingModule,\n      SharedModule\n  ]\n})\nexport class GroupsModule { }\n"]}