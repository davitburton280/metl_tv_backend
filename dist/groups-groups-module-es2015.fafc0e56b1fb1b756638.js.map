{"version":3,"sources":["webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/shared/directives/fix-group-page-url.directive.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/shared/directives/disable-control-properly.directive.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.ts","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.html","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.ts","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.html","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/groups.module.ts"],"names":["CreateNewGroupDialogComponent","authUser","fb","dialog","groupsService","socketService","groupsStore","lowerCaseRemoveSpaces","subscriptions","this","initForm","groupForm","group","name","required","custom_name","privacy","creator_id","id","username","patchValue","transform","value","formValue","valid","push","addGroup","subscribe","dt","selectedGroup","find","d","setGroups","selectGroup","setNewPageGroup","close","closeDialog","submitForm","FixGroupPageUrlDirective","router","url","replace","navigate","GroupItemComponent","ShowGroupsComponent","chatService","userStore","groups","getAuthUser","trackGroups","groups$","authUser$","user","type","filter","g","open","width","height","data","afterClosed","navigateByUrl","openModal","DisableControlProperlyDirective","condition","control","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","checked","status","event","target","foundControl","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","SingleGroupComponent","route","isEmptyObj","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","console","log","getUserGroupConnStatus","params","passedGroupName","getGroupFromStore","getGroupFromServer","getGroupByCustomName","joinGroup","link","rest","leaveGroup","member_id","leavePageGroup","group_type","leavePageGroupNotify","length","member","leftGroups","removeFromPageGroupNotify","component","GroupMembersActionsMenuComponent","notificationsStore","adminRequestSent","moderatorRequestSent","sendMakeAdminRequest","removeGroupMember","removeFromPageGroup","removeAdminPrivileges","removePageGroupAdminPrivileges","is_admin","is_moderator","removeMember","AdminsListComponent","authUserGroupConnection","admin","connection","admins","a","isGroupCreator","getUserGroupConnection","GroupMembersListComponent","getAcceptedPageGroupAdminRequest","getDeclinedPageGroupAdminRequest","notification","updateNotifications","MemberRequestsListComponent","confirmGroupJoin","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","PeopleTabComponent","members","requestedMembers","getRemovedPageGroupAdminPrivileges","filterMembers","AboutTabComponent","MediaTabComponent","routes","path","title","children","PostsTabComponent","postsService","trackByElement","getGroupPosts","groupPosts$","GroupsRoutingModule","forChild","GroupsModule"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-create-new-group-dialog',\r\n    templateUrl: './create-new-group-dialog.component.html',\r\n    styleUrls: ['./create-new-group-dialog.component.scss']\r\n})\r\nexport class CreateNewGroupDialogComponent implements OnInit {\r\n    groupForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private fb: FormBuilder,\r\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService,\r\n        private groupsStore: GroupsStoreService,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.groupForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            custom_name: ['', Validators.required],\r\n            privacy: ['0'],\r\n            creator_id: this.authUser.id,\r\n            username: this.authUser.username\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\r\n        const formValue = this.groupForm.value;\r\n        if (this.groupForm.valid) {\r\n            this.subscriptions.push(this.groupsService.addGroup(formValue).subscribe(async (dt) => {\r\n                const selectedGroup = dt.find(d => formValue.name === d.name);\r\n                this.groupsStore.setGroups(dt);\r\n                this.groupsStore.selectGroup(selectedGroup);\r\n                this.socketService.setNewPageGroup(formValue);\r\n                this.dialog.close(this.groupForm.value);\r\n            }));\r\n        }\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close(null);\r\n    }\r\n\r\n}\r\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <div id=\"admin-info\">\r\n        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>\r\n    </div>\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"field-row\">\r\n            <label for=\"group-name-input\">Group name</label>\r\n            <input id=\"group-name-input\" formControlName=\"name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label for=\"privacy-types\">Choose privacy</label>\r\n            <select id=\"privacy-types\" formControlName=\"privacy\">\r\n                <option class=\"backOption\" value=\"0\">Public</option>\r\n                <option class=\"backOption\" value=\"1\">Private</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Directive, HostListener, Input} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[appNavigateToFixedGroupUrl]'\r\n})\r\nexport class FixGroupPageUrlDirective {\r\n\r\n    @Input() name;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private router: Router\r\n    ) {\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    async onClick() {\r\n        const url = '/groups/' + this.name.replace(' /g', '_') + '/people';\r\n        await this.router.navigate([this.lowerCaseRemoveSpaces.transform(url)]);\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\n\r\n@Component({\r\n    selector: 'app-group-item',\r\n    templateUrl: './group-item.component.html',\r\n    styleUrls: ['./group-item.component.scss']\r\n})\r\nexport class GroupItemComponent implements OnInit {\r\n    @Input() group;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getUrl() {\r\n        const url = '/groups/' + this.group.name.replace(' /g', '_') + '/about';\r\n        return this.lowerCaseRemoveSpaces.transform(url);\r\n    }\r\n\r\n}\r\n","<div appNavigateToFixedGroupUrl [name]=\"group.name\" class=\"groupMessageDiv\">\r\n    <div class=\"img-wrap\">\r\n        <img class=\"groupMessageImg\" [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n    </div>\r\n    <div class=\"group-name-wrap\">\r\n        <strong>{{group.name}}</strong>\r\n    </div>\r\n</div>\r\n","<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you manage</h3>\r\n<ul class=\"ulBorderBottom\">\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('managed')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you've joined</h3>\r\n<ul>\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('joined')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Router} from '@angular/router';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\n\r\n@Component({\r\n    selector: 'app-show-groups',\r\n    templateUrl: './show-groups.component.html',\r\n    styleUrls: ['./show-groups.component.scss']\r\n})\r\nexport class ShowGroupsComponent implements OnInit {\r\n    authUser;\r\n    groups = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public groupsStore: GroupsStoreService,\r\n        private chatService: ChatService,\r\n        private userStore: UserStoreService,\r\n        private socketService: SocketIoService,\r\n        public router: Router,\r\n        private dialog: MatDialog\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAuthUser();\r\n        this.trackGroups();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.groups$.subscribe(dt => {\r\n            this.groups = dt;\r\n        }));\r\n    }\r\n\r\n    getAuthUser() {\r\n        this.userStore.authUser$.subscribe(user => {\r\n            this.authUser = user;\r\n        });\r\n    }\r\n\r\n    filterGroups(type) {\r\n        return this.groups.filter(g => {\r\n            return type === 'managed' ?\r\n                g.creator_id === this.authUser.id :\r\n                g.creator_id !== this.authUser.id;\r\n        });\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(CreateNewGroupDialogComponent, {\r\n            width: '500px',\r\n            height: '450px',\r\n            data: this.authUser\r\n        }).afterClosed().subscribe(async (selectedGroup) => {\r\n            if (selectedGroup) {\r\n                await this.router.navigateByUrl('/groups/' + selectedGroup.custom_name + '/people');\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import {Directive, Injector, Input, Self} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[disableControl]'\r\n})\r\nexport class DisableControlProperlyDirective {\r\n\r\n    @Input() set disableControl({condition, control}) {\r\n        const action = condition ? 'disable' : 'enable';\r\n        control?.[action]();\r\n    }\r\n\r\n\r\n}\r\n","<div id=\"dialog-header\">\r\n    <h3>Invite contacts to this group</h3>\r\n    <div>\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n</div>\r\n<form [formGroup]=\"contactsInviteForm\">\r\n    <div id=\"group-members-wrap\">\r\n        <div id=\"suggested-contacts\">\r\n            <div id=\"contact-search-wrap\">\r\n                <input placeholder=\"Find a contact\">\r\n                <i class=\"fas fa-search\"></i>\r\n            </div>\r\n\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\r\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"'contact_'+control.value.i\">\r\n                            <div class=\"avatar-wrap\">\r\n                                <img class=\"avatar\"\r\n                                     [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\r\n                                <p class=\"contact-status\"\r\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <label>\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"hidden\" formControlName=\"name\">\r\n                            <input type=\"checkbox\" formControlName=\"checked\"\r\n                                   [id]=\"'contact_'+control.value.id\"\r\n                                   (change)=\"selectContact($event,control)\"\r\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\r\n                            >\r\n                            <span></span>\r\n                        </label>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"selected-contacts\">\r\n            <p id=\"selected-contacts-count\" *ngIf=\"selectedContacts.length as length\">\r\n                {{length + ' ' + (length === 1 ? 'contact' : 'contacts')}}  selected\r\n            </p>\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"control.value.id+'_'+i\">\r\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\r\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <button id=\"remove-from-selected-contacts-btn\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div id=\"dialog-actions\">\r\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {Subscription} from 'rxjs';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-invitation-dialog',\r\n    templateUrl: './group-members-invitation-dialog.component.html',\r\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\r\n})\r\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\r\n    selectedGroup;\r\n    userContacts: User[] = [];\r\n    selectedContacts: User[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    contactsInviteForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private groupsStore: GroupsStoreService,\r\n        private usersMessagesStore: UsersMessagesSubjectService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\r\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\r\n        private fb: FormBuilder\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedGroup = this.groupsStore.selectedGroup;\r\n        this.initForm();\r\n    }\r\n\r\n\r\n    initForm() {\r\n        this.contactsInviteForm = this.fb.group({\r\n            contacts: this.fb.array(this.getContactsFormGroup()),\r\n        });\r\n    }\r\n\r\n    getContactsFormGroup() {\r\n        const formArray = [];\r\n        this.usersMessagesStore.usersMessages.map((c, index) => {\r\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\r\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\r\n            let connectionWithGroup = 'not joined';\r\n\r\n            if (foundInGroup) {\r\n                const connectionContainer = foundInGroup.groups_members;\r\n\r\n                if (foundInGroup) {\r\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\r\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\r\n                        connectionWithGroup = 'accepted';\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            formArray.push(this.fb.group({\r\n                name: 'contact_' + index,\r\n                checked: !!foundInSelected,\r\n                status: connectionWithGroup,\r\n                ...c\r\n            }));\r\n        });\r\n        return formArray;\r\n    }\r\n\r\n    selectContact(event: Event, control: AbstractControl) {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.selectedContacts.push(control.value);\r\n        } else {\r\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        }\r\n    }\r\n\r\n    removeContactFromSelected(control: AbstractControl) {\r\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\r\n        this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        foundControl.patchValue({checked: false});\r\n    }\r\n\r\n    sendInvitationsToContacts() {\r\n        this.subscriptions.push(this.groupsService.addGroupMembers({\r\n            group_id: this.selectedGroup.id,\r\n            member_ids: this.selectedContacts.map(c => c.id)\r\n        }).subscribe(dt => {\r\n            this.socketService.inviteToNewPageGroup({\r\n                invited_members: this.selectedContacts,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsStore.changeGroup(dt);\r\n            this.closeDialog();\r\n        }));\r\n    }\r\n\r\n    isProcessedContact(status) {\r\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\r\n    }\r\n\r\n    get contactCtrls() {\r\n        return this.contactsInviteForm.controls.contacts as FormArray;\r\n    }\r\n\r\n    get checkedContactCtrls() {\r\n        return this.contactCtrls.controls.filter(c => c.value.checked);\r\n    }\r\n\r\n    getCheckBoxControl(control) {\r\n        return control.controls.checked;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"selectedGroup\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div id=\"group-cover-image\">\r\n            <img [src]=\"selectedGroup?.cover|getImgPath:'group_covers'\">\r\n        </div>\r\n\r\n        <div class=\"row groupsRow\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {User} from '@shared/models/user';\r\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\n\r\n@Component({\r\n    selector: 'app-single-group',\r\n    templateUrl: './single-group.component.html',\r\n    styleUrls: ['./single-group.component.scss']\r\n})\r\nexport class SingleGroupComponent implements OnInit, OnDestroy {\r\n    authUser: User;\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    selectedGroup;\r\n    isOwnGroup = false;\r\n    passedGroupName: string;\r\n    groupTabs = GROUP_PAGE_TABS;\r\n    groupPrivacy = 'public';\r\n\r\n    userGroupConnStatus = 'not connected';\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private route: ActivatedRoute,\r\n        private userStore: UserStoreService,\r\n        private dialog: MatDialog,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        private socketService: SocketIoService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackSelectedGroup();\r\n        this.getAuthUser();\r\n        this.getSelectedGroup();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getConfirmedJoinGroup();\r\n        this.getIgnoredJoinGroup();\r\n        this.getJoinGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n    }\r\n\r\n    getAuthUser() {\r\n        this.subscriptions.push(this.userStore.authUser$.subscribe(user => {\r\n            this.authUser = user;\r\n        }));\r\n    }\r\n\r\n    trackSelectedGroup() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\r\n            this.selectedGroup = dt;\r\n            this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\r\n            console.log(this.selectedGroup, this.groupPrivacy);\r\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\r\n                this.getUserGroupConnStatus();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.name;\r\n\r\n            if (!this.getGroupFromStore()) {\r\n                this.getGroupFromServer();\r\n            }\r\n        });\r\n    }\r\n\r\n    getGroupFromStore() {\r\n        this.selectedGroup = this.groupsStore.groups.find(g => {\r\n            const groupName = this.lowerCaseRemoveSpaces.transform(g.name);\r\n            return groupName === this.passedGroupName;\r\n        });\r\n        if (this.selectedGroup) {\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        }\r\n        return !!this.selectedGroup;\r\n    }\r\n\r\n    getGroupFromServer() {\r\n        this.groupsService.getGroupByCustomName({custom_name: this.passedGroupName}).subscribe(dt => {\r\n            this.selectedGroup = dt;\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        });\r\n    }\r\n\r\n    joinGroup() {\r\n        console.log(this.selectedGroup);\r\n        this.groupsService.joinGroup({\r\n            member_ids: [this.authUser.id],\r\n            group_id: this.selectedGroup.id,\r\n            accepted: 1\r\n        }).subscribe(dt => {\r\n            this.userGroupConnStatus = 'unconfirmed';\r\n\r\n            this.socketService.joinGroup({\r\n                group: this.selectedGroup,\r\n                from_user: this.authUser,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n\r\n            this.groupsStore.changeGroup(dt);\r\n        });\r\n    }\r\n\r\n    getJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('get joined', rest.group);\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    this.groupsStore.setGroups(dt);\r\n                    this.socketService.leavePageGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n                // console.log(this.selectedGroup);\r\n                // this.groupsStore.selectGroup({});\r\n            }\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedMembersCount() {\r\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('confirmed in group page', data);\r\n            this.userGroupConnStatus = 'confirmed';\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getIgnoredJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('ignored in group page', rest);\r\n            if (rest.member.id === this.authUser.id) {\r\n                this.groupsStore.setGroups(rest.leftGroups);\r\n                this.groupsStore.selectGroup(rest.group);\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\r\n            const {member, leftGroups} = data;\r\n            console.log('removed from group in group page', data);\r\n            this.groupsStore.changeGroup(data.group);\r\n            if (member.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n            // console.log(this.groupsMessagesStore.groupsMessages)\r\n            // }\r\n        }));\r\n    }\r\n\r\n    getUserGroupConnStatus() {\r\n        this.selectedGroup.group_members?.map(m => {\r\n            if (m.id === this.authUser.id) {\r\n                if (m.groups_members.confirmed === 1) {\r\n                    this.userGroupConnStatus = 'confirmed';\r\n                } else {\r\n                    if (m.groups_members.accepted === 1) {\r\n                        this.userGroupConnStatus = 'unconfirmed';\r\n                    } else {\r\n                        this.userGroupConnStatus = 'not connected';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    showJoinBtn() {\r\n        return !this.isOwnGroup;\r\n    }\r\n\r\n    onOutletLoaded(component) {\r\n        if (this.selectedGroup) {\r\n            component.selectedGroup = this.selectedGroup;\r\n            component.isOwnGroup = this.isOwnGroup;\r\n            component.authUser = this.authUser;\r\n        }\r\n    }\r\n\r\n    openMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\r\n            height: '690px',\r\n            width: '950px',\r\n            data: this.authUser,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div>\r\n    <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\r\n        <i class=\"fas fa-ellipsis-h\"></i>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button id=\"make-admin\" mat-menu-item\r\n                *ngIf=\"!isAdmin(member) && !adminRequestSent\"\r\n                (click)=\"makeAdmin(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make admin</span>\r\n        </button>\r\n        <button id=\"remove-make-admin\" mat-menu-item *ngIf=\"isAdmin(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group admin privileges</span>\r\n        </button>\r\n        <button id=\"remove-make-moderator\" mat-menu-item\r\n                *ngIf=\"isModerator(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group moderator privileges</span>\r\n        </button>\r\n        <button id=\"make-moderator\" *ngIf=\"!isModerator(member) && !moderatorRequestSent\" mat-menu-item\r\n                (click)=\"makeAdmin(member,'moderator')\"\r\n                [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make moderator</span>\r\n        </button>\r\n        <button id=\"remove-member-btn\" mat-menu-item [disableRipple]=\"true\" (click)=\"removeMember(member)\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-group-members-actions-menu',\r\n    templateUrl: './group-members-actions-menu.component.html',\r\n    styleUrls: ['./group-members-actions-menu.component.scss']\r\n})\r\nexport class GroupMembersActionsMenuComponent implements OnInit, OnDestroy {\r\n    @Input() member;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    adminRequestSent = false;\r\n    moderatorRequestSent = false;\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private dialog: MatDialog,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    makeAdmin(member, type = 'admin') {\r\n        console.log('make admin', member)\r\n        this.socketService.sendMakeAdminRequest({\r\n            from_user: this.authUser,\r\n            group: this.selectedGroup,\r\n            member,\r\n            type,\r\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                invites you to become ${type === 'admin' ? 'an admin' : 'a moderator'}\r\n                 for the <strong>${this.selectedGroup.name}</strong> group`\r\n        });\r\n\r\n        this.adminRequestSent = type === 'admin';\r\n        this.moderatorRequestSent = type === 'moderator';\r\n    }\r\n\r\n    removeMember(member) {\r\n        console.log('remove')\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromPageGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    removeAdminPrivileges(member, type = 'admin') {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.subscriptions.push(this.groupsService.removeAdminPrivileges({\r\n                    member_id: member.id,\r\n                    group_id: this.selectedGroup.id\r\n                }).subscribe(dt => {\r\n                    this.socketService.removePageGroupAdminPrivileges({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed ${type}  privileges of <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       for the <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                    this.groupsStore.changeGroup(dt);\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    makeModerator(member) {\r\n\r\n    }\r\n\r\n    isAdmin(member) {\r\n        return member.groups_members.is_admin;\r\n    }\r\n\r\n    isModerator(member) {\r\n        return member.groups_members.is_moderator;\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"admins\">\r\n    <strong>Admins & moderators</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let admin of admins\">\r\n            <div class=\"details\">\r\n                <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'user_avatars'\">\r\n                <div>\r\n                    <p class=\"full-name\">{{admin.first_name + ' ' + admin.last_name}}</p>\r\n                    <span class=\"role\">{{getRoleName(admin)}}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <app-group-members-actions-menu *ngIf=\"showActionsMenu(admin)\"\r\n                                            [member]=\"admin\"\r\n                                            [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            [isOwnGroup]=\"isOwnGroup\"></app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admins-list',\r\n    templateUrl: './admins-list.component.html',\r\n    styleUrls: ['./admins-list.component.scss']\r\n})\r\nexport class AdminsListComponent implements OnInit {\r\n    @Input() admins;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.authUserGroupConnection)\r\n    }\r\n\r\n    isGroupCreator(admin) {\r\n        return admin.id === this.selectedGroup.creator_id;\r\n    }\r\n\r\n    isGroupAdmin(admin) {\r\n        return !!admin.groups_members.is_admin;\r\n    }\r\n\r\n\r\n    getUserGroupConnection(user) {\r\n        let connection;\r\n        this.admins.map(a => {\r\n            if (a.id === user.id) {\r\n                connection = a.groups_members.is_admin ? 'Admin' : 'Moderator';\r\n\r\n                if (this.isGroupCreator(user)) {\r\n                    connection = 'Group creator';\r\n                }\r\n            }\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    showActionsMenu(admin) {\r\n        if (this.authUserGroupConnection === 'Admin') {\r\n            return !this.isGroupCreator(admin) && (admin.id === this.authUser.id || admin.groups_members.is_moderator);\r\n        } else if (this.authUserGroupConnection === 'Group creator') {\r\n            return !this.isGroupCreator(admin);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getRoleName(admin) {\r\n        return this.getUserGroupConnection(admin);\r\n    }\r\n\r\n    get authUserGroupConnection(): string {\r\n        return this.getUserGroupConnection(this.authUser);\r\n    }\r\n\r\n}\r\n","<div id=\"members\">\r\n    <strong>Members</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let member of members\" [class.rounded]=\"!isOwnGroup\">\r\n            <div class=\"details\">\r\n                <div class=\"avatarDiv\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n                </div>\r\n                <strong>{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <app-group-members-actions-menu [member]=\"member\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            *ngIf=\"isOwnGroup\" [isOwnGroup]=\"isOwnGroup\">\r\n            </app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-list',\r\n    templateUrl: './group-members-list.component.html',\r\n    styleUrls: ['./group-members-list.component.scss']\r\n})\r\nexport class GroupMembersListComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() members;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAcceptedPageGroupAdminRequest();\r\n        this.getDeclinedPageGroupAdminRequest();\r\n    }\r\n\r\n\r\n    getAcceptedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getAcceptedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            // console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getDeclinedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getDeclinedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            // this.adminRequestSent = false;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"member-requests\">\r\n    <strong>Requests</strong>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n            <div class=\"requestPartDiv\">\r\n            <div class=\"avatarDiv\">\r\n                <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n            </div>\r\n            <strong class=\"avatarName\">{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <div class=\"confirmIgnoreBtns\">\r\n                <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\n\r\n@Component({\r\n    selector: 'app-member-requests-list',\r\n    templateUrl: './member-requests-list.component.html',\r\n    styleUrls: ['./member-requests-list.component.scss']\r\n})\r\nexport class MemberRequestsListComponent implements OnInit {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() requestedMembers;\r\n    subscriptions = [];\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    confirmJoinGroup(member) {\r\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.confirmJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    ignoreJoinGroup(member) {\r\n        console.log(member);\r\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.ignoreJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n}\r\n","<div class=\"tab-container\">\r\n    <div id=\"all-members-wrap\">\r\n        <app-admins-list [admins]=\"admins\" [authUser]=\"authUser\"\r\n                         [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-admins-list>\r\n        <app-group-members-list [members]=\"members\" [authUser]=\"authUser\"\r\n                                [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-group-members-list>\r\n        <app-member-requests-list *ngIf=\"isOwnGroup\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                  [requestedMembers]=\"requestedMembers\"></app-member-requests-list>\r\n    </div>\r\n</div>\r\n\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    @Input() authUser;\r\n\r\n    admins = [];\r\n    members = [];\r\n    requestedMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    constructor(\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        private chatService: ChatService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroups();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getRemovedPageGroupAdminPrivileges();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\r\n            console.log(dt);\r\n            this.selectedGroup = dt;\r\n            this.admins = [];\r\n            this.members = [];\r\n            this.requestedMembers = [];\r\n\r\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\r\n                this.filterMembers();\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n    filterMembers() {\r\n        this.selectedGroup?.group_members?.map(m => {\r\n            if (this.selectedGroup.creator_id === m.id || m.groups_members.is_admin || m.groups_members.is_moderator) {\r\n                this.admins.push(m);\r\n            } else {\r\n                if (m.groups_members.confirmed) {\r\n                    this.members.push(m);\r\n                } else if (m.groups_members.accepted) {\r\n                    this.requestedMembers.push(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getRemovedPageGroupAdminPrivileges() {\r\n        this.subscriptions.push(this.socketService.getRemovedPageGroupAdminPrivileges().subscribe((data: any) => {\r\n            const {notification, member, group} = data;\r\n            this.notificationsStore.updateNotifications(notification);\r\n            console.log('removed privileges', group);\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.isOwnGroup)\r\n    }\r\n\r\n}\r\n","<p>about-tab works!</p>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-media-tab',\r\n  templateUrl: './media-tab.component.html',\r\n  styleUrls: ['./media-tab.component.scss']\r\n})\r\nexport class MediaTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n}\r\n","<p>media-tab works!</p>\r\n","<app-post-form-placeholder [selectedGroup]=\"selectedGroup\"></app-post-form-placeholder>\r\n<app-post-item *ngFor=\"let post of groupPosts$|async; trackBy: trackByElement\"\r\n               [post]=\"post\" [group]=\"selectedGroup\" [accessedFromGroup]=\"true\">\r\n</app-post-item>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\r\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ShowGroupsComponent,\r\n        data: {\r\n            title: 'Groups'\r\n        },\r\n    },\r\n    {\r\n        path: ':name',\r\n        component: SingleGroupComponent,\r\n        children: [\r\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\r\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\r\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\r\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GroupsRoutingModule {\r\n}\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {Post} from '@shared/models/post';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-posts-tab',\r\n    templateUrl: './posts-tab.component.html',\r\n    styleUrls: ['./posts-tab.component.scss']\r\n})\r\nexport class PostsTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    groupPosts$: Observable<Post[]>;\r\n\r\n\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getGroupPosts();\r\n    }\r\n\r\n    getGroupPosts() {\r\n        this.groupPosts$ = this.postsService.getGroupPosts({group_id: this.selectedGroup.id});\r\n    }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GroupsRoutingModule } from './groups-routing.module';\r\nimport { ShowGroupsComponent } from './show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport { GroupItemComponent } from './show-groups/group-item/group-item.component';\r\nimport { AboutTabComponent } from './single-group/about-tab/about-tab.component';\r\nimport { PeopleTabComponent } from './single-group/people-tab/people-tab.component';\r\nimport { MediaTabComponent } from './single-group/media-tab/media-tab.component';\r\nimport { PostsTabComponent } from './single-group/posts-tab/posts-tab.component';\r\nimport { AdminsListComponent } from './single-group/people-tab/admins-list/admins-list.component';\r\nimport { GroupMembersListComponent } from './single-group/people-tab/group-members-list/group-members-list.component';\r\nimport { MemberRequestsListComponent } from './single-group/people-tab/member-requests-list/member-requests-list.component';\r\nimport { GroupMembersActionsMenuComponent } from './single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ShowGroupsComponent, SingleGroupComponent, GroupItemComponent, AboutTabComponent, PeopleTabComponent, MediaTabComponent, PostsTabComponent, AdminsListComponent, GroupMembersListComponent, MemberRequestsListComponent, GroupMembersActionsMenuComponent],\r\n  imports: [\r\n    CommonModule,\r\n    GroupsRoutingModule,\r\n      SharedModule\r\n  ]\r\n})\r\nexport class GroupsModule { }\r\n"]}