{"version":3,"sources":["webpack:///src/app/channels/show-channel/watchlist-tab/watchlist-tab.component.html","webpack:///src/app/channels/show-channel/watchlist-tab/watchlist-tab.component.ts","webpack:///src/app/channels/show-channel/videos-tab/videos-tab.component.html","webpack:///src/app/channels/show-channel/videos-tab/videos-tab.component.ts","webpack:///src/app/core/components/modals/add-playlist-dialog/add-playlist-dialog.component.html","webpack:///src/app/core/components/modals/add-playlist-dialog/add-playlist-dialog.component.ts","webpack:///src/app/channels/show-channel/playlists-tab/playlists-tab.component.html","webpack:///src/app/channels/show-channel/playlists-tab/playlists-tab.component.ts","webpack:///src/app/channels/show-channel/channel-profile/channel-profile.component.html","webpack:///src/app/channels/show-channel/channel-profile/channel-profile.component.ts","webpack:///src/app/channels/show-channel/show-channel.component.html","webpack:///src/app/channels/show-channel/show-channel.component.ts","webpack:///src/app/channels/show-channel/people-tab/subscribers-tab/subscribers-tab.component.html","webpack:///src/app/channels/show-channel/people-tab/subscribers-tab/subscribers-tab.component.ts","webpack:///src/app/channels/show-channel/people-tab/subscriptions-tab/subscriptions-tab.component.html","webpack:///src/app/channels/show-channel/people-tab/subscriptions-tab/subscriptions-tab.component.ts","webpack:///src/app/channels/show-channel/people-tab/people-tab.component.ts","webpack:///src/app/channels/show-channel/people-tab/people-tab.component.html","webpack:///src/app/channels/show-channel/about-tab/about-tab.component.html","webpack:///src/app/channels/channels-routing.module.ts","webpack:///src/app/channels/show-channel/about-tab/about-tab.component.ts","webpack:///src/app/channels/channels.module.ts"],"names":["WatchlistTabComponent","videoService","subjectService","router","getExactParams","stocksService","getAuthUser","subject","cdr","apiUrl","subscriptions","userStocks","filteredStocks","stocksLoading","this","authUser","transform","push","getStocksSearch","subscribe","s","getSearchResults","currentUserStocks","pipe","filter","d","initial","dt","stocks","search","us","name","toLowerCase","includes","updateFollowedStocks","user_id","id","user_stocks","changeUserStocks","empty","length","detectChanges","e","sendData","order_type","rows","JSON","stringify","dragdrop","updateUserStocksPriority","localStorage","setItem","hasOwnProperty","token","forEach","unsubscribe","VideosTabComponent","showFilters","filters","userVideos","videosLoaded","getToggleFiltersData","params","channelUser","getUserVideos","videos","getVideosSearch","AddPlaylistDialogComponent","data","modal","fb","playlistService","isSubmitted","console","log","addPlaylistForm","group","channel_id","required","description","privacy","valid","addPlaylist","value","close","get","cancel","createPlaylist","PlaylistsTabComponent","playlistsService","dialog","playlists","trackByElement","getPlaylists","getFiltersToggleState","channel","open","afterClosed","playlist","firstVideoId","navigate","queryParams","playlist_id","channelId","confirmed","removePlaylist","$event","preventDefault","ChannelProfileComponent","usersService","userStore","base64ToFile","channelService","usersConnectionsStore","groupsMessagesStore","notificationsStore","socketService","loader","uploadFile","_userInfoService","subscribedToChannel","subscribersCount","changingImage","editMode","usersConnectionStatus","showHidEditCoverImg","fdCover","FormData","showHidEditAvatarImg","fdAvatar","_getAuthInfo","initChannelForm","checkChannelSubscription","srcCoverImg","cover","srcAvatarImg","avatar","getSubscribeChanel","_userInfo","channelForm","username","patchValue","status","subscribers_count","event","coverChangedEvent","reader","FileReader","onload","ev","srcEditCoverImg","target","result","readAsDataURL","files","append","profileChangedEvent","srcEditAvatarImg","dataLoading","detectImageChange","user","subscribeToChannel","getUserChannelSubscriptions","setUserSubscriptions","subscribeChanel","from_user","to_user","msg","notifications","allNotifications","n","_id","setInitialNotifications","path","changeChannelDetails","changeAuthUserInfo","dat","setAuthUser","ShowChannelComponent","route","auth","updateStocks","usersMessagesStore","toastr","chatService","allTabs","showChatBox","passedUsername","snapshot","passedTab","tab","searchVideosForm","activeTab","tabs","getUserInfo","setToggleFiltersData","channelLoading","own_channel","setStocksSearch","setVideosSearch","tag","maxWidth","maxHeight","height","width","panelClass","stock","find","isStockFollowed","component","routerOutlet","activatedRoute","routeConfig","SubscribersTabComponent","channelsService","channelSubscribers$","getChannelSubscriptions","PeopleTabComponent","SubscriptionsTabComponent","getSubscriptions","userChannels","channel_subscribers","subscriber_id","AboutTabComponent","ChannelsRoutingModule","ChannelsModule","routes","title","children","fixLineBreaks","aboutForm","maxLength","saveDescription","document","querySelector","innerHTML","saveChannelDescription","forChild"],"mappings":"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","file":"x","sourcesContent":["<div *ngIf=\"filteredStocks && channelUser.username === authUser.username\">\r\n<!--    <mat-spinner [diameter]=\"20\"></mat-spinner>-->\r\n    <small class=\"error\" *ngIf=\"userStocks?.length === 0\">\r\n        No stocks added to watchlist</small>\r\n    <app-stock-tiles [stocks]=\"filteredStocks\" [userStocks]=\"userStocks\" *ngIf=\"userStocks?.length > 0\"\r\n                     (updatedStocksList)=\"saveUpdatedStocksList($event)\" [followingAllowed]=\"true\"\r\n                     (updatedStocksPriority)=\"updateStocksPriority($event)\"\r\n    ></app-stock-tiles>\r\n</div>\r\n","import {ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {User} from '@shared/models/user';\r\nimport {updateStockDetails} from '@core/helpers/update-stock-details';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport {filter} from 'rxjs/operators';\r\nimport {Stock} from '@shared/models/stock';\r\n\r\n@Component({\r\n    selector: 'app-watchlist-tab',\r\n    templateUrl: './watchlist-tab.component.html',\r\n    styleUrls: ['./watchlist-tab.component.scss']\r\n})\r\nexport class WatchlistTabComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n    authUser: User;\r\n    search: string | null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    userStocks: Stock[] = [];\r\n    filteredStocks: Stock[] = [];\r\n\r\n    stocksLoading = 'idle';\r\n\r\n\r\n    @Input() channelUser;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private subjectService: SubjectService,\r\n        public router: Router,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe,\r\n        private stocksService: StocksService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.stocksLoading = 'loading';\r\n\r\n        this.subscriptions.push(this.subjectService.getStocksSearch().subscribe(s => {\r\n            this.getSearchResults(s);\r\n        }));\r\n\r\n        this.subscriptions.push(\r\n            this.subject.currentUserStocks\r\n                .pipe(filter(d => !d.initial))\r\n                .subscribe(dt => {\r\n                    this.userStocks = dt.stocks;\r\n                    this.filteredStocks = this.userStocks;\r\n                    this.stocksLoading = 'finished';\r\n                }));\r\n    }\r\n\r\n    getSearchResults(s) {\r\n        this.search = s;\r\n        if (s) {\r\n            this.filteredStocks = this.userStocks.filter(us => us.name.toLowerCase().includes(s));\r\n        } else {\r\n            this.filteredStocks = this.userStocks;\r\n        }\r\n    }\r\n\r\n    saveUpdatedStocksList(stocks) {\r\n        this.stocksLoading = 'loading';\r\n        this.subscriptions.push(this.stocksService.updateFollowedStocks({\r\n            user_id: this.authUser.id,\r\n            ...{stocks}\r\n        }).subscribe(dt => {\r\n            this.userStocks = dt?.user_stocks || [];\r\n            this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n            this.stocksLoading = 'finished';\r\n            this.cdr.detectChanges();\r\n        }));\r\n    }\r\n\r\n    updateStocksPriority(e) {\r\n        const sendData = {\r\n            order_type: 'custom',\r\n            rows: JSON.stringify(e),\r\n            user_id: this.authUser.id\r\n        };\r\n\r\n        this.subject.changeUserStocks({stocks: e, dragdrop: true});\r\n        this.stocksService.updateUserStocksPriority(sendData).subscribe(dt => {\r\n            localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<app-video-filters *ngIf=\"showFilters\" (filter)=\"getFilteredVideos($event)\"></app-video-filters>\r\n<app-videos-list-holder [videos]=\"channelUser.videos\" [removable]=\"authUser.username === channelUser.username\"></app-videos-list-holder>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-videos-tab',\r\n    templateUrl: './videos-tab.component.html',\r\n    styleUrls: ['./videos-tab.component.scss']\r\n})\r\nexport class VideosTabComponent implements OnInit, OnDestroy {\r\n\r\n    apiUrl = API_URL;\r\n    showFilters = false;\r\n    search = '';\r\n    filters = null;\r\n    userVideos = [];\r\n    videosLoaded = false;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input() channelUser;\r\n    @Input() authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private videoService: VideoService,\r\n        private subjectService: SubjectService,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.showFilters = dt;\r\n        }));\r\n\r\n        this.getSearchResults();\r\n    }\r\n\r\n    getUserVideos(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n        params.user_id = this.channelUser.id;\r\n        this.videoService.getUserVideos(params).subscribe(dt => {\r\n            this.videosLoaded = true;\r\n            this.channelUser.videos = dt?.videos;\r\n        });\r\n    }\r\n\r\n    getSearchResults() {\r\n        this.subscriptions.push(this.subjectService.getVideosSearch().subscribe(s => {\r\n            this.search = s;\r\n            this.getUserVideos({search: this.search, filters: this.filters});\r\n        }));\r\n    }\r\n\r\n    getFilteredVideos(e) {\r\n        this.filters = e;\r\n        this.getUserVideos({search: this.search, filters: this.filters});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"add-playlist-modal\">\r\n    <form [formGroup]=\"addPlaylistForm\">\r\n        <input type=\"text\" placeholder=\"Playlist Name\" formControlName=\"name\">\r\n        <span class=\"error\" *ngIf=\"nameCtrl.hasError('required') && isSubmitted\">Playlist name is required</span>\r\n\r\n        <textarea id=\"playlist-description\" cols=\"30\" rows=\"10\" formControlName=\"description\"\r\n                  placeholder=\"Playlist Description\"></textarea>\r\n        <span class=\"error\" *ngIf=\"descCtrl.hasError('required') && isSubmitted\">Playlist description is required</span>\r\n\r\n        <div class=\"select\">\r\n            <select id=\"visibility\" formControlName=\"privacy\">\r\n                <option [value]=\"''\">Visibility</option>\r\n                <option [value]=\"0\">Public</option>\r\n                <option [value]=\"1\">Private</option>\r\n            </select>\r\n        </div>\r\n        <span class=\"error\" *ngIf=\"privacyCtrl.hasError('required') && isSubmitted\">Playlist privacy is required</span>\r\n\r\n        <div class=\"btn-wrap\">\r\n            <button class=\"btn cancel\" (click)=\"cancel()\">Cancel</button>\r\n            <button class=\"btn create\" (click)=\"createPlaylist()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\n\r\n@Component({\r\n    selector: 'app-add-playlist-dialog',\r\n    templateUrl: './add-playlist-dialog.component.html',\r\n    styleUrls: ['./add-playlist-dialog.component.scss']\r\n})\r\nexport class AddPlaylistDialogComponent implements OnInit {\r\n    addPlaylistForm: FormGroup;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private modal: MatDialogRef<AddPlaylistDialogComponent>,\r\n        private fb: FormBuilder,\r\n        private playlistService: PlaylistsService\r\n    ) {\r\n        console.log(data)\r\n        this.addPlaylistForm = this.fb.group({\r\n            channel_id: data.channel_id,\r\n            name: ['', Validators.required],\r\n            description: ['', Validators.required],\r\n            privacy: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    createPlaylist() {\r\n        this.isSubmitted = true;\r\n        if (this.addPlaylistForm.valid) {\r\n            this.playlistService.addPlaylist(this.addPlaylistForm.value).subscribe(dt => {\r\n                this.modal.close();\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.modal.close();\r\n    }\r\n\r\n    get nameCtrl(): AbstractControl {\r\n        return this.addPlaylistForm.get('name');\r\n    }\r\n\r\n    get privacyCtrl(): AbstractControl {\r\n        return this.addPlaylistForm.get('privacy');\r\n    }\r\n\r\n    get descCtrl(): AbstractControl {\r\n        return this.addPlaylistForm.get('description');\r\n    }\r\n\r\n\r\n}\r\n","<app-video-filters *ngIf=\"showFilters\" (filter)=\"getFilteredPlaylists($event)\"></app-video-filters>\r\n<div class=\"playlist-tab\">\r\n    <ng-container *ngIf=\"authUser.username === channelUser.username\">\r\n        <button class=\"btn new-playlist\" (click)=\"openAddPlaylistModal()\">Add New Playlist</button>\r\n        <table *ngIf=\"playlists.length > 0\" class=\"table-responsive\">\r\n            <tr>\r\n                <th>Playlist</th>\r\n                <th>Visibility</th>\r\n                <th>Created at</th>\r\n                <th>Last updated</th>\r\n                <th>Video count</th>\r\n                <th></th>\r\n            </tr>\r\n            <tr *ngFor=\"let playlist of playlists; trackBy:trackByElement\">\r\n                <td>\r\n                    <div class=\"img-info\">\r\n                        <img class=\"thumbnail\" [src]=\"playlist.thumbnail|getImgPath\" (click)=\"goToEditPage(playlist)\">\r\n                        <div class=\"info\">\r\n                            <h3>{{playlist.name}}</h3>\r\n                            <p>{{playlist.description}}</p>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <ng-container *ngIf=\"playlist.privacy\">\r\n                        <mat-icon>visibility_off</mat-icon>\r\n                        <span>Private</span>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!playlist.privacy\">\r\n                        <mat-icon>visibility_on</mat-icon>\r\n                        <span>Public</span>\r\n                    </ng-container>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.created_at|date: 'd MMM, yyyy'}}</span>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.updated_at|date: 'd MMM, yyyy'}}</span>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.videos.length}}</span>\r\n                </td>\r\n                <td>\r\n                    <span class=\"material-icons\" (click)=\"goToEditPage(playlist)\">create</span>\r\n                    <mat-icon (click)=\"removePlaylist(playlist.id, channelUser.id)\">delete</mat-icon>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"authUser.username !== channelUser.username\">\r\n        <div class=\"playlists-items\">\r\n            <ng-container *ngFor=\"let playlist of playlists\">\r\n                <div class=\"item\" >\r\n                    <div class=\"top-wrap\" (click)=\"openPlaylistPage(playlist, playlist.videos[0]?.id)\">\r\n                        <img class=\"thumbnail\" [src]=\"playlist.thumbnail|getImgPath\">\r\n                        <div class=\"overlay-info\">\r\n                            <p class=\"icon\"><span class=\"material-icons\">playlist_play</span></p>\r\n                            <p>{{playlist.name}}</p>\r\n                            <p class=\"video-count\">{{playlist.videos.length + (playlist.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"info\">\r\n                        <h2>{{playlist.name}}</h2>\r\n                        <p>{{playlist.description}}</p>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n\r\n    </ng-container>\r\n    <div id=\"no-playlists-found\" *ngIf=\"playlists.length === 0\">\r\n        <small class=\"error\">No playlists found for this channel</small>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddPlaylistDialogComponent} from '@core/components/modals/add-playlist-dialog/add-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-playlists-tab',\r\n    templateUrl: './playlists-tab.component.html',\r\n    styleUrls: ['./playlists-tab.component.scss']\r\n})\r\nexport class PlaylistsTabComponent implements OnInit {\r\n    playlists = [];\r\n    apiUrl = API_URL;\r\n    showFilters = false;\r\n    search = '';\r\n    filters = null;\r\n    subscriptions: Subscription[] = [];\r\n    trackByElement = trackByElement;\r\n    @Input('channelUser') channelUser;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private playlistsService: PlaylistsService,\r\n        private subjectService: SubjectService,\r\n        private dialog: MatDialog,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.search = '';\r\n        // localStorage.getItem('search');\r\n        this.getPlaylists({search: this.search, filters: this.filters});\r\n        this.getFiltersToggleState();\r\n    }\r\n\r\n    getFiltersToggleState() {\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.showFilters = dt;\r\n        }));\r\n    }\r\n\r\n\r\n    getPlaylists(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.playlistsService.get({\r\n            channel_id: this.channelUser.channel.id,\r\n            user_id: this.authUser.id, ...params\r\n        }).subscribe(dt => {\r\n            this.playlists = dt;\r\n            // console.log(this.authUser, this.channelUser)\r\n        });\r\n    }\r\n\r\n    openAddPlaylistModal() {\r\n        this.dialog.open(AddPlaylistDialogComponent,\r\n            {\r\n                data: {channel_id: this.channelUser.channel.id}\r\n            })\r\n            .afterClosed().subscribe(dt => {\r\n            this.getPlaylists({search: this.search, filters: this.filters});\r\n        });\r\n    }\r\n\r\n    openPlaylistPage(playlist, firstVideoId) {\r\n        const route = 'videos/play';\r\n        const params = {id: firstVideoId, playlist_id: playlist.id};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n    getSearchResults(search) {\r\n        this.search = search;\r\n        this.getPlaylists({search, filters: this.filters});\r\n    }\r\n\r\n    getFilteredPlaylists(filters) {\r\n        this.filters = filters;\r\n        this.getPlaylists({search: this.search, filters});\r\n    }\r\n\r\n    goToEditPage(playlist) {\r\n        this.router.navigate(['playlists/single/' + playlist.id]);\r\n    }\r\n\r\n    removePlaylist(id, channelId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removePlaylist({id, channel_id: channelId}).subscribe(dt => {\r\n                    this.getPlaylists({search: this.search, filters: this.filters});\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"channelForm\">\r\n    <div class=\"profile-block\">\r\n        <div [hidden]=\"true\" *ngIf=\"editMode\">\r\n            <input type=\"file\" id=\"cover-image-input\" (change)=\"coverChangeEvent($event)\"/>\r\n            <input type=\"hidden\" formControlName=\"cover\">\r\n<!--            <ngx-photo-editor-->\r\n<!--                [imageChanedEvent]=\"coverChangedEvent\"-->\r\n<!--                (imageCropped)=\"coverCropped($event)\"-->\r\n<!--                [autoCrop]=\"false\"-->\r\n<!--                [viewMode]=\"3\"></ngx-photo-editor>-->\r\n        </div>\r\n\r\n        <div class=\"cover-image-container\">\r\n            <label for=\"cover-image-input\">\r\n                <img id=\"cover-image\" *ngIf=\"!showHidEditCoverImg\" [src]=\"srcCoverImg|getImgPath: 'images'\"\r\n                     (load)=\"detectImageChange()\">\r\n                <img class=\"editImg\" *ngIf=\"showHidEditCoverImg\" [src]=\"srcEditCoverImg\" alt=\"\">\r\n            </label>\r\n            <button mat-icon-button type=\"button\" class=\"remove-cover-btn\" (click)=\"removeCover()\"\r\n                    *ngIf=\"editMode && srcCoverImg\">\r\n                <mat-icon>clear</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"sub-block\">\r\n        <div id=\"channel-name-avatar\">\r\n            <div class=\"avatar-container\">\r\n                <label for=\"profile-image-input\">\r\n                    <img class=\"avatar\" *ngIf=\"!showHidEditAvatarImg\" [ngStyle]=\"{opacity: editMode ? 0.5: 1}\" id=\"profile-image\"\r\n                         (load)=\"detectImageChange()\"\r\n                         [src]=\"srcAvatarImg|getImgPath: 'images'\">\r\n                    <img class=\"avatar\" *ngIf=\"showHidEditAvatarImg\" [ngStyle]=\"{opacity: editMode ? 0.5: 1}\" [src]=\"srcEditAvatarImg\" alt=\"\">\r\n                    <mat-icon id=\"add-photo-btn\" *ngIf=\"editMode && !srcAvatarImg\">add</mat-icon>\r\n                </label>\r\n                <mat-icon (click)=\"removeAvatar()\" class=\"remove-avatar-btn\"\r\n                          *ngIf=\"editMode && srcAvatarImg\">clear\r\n                </mat-icon>\r\n            </div>\r\n\r\n            <div [hidden]=\"true\" *ngIf=\"editMode\">\r\n                <input type=\"file\" id=\"profile-image-input\" (change)=\"profileChangeEvent($event)\"/>\r\n                <input type=\"hidden\" formControlName=\"avatar\">\r\n\r\n            </div>\r\n            <div>\r\n                <p class=\"channel-name\" id=\"channel-name\" *ngIf=\"!editMode\">{{channelUser.channel.name}}</p>\r\n                <mat-form-field *ngIf=\"editMode\">\r\n                    <input matInput formControlName=\"name\" id=\"channel-name-input\"\r\n                           (keyup.enter)=\"$event.preventDefault()\">\r\n                </mat-form-field>\r\n                <p class=\"subscribers-count\">{{subscribersCount + ' subscriber' + (subscribersCount === 1 ? '' : 's')}} </p>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"loader\" *ngIf=\"changingImage\">\r\n            <mat-spinner [diameter]=\"50\"></mat-spinner>\r\n        </div>\r\n        <div id=\"connection-status-buttons\"  *ngIf=\"channelUser.username !== authUser.username\">\r\n            <!--            <i class=\"sub-bell fas fa-bell\"></i>-->\r\n\r\n            <a class=\"subscribe-btn\" *ngIf=\"!subscribedToChannel\" (click)=\"subscribeToChannel(channelUser)\">\r\n                <mat-icon>favorite_border</mat-icon>\r\n                <span>Subscribe</span>\r\n            </a>\r\n            <a class=\"subscribe-btn subscribed\" *ngIf=\"subscribedToChannel\"\r\n               (click)=\"subscribeToChannel(channelUser)\">\r\n                <mat-icon>favorite</mat-icon>\r\n                <span>Subscribed</span>\r\n            </a>\r\n        </div>\r\n        <div class=\"d-flex align-items-center\" *ngIf=\"channelUser.username === authUser.username\">\r\n            <button class=\"btn\" type=\"button\" id=\"edit-channel\" (click)=\"toggleEditMode()\" *ngIf=\"!editMode\">\r\n                <mat-icon>edit</mat-icon>\r\n                Edit channel\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" id=\"cancel-changes\" *ngIf=\"editMode\" (click)=\"toggleEditMode()\">\r\n                <mat-icon>cancel</mat-icon>\r\n                Cancel\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" id=\"save-channel-details\" *ngIf=\"editMode\" (click)=\"saveChanges()\">\r\n                <mat-icon>save</mat-icon>\r\n                Save changes\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {Base64ToFilePipe} from '@shared/pipes/base64-to-file.pipe';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {Router} from '@angular/router';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-channel-profile',\r\n    templateUrl: './channel-profile.component.html',\r\n    styleUrls: ['./channel-profile.component.scss']\r\n})\r\nexport class ChannelProfileComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n\r\n    profileChangedEvent: any;\r\n    coverChangedEvent: any;\r\n\r\n    subscribedToChannel = false;\r\n    subscribersCount = 0;\r\n\r\n    changingImage = false;\r\n    editMode = false;\r\n\r\n    channelForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    usersConnectionStatus = 'idle';\r\n\r\n    usersConnection;\r\n\r\n    srcCoverImg;\r\n    srcEditCoverImg;\r\n    showHidEditCoverImg = false;\r\n    fdCover = new FormData();\r\n    srcAvatarImg;\r\n    srcEditAvatarImg;\r\n    showHidEditAvatarImg = false;\r\n    fdAvatar = new FormData();\r\n\r\n\r\n    @Input() channelUser;\r\n    @Input() authUser;\r\n\r\n    constructor(\r\n        private usersService: UsersService,\r\n        private userStore: UserStoreService,\r\n        private base64ToFile: Base64ToFilePipe,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private channelService: ChannelsService,\r\n        private subject: SubjectService,\r\n        private usersConnectionsStore: UsersMessagesSubjectService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        public loader: LoaderService,\r\n        private fb: FormBuilder,\r\n        private uploadFile: VideoService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.authUser);\r\n        if (this.channelUser) {\r\n            this.initChannelForm();\r\n            this.checkChannelSubscription();\r\n            this.srcCoverImg = this.channelUser.channel.cover;\r\n            this.srcAvatarImg = this.channelUser.channel.avatar;\r\n        }\r\n        this.socketService.getSubscribeChanel().subscribe(dt => {\r\n            console.log(dt);\r\n        });\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Chanel Profile  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    initChannelForm() {\r\n        this.channelForm = this.fb.group({\r\n            id: [''],\r\n            avatar: [''],\r\n            cover: [''],\r\n            name: ['', Validators.required],\r\n            username: ['']\r\n        });\r\n\r\n        this.channelForm.patchValue({\r\n            name: this.channelUser.channel.name,\r\n            id: this.channelUser.channel.id,\r\n            username: this.channelUser.username,\r\n            avatar: this.channelUser.channel.avatar,\r\n            cover: this.channelUser.channel.cover\r\n        });\r\n    }\r\n\r\n    checkChannelSubscription() {\r\n        this.subscriptions.push(this.channelService.checkChannelSubscription({\r\n            user_id: this.authUser.id,\r\n            channel_id: this.channelUser.channel.id\r\n        }).subscribe(dt => {\r\n            this.subscribedToChannel = dt.status === 'Subscribed';\r\n            this.subscribersCount = dt.subscribers_count;\r\n        }));\r\n    }\r\n\r\n    coverChangeEvent(event: any) {\r\n        // console.log('++++++++');\r\n        // console.log(event);\r\n        this.coverChangedEvent = event;\r\n        this.fdCover = new FormData();\r\n        const reader = new FileReader();\r\n        reader.onload = (ev) => {\r\n            this.srcEditCoverImg = ev.target.result;\r\n            this.showHidEditCoverImg = true;\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n        this.fdCover.append('image', event.target.files[0]);\r\n        this.fdCover.append('belonging', 'chanel_cover_img');\r\n        this.fdCover.append('duration', '');\r\n    }\r\n\r\n    profileChangeEvent(event: any) {\r\n        this.profileChangedEvent = event;\r\n        this.fdAvatar = new FormData();\r\n        const reader = new FileReader();\r\n        reader.onload = (ev) => {\r\n            this.srcEditAvatarImg = ev.target.result;\r\n            this.showHidEditAvatarImg = true;\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n        this.fdAvatar.append('image', event.target.files[0]);\r\n        this.fdAvatar.append('belonging', 'chanel_avatar_img');\r\n        this.fdAvatar.append('duration', '');\r\n    }\r\n\r\n    detectImageChange() {\r\n        if (this.profileChangedEvent || this.coverChangedEvent) {\r\n            this.loader.dataLoading = false;\r\n            this.changingImage = false;\r\n            this.showHidEditCoverImg = false;\r\n            this.showHidEditAvatarImg = false;\r\n            // console.log('Avatar changed');\r\n            // console.log(this.changingImage);\r\n        }\r\n    }\r\n\r\n    removeCover() {\r\n        console.log(this.channelUser);\r\n        this.srcEditCoverImg = '';\r\n        this.srcEditAvatarImg = '';\r\n        this.fdCover = new FormData();\r\n        this.fdAvatar = new FormData();\r\n        this.srcCoverImg = '';\r\n        this.srcAvatarImg = '';\r\n        this.detectImageChange();\r\n        this.coverChangedEvent = null;\r\n        this.profileChangedEvent = null;\r\n        this.showHidEditAvatarImg = false;\r\n    }\r\n\r\n    removeAvatar() {\r\n        // this.channelUser.channel.avatar = '';\r\n        // this.srcCoverImg = this.channelUser.channel.cover;\r\n        this.srcAvatarImg = '';\r\n        this.srcAvatarImg = '';\r\n        this.channelForm.patchValue({avatar: this.channelUser.channel.avatar});\r\n    }\r\n\r\n    subscribeToChannel(user): void {\r\n        // this.connectWithUser(user);\r\n        this.subscriptions.push(this.channelService.subscribeToChannel({\r\n            user_id: this.authUser.id,\r\n            channel_id: user.channel.id\r\n        }).subscribe(dt => {\r\n            console.log(dt);\r\n            this.subscribedToChannel = dt.status === 'Subscribed';\r\n            this.subscribersCount = dt.subscribers_count;\r\n            this.subscriptions.push(this.channelService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n            }));\r\n            this.socketService.subscribeChanel({\r\n                from_user: user,\r\n                to_user: this.authUser,\r\n                msg: `You have successfully subscribed to Gold Subscription for ${user.username}'s channel!`\r\n            });\r\n        }));\r\n    }\r\n\r\n    connectWithUser(user) {\r\n        // this.usersConnectionStatus = 'connected';\r\n        this.socketService.subscribeChanel({\r\n            from_user: this.authUser,\r\n            to_user: user,\r\n            msg: `<strong>${this.authUser.username}</strong>\r\n                just subscribed to your Gold Subscription tier!`\r\n        });\r\n        const notifications = this.notificationsStore.allNotifications.filter(n => n._id !== user.id);\r\n        console.log(notifications);\r\n        this.notificationsStore.setInitialNotifications(notifications);\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.editMode = !this.editMode;\r\n        this.showHidEditCoverImg = false;\r\n        this.srcCoverImg = this.channelUser.channel.cover;\r\n        this.coverChangedEvent = null;\r\n    }\r\n\r\n    saveChanges() {\r\n        console.log('save changes!!!');\r\n        console.log(this.channelForm.value);\r\n        console.log('save changes!!!');\r\n\r\n        if (this.channelForm.valid) {\r\n            this.loader.dataLoading = true;\r\n            if (this.coverChangedEvent) {\r\n                this.uploadFile.uploadFile(this.fdCover, 'image').subscribe(dt => {\r\n                    this.channelForm.patchValue({\r\n                        cover: dt.path\r\n                    });\r\n                    console.log(this.channelForm.value);\r\n                    this.subscriptions.push(this.channelService.changeChannelDetails(this.channelForm.value).subscribe((data => {\r\n                        this.editMode = false;\r\n                        this.changeAuthUserInfo(data);\r\n                    })));\r\n                });\r\n            }\r\n\r\n            if (this.profileChangedEvent) {\r\n                this.uploadFile.uploadFile(this.fdAvatar, 'image').subscribe(dat => {\r\n                    this.channelForm.patchValue({\r\n                        avatar: dat.path\r\n                    });\r\n                    console.log(this.channelForm.value);\r\n                    this.subscriptions.push(this.channelService.changeChannelDetails(this.channelForm.value).subscribe((data => {\r\n                        this.editMode = false;\r\n                        this.changeAuthUserInfo(data);\r\n                    })));\r\n                });\r\n            }\r\n\r\n            if (!this.profileChangedEvent && !this.coverChangedEvent) {\r\n                console.log(this.channelForm.value);\r\n                this.subscriptions.push(this.channelService.changeChannelDetails(this.channelForm.value).subscribe((data => {\r\n                    this.editMode = false;\r\n                    this.changeAuthUserInfo(data);\r\n                })));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    changeAuthUserInfo(dt) {\r\n        localStorage.setItem('token', dt.token);\r\n        // this.authUser = this.getAuthUser.transform();\r\n        this.channelUser = this.authUser;\r\n        this.changingImage = false;\r\n\r\n        const token = dt.hasOwnProperty('token') ? dt?.token : '';\r\n        if (token) {\r\n            localStorage.setItem('token', token);\r\n            this.userStore.setAuthUser(token);\r\n        }\r\n\r\n\r\n        // this.loader.dataLoading = false;\r\n        // console.log(this.channelUser)\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<mat-spinner [diameter]=\"15\" *ngIf=\"loader.channelLoading.status==='loading'\"></mat-spinner>\r\n<div class=\"profile-list\">\r\n    <table>\r\n        <tr>\r\n            <td class=\"myProfile\" [routerLink]=\"'/users/'+authUser?.username\">My Profile</td>\r\n            <td class=\"myChannel\" [routerLink]=\"'/channels/'+authUser?.username\" [routerLinkActive]=\"'active'\">My Channel</td>\r\n        </tr>\r\n    </table>\r\n    <!--    <app-categories></app-categories>-->\r\n    <ng-container *ngIf=\"channelUser\">\r\n        <app-user-tags *ngIf=\"auth.loggedIn()\" (tagSelected)=\"getVideosByTag($event)\"></app-user-tags>\r\n        <app-channel-profile [channelUser]=\"channelUser\" [authUser]=\"authUser\"\r\n                             *ngIf=\"channelUser\"></app-channel-profile>\r\n        <div class=\"stocks-watchlist pWatchlist\">\r\n            <div class=\"profile-list user-profile-block\">\r\n                <ul class=\"nav nav-tabs\" id=\"channel-tabs-list\" role=\"tablist\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of allTabs;trackBy:trackByElement\">\r\n                        <a class=\"nav-link\" [class.active]=\"tab.link===activeTab.link\"\r\n                           [routerLink]=\"'/channels/'+this.passedUsername+'/tab/'+tab.link\"\r\n                           routerLinkActive=\"active\" id=\"{{tab.link}}-tab\"\r\n                           data-toggle=\"tab\" role=\"tab\"\r\n                           aria-controls=\"pWatch\"\r\n                           aria-selected=\"true\">{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <div class=\"loader-wrapper\">\r\n                    <div class=\"spinner-container\">\r\n                        <mat-spinner [diameter]=\"15\"\r\n                                     *ngIf=\"loader.stocksLoading.status==='loading'&& activeTab.name==='watchlist'\"></mat-spinner>\r\n                    </div>\r\n                </div>\r\n                <div class=\"search-wrapper\">\r\n                    <div class=\"left-side\" *ngIf=\"activeTab.name==='Videos'\">\r\n                        <div class=\"toggle-filters-btn\">\r\n                            <button class=\"filter-toggle-btn\"\r\n                                    *ngIf=\"activeTab.name!=='About' && activeTab.name!=='Watchlist'\" type=\"button\"\r\n                                    [class.filters-active]=\"showFilters\"\r\n                                    (click)=\"toggleFilters()\">\r\n                                <mat-icon>tune</mat-icon>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <app-search-videos-form class=\"child-inp search-video-channelPart\"\r\n                                                (search)=\"searchVideos($event)\"\r\n                                                *ngIf=\"activeTab.name!=='About' && activeTab.name!=='Watchlist'\"></app-search-videos-form>\r\n\r\n                    </div>\r\n                    <div class=\"right-side\" *ngIf=\"activeTab.name==='Watchlist'\">\r\n\r\n                        <div class=\"open-add-stock-modal\" *ngIf=\"activeTab.name==='Watchlist'\" (click)=\"openModal()\">\r\n                            <button type=\"button\">\r\n                                <mat-icon>add_circle_outline</mat-icon>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"watchlist-search d-\" *ngIf=\"activeTab.name!=='About'\"\r\n                             [class.bordered]=\"userStocks?.length > 0\">\r\n                            <app-search-stocks-form class=\"d-block search-stocks-component\"\r\n                                                    *ngIf=\"activeTab.name==='Watchlist' && userStocks?.length > 0\"\r\n                                                    [whiteForm]=\"true\" [returnSearchText]=\"true\"\r\n                                                    (search)=\"searchInUserStocks($event)\">\r\n                            </app-search-stocks-form>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--            <app-watchlist-tab *ngIf=\"activeTab.name === 'Watchlist'\" [channelUser]=\"channelUser\"></app-watchlist-tab>-->\r\n            <!--            <app-videos-tab *ngIf=\"activeTab.name === 'Videos'\" [channelUser]=\"channelUser\"-->\r\n            <!--                            [authUser]=\"authUser\"></app-videos-tab>-->\r\n            <!--            <app-playlists-tab *ngIf=\"activeTab.name === 'Playlists'\" [channelUser]=\"channelUser\"-->\r\n            <!--                               [authUser]=\"authUser\"></app-playlists-tab>-->\r\n            <!--            <app-about-tab *ngIf=\"activeTab.name === 'About'\" [channelUser]=\"channelUser\"></app-about-tab>-->\r\n            <!--            <app-people-tab *ngIf=\"activeTab.name === 'Contacts'\" [channelUser]=\"channelUser\" [authUser]=\"authUser\"></app-people-tab>-->\r\n\r\n\r\n            <router-outlet (activate)=\"onOutletLoaded($event, routerOutlet)\" #routerOutlet=\"outlet\"></router-outlet>\r\n\r\n\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"channel-not-found\" *ngIf=\"!channelUser && loader.channelLoading.status==='finished'\">\r\n        <p>Channel with such name is not found</p>\r\n    </div>\r\n</div>\r\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit, TemplateRef, ViewChild} from '@angular/core';\r\nimport {API_URL, CHANNEL_PAGE_TABS} from '@core/constants/global';\r\nimport {User} from '@shared/models/user';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {Base64ToFilePipe} from '@shared/pipes/base64-to-file.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {WatchlistTabComponent} from '@app/channels/show-channel/watchlist-tab/watchlist-tab.component';\r\nimport {VideosTabComponent} from '@app/channels/show-channel/videos-tab/videos-tab.component';\r\nimport {PlaylistsTabComponent} from '@app/channels/show-channel/playlists-tab/playlists-tab.component';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {StocksListsModalComponent} from '@shared/components/stocks-lists-modal/stocks-lists-modal.component';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {UpdateUserStocksPipe} from '@shared/pipes/update-user-stocks.pipe';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-show-channel',\r\n    templateUrl: './show-channel.component.html',\r\n    styleUrls: ['./show-channel.component.scss']\r\n})\r\nexport class ShowChannelComponent implements OnInit, OnDestroy {\r\n\r\n    authUser: CurrentUserData;\r\n\r\n    activeTab;\r\n    allTabs = CHANNEL_PAGE_TABS;\r\n\r\n    apiUrl = API_URL;\r\n\r\n\r\n    channelUser;\r\n    passedUsername;\r\n    passedTab;\r\n\r\n    searchVideosForm: FormGroup;\r\n\r\n\r\n    playlists = [];\r\n    editMode = false;\r\n\r\n    showFilters = false;\r\n    filters = null;\r\n\r\n    dataLoading = 'idle';\r\n\r\n    userStocks = [];\r\n    filteredStocks = [];\r\n    subscriptions = [];\r\n    trackByElement = trackByElement;\r\n\r\n    showChatBox = false;\r\n\r\n\r\n    @ViewChild(WatchlistTabComponent) watchListTab: WatchlistTabComponent;\r\n    @ViewChild(VideosTabComponent) videosTab: VideosTabComponent;\r\n    @ViewChild(PlaylistsTabComponent) playlistsTab: PlaylistsTabComponent;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        public router: Router,\r\n        private usersService: UsersService,\r\n        private base64ToFile: Base64ToFilePipe,\r\n        private route: ActivatedRoute,\r\n        private fb: FormBuilder,\r\n        private subjectService: SubjectService,\r\n        private channelService: ChannelsService,\r\n        private playlistsService: PlaylistsService,\r\n        private subject: SubjectService,\r\n        public auth: AuthService,\r\n        private dialog: MatDialog,\r\n        public loader: LoaderService,\r\n        private updateStocks: UpdateUserStocksPipe,\r\n        private stocksService: StocksService,\r\n        public usersMessagesStore: UsersMessagesSubjectService,\r\n        private toastr: ToastrService,\r\n        private chatService: ChatService,\r\n        private cdr: ChangeDetectorRef,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n        // console.log(this.route.snapshot)\r\n        this.passedUsername = this.route.snapshot.params.username;\r\n        this.passedTab = this.route.snapshot.params.tab;\r\n        // console.log(this.passedUsername)\r\n        this.searchVideosForm = this.fb.group({search: ['', Validators.required]});\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // localStorage.setItem('search', '');\r\n        this.activeTab = CHANNEL_PAGE_TABS.filter(tabs => tabs.name.toLowerCase() === this.passedTab)?.[0] || CHANNEL_PAGE_TABS[0];\r\n        this.getUserInfo();\r\n\r\n        this.subject.currentUserStocks.subscribe((dt: any) => {\r\n            this.userStocks = dt.stocks;\r\n            this.filteredStocks = this.userStocks;\r\n        });\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Show CHannel  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    toggleFilters() {\r\n        this.showFilters = !this.showFilters;\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n    }\r\n\r\n    getUserInfo() {\r\n        this.loader.channelLoading.status = 'loading';\r\n        const viewingOwnChannel = +(this.authUser.username === this.passedUsername);\r\n        if (this.passedUsername) {\r\n            this.usersService.getUserInfo({\r\n                username: this.passedUsername,\r\n                own_channel: viewingOwnChannel\r\n            }).subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    this.channelUser = dt;\r\n                }\r\n                this.loader.channelLoading.status = 'finished';\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    async changeActiveTab(tab) {\r\n        this.activeTab = tab;\r\n        this.showFilters = false;\r\n        await this.router.navigate([`/channels/show`], {\r\n            queryParams: {\r\n                tab: tab.name.toLowerCase(),\r\n                username: this.passedUsername\r\n            }\r\n        });\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n        if (this.activeTab.name === 'Videos') {\r\n            this.getUserInfo();\r\n        }\r\n    }\r\n\r\n    searchInUserStocks(e) {\r\n        localStorage.setItem('searchStock', e.search);\r\n        this.subjectService.setStocksSearch(e.search);\r\n    }\r\n\r\n    searchVideos(e?) {\r\n        localStorage.setItem('search', e.search);\r\n        this.showFilters = false;\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n        this.subject.setVideosSearch(e.search);\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(StocksListsModalComponent, {\r\n            maxWidth: '100vw',\r\n            maxHeight: '100vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            panelClass: 'stocks-lists-modal'\r\n        }).afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    isStockFollowed(stock) {\r\n        return !!this.userStocks.find(s => s.name === stock.name);\r\n    }\r\n\r\n    updateFollowedStocksList(stock) {\r\n        const result = this.updateStocks.transform(this.userStocks, stock, this.isStockFollowed(stock));\r\n        if (result) {\r\n            this.loader.stocksLoading.status = 'loading';\r\n            this.subscriptions.push(this.stocksService.updateFollowedStocks(\r\n                {user_id: this.authUser.id, ...{stocks: result}})\r\n                .subscribe(dt => {\r\n                    this.userStocks = dt?.user_stocks || [];\r\n                    this.loader.stocksLoading.status = 'finished';\r\n                    this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n                }));\r\n        }\r\n\r\n    }\r\n\r\n    onOutletLoaded(component, routerOutlet) {\r\n        this.passedTab = routerOutlet.activatedRoute.snapshot.routeConfig.path;\r\n        this.activeTab = CHANNEL_PAGE_TABS.filter(tabs => tabs.name.toLowerCase() === this.passedTab)?.[0] || CHANNEL_PAGE_TABS[0];\r\n        component.authUser = this.authUser;\r\n        component.channelUser = this.channelUser;\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"channel-subscribers-container\" *ngIf=\"channelSubscribers$|async as channelSubscribers\">\r\n    <ng-container *ngFor=\"let user of channelSubscribers?.subscribers\">\r\n        <div class=\"subscriber\">\r\n            <div class=\"left\">\r\n                <div class=\"img user-avatar\">\r\n                    <img class=\"avatar\" alt=\"user-avatar\" [src]=\"user.avatar|getImgPath: 'images'\">\r\n                </div>\r\n                <div class=\"text\">\r\n                    <div class=\"name\" [routerLink]=\"'/users/'+user?.username\">\r\n                        {{user.first_name + ' ' + user.last_name}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"right\">\r\n                <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\r\n                    <i class=\"fas fa-ellipsis-h\"></i>\r\n                </button>\r\n\r\n                <mat-menu #menu=\"matMenu\">\r\n                    <button mat-menu-item [disableRipple]=\"true\">\r\n                        Remove\r\n                    </button>\r\n                </mat-menu>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\n\r\n@Component({\r\n    selector: 'app-subscribers-tab',\r\n    templateUrl: './subscribers-tab.component.html',\r\n    styleUrls: ['./subscribers-tab.component.scss']\r\n})\r\nexport class SubscribersTabComponent implements OnInit {\r\n    subscriptions: Subscription[] = [];\r\n    channelSubscribers$: Observable<any>;\r\n\r\n    @Input() authUser;\r\n    @Input() channelUser;\r\n\r\n    constructor(\r\n        private channelsService: ChannelsService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getUserChannelSubscriptions();\r\n    }\r\n\r\n    getUserChannelSubscriptions() {\r\n        this.channelSubscribers$ = this.channelsService.getChannelSubscriptions({id: this.channelUser.id});\r\n    }\r\n\r\n}\r\n","<div class=\"subscriptions-container\">\r\n    <ul *ngIf=\"userChannels\">\r\n        <li *ngFor=\"let channel of userChannels.subscriptions;trackBy:trackByElement\" class=\"channel-item\">\r\n            <div class=\"left\">\r\n\r\n                <div class=\"thumbnail\">\r\n                    <!--                    <img class=src=\"assets/img/iconTV.png\" alt=\"\">-->\r\n                    <img class=\"channel-avatar\" [src]=\"channel.avatar|getImgPath:'images'\">\r\n                </div>\r\n                <div class=\"info\">\r\n                    <p class=\"name\" [routerLink]=\"'/channels/'+channel?.user?.username\">{{channel.name}}</p>\r\n                    <div class=\"shortened-details\">\r\n                        <p class=\"video-count\">{{channel.videos.length + (channel.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                    </div>\r\n                    <!--                    <p>{{channel.description}}</p>-->\r\n                </div>\r\n            </div>\r\n            <div class=\"right\">\r\n                <button class=\"subscribe-btn\" *ngIf=\"channel?.user?.username !== authUser?.username\"\r\n                        [class.subscribed]=\"checkIfSubscribed(channel)\"\r\n                        (click)=\"subscribeToChannel(channel)\">{{checkIfSubscribed(channel) ? 'Unsubscribe' : 'Subscribe'}}\r\n                </button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Subscription} from 'rxjs';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-subscriptions-tab',\r\n    templateUrl: './subscriptions-tab.component.html',\r\n    styleUrls: ['./subscriptions-tab.component.scss']\r\n})\r\nexport class SubscriptionsTabComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    @Input() channelUser;\r\n    userChannels;\r\n    apiUrl = API_URL;\r\n    trackByElement = trackByElement;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private channelsService: ChannelsService,\r\n        public auth: AuthService,\r\n        public router: Router,\r\n        private subject: SubjectService\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getUserChannelSubscriptions();\r\n    }\r\n\r\n    getUserChannelSubscriptions() {\r\n        this.subscriptions.push(this.channelsService.getSubscriptions({user_id: this.channelUser.id}).subscribe(dt => {\r\n            this.userChannels = dt;\r\n            // console.log(this.userChannels)\r\n        }));\r\n    }\r\n\r\n\r\n    checkIfSubscribed(channel) {\r\n        return channel.channel_subscribers.subscriber_id === this.authUser?.id;\r\n    }\r\n\r\n    subscribeToChannel(channel) {\r\n        this.subscriptions.push(this.channelsService.subscribeToChannel({\r\n            user_id: this.authUser.id,\r\n            channel_id: channel.id\r\n        }).subscribe(dt => {\r\n            this.subscriptions.push(this.channelsService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n                this.getUserChannelSubscriptions();\r\n            }));\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit {\r\n    @Input() channelUser;\r\n    @Input() authUser;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.channelUser)\r\n    }\r\n\r\n}\r\n","<h3>Subscribers</h3>\r\n<app-subscribers-tab [authUser]=\"authUser\" [channelUser]=\"channelUser\"></app-subscribers-tab>\r\n<h3>Subscriptions</h3>\r\n<app-subscriptions-tab [authUser]=\"authUser\" [channelUser]=\"channelUser\"></app-subscriptions-tab>\r\n","<div class=\"about-tab\">\r\n\r\n\r\n    <div class=\"info\">\r\n        <h2 *ngIf=\"channelUser.channel?.description\">Description</h2>\r\n\r\n        <div class=\"date\">\r\n            <span>Joined {{channelUser.channel.created_at|date: 'd MMM, yyyy'}}</span>\r\n            <button class=\"btn\" (click)=\"editModeOn()\"\r\n                    *ngIf=\"!editMode && authUser.username === channelUser.username\">Edit\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"description\" [hidden]=\"editMode\">\r\n        <p>{{channelUser.channel.description}}</p>\r\n    </div>\r\n\r\n    <div class=\"edit-form-controls\" [hidden]=\"!editMode\">\r\n        <form [formGroup]=\"aboutForm\" id=\"channel-about-form\">\r\n            <textarea rows=\"15\" formControlName=\"description\"></textarea>\r\n\r\n            <button class=\"save\" (click)=\"saveChannelDescription()\">Save</button>\r\n\r\n            <mat-error *ngIf=\"aboutForm.get('description').hasError('maxlength')\">\r\n                Not more than 100 characters please\r\n            </mat-error>\r\n        </form>\r\n    </div>\r\n</div>\r\n\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowChannelComponent} from '@app/channels/show-channel/show-channel.component';\r\nimport {WatchlistTabComponent} from '@app/channels/show-channel/watchlist-tab/watchlist-tab.component';\r\nimport {VideosTabComponent} from '@app/channels/show-channel/videos-tab/videos-tab.component';\r\nimport {PlaylistsTabComponent} from '@app/channels/show-channel/playlists-tab/playlists-tab.component';\r\nimport {PeopleTabComponent} from '@app/channels/show-channel/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/channels/show-channel/about-tab/about-tab.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'show',\r\n        component: ShowChannelComponent,\r\n        data: {\r\n            title: 'Channel page'\r\n        }\r\n    },\r\n    {\r\n        path: ':username',\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: ShowChannelComponent,\r\n                children: [\r\n                    {path: '', component: WatchlistTabComponent},\r\n                ]\r\n            },\r\n            {\r\n                path: 'tab',\r\n                component: ShowChannelComponent,\r\n                children: [\r\n                    {path: 'watchlist', component: WatchlistTabComponent},\r\n                    {path: 'videos', component: VideosTabComponent},\r\n                    {path: 'playlists', component: PlaylistsTabComponent},\r\n                    {path: 'contacts', component: PeopleTabComponent},\r\n                    {path: 'about', component: AboutTabComponent},\r\n                ]\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ChannelsRoutingModule {\r\n}\r\n","import {AfterViewInit, Component, Input, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {DESCRIPTION_CHARACTERS_LIMIT} from '@core/constants/global';\r\nimport {FixTextLineBreaksPipe} from '@shared/pipes/fix-text-line-breaks.pipe';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit, AfterViewInit {\r\n    aboutForm: FormGroup;\r\n    editMode = false;\r\n    authUser: CurrentUserData;\r\n    @Input('channelUser') channelUser;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private channelService: ChannelsService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private fixLineBreaks: FixTextLineBreaksPipe,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.aboutForm = this.fb.group({\r\n                description: ['', [Validators.required, Validators.maxLength(DESCRIPTION_CHARACTERS_LIMIT)]],\r\n                id: ['', Validators.required],\r\n                username: ['', Validators.required]\r\n            },\r\n        );\r\n        this.aboutForm.patchValue({\r\n            username: this.channelUser.username,\r\n            id: this.channelUser.channel.id,\r\n            description: this.fixLineBreaks.transform(this.channelUser.channel.description)\r\n            // ...this.channelUser.channel\r\n        });\r\n\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'About Tab  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    editModeOn() {\r\n        this.editMode = true;\r\n    }\r\n\r\n    saveChannelDescription() {\r\n        if (this.aboutForm.valid) {\r\n            this.channelService.saveDescription(this.aboutForm.value).subscribe(dt => {\r\n                this.channelUser = dt;\r\n                document.querySelector('.description').innerHTML = this.channelUser.channel.description;\r\n                this.editMode = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        document.querySelector('.description').innerHTML = this.channelUser.channel.description;\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {ChannelsRoutingModule} from './channels-routing.module';\r\nimport {ShowChannelComponent} from './show-channel/show-channel.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {ChannelProfileComponent} from './show-channel/channel-profile/channel-profile.component';\r\nimport {WatchlistTabComponent} from './show-channel/watchlist-tab/watchlist-tab.component';\r\nimport {VideosTabComponent} from './show-channel/videos-tab/videos-tab.component';\r\nimport {PlaylistsTabComponent} from './show-channel/playlists-tab/playlists-tab.component';\r\nimport {AboutTabComponent} from './show-channel/about-tab/about-tab.component';\r\nimport {PeopleTabComponent} from './show-channel/people-tab/people-tab.component';\r\nimport {SubscriptionsTabComponent} from '@app/channels/show-channel/people-tab/subscriptions-tab/subscriptions-tab.component';\r\nimport {SubscribersTabComponent} from '@app/channels/show-channel/people-tab/subscribers-tab/subscribers-tab.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowChannelComponent,\r\n        ChannelProfileComponent,\r\n        WatchlistTabComponent,\r\n        VideosTabComponent,\r\n        PlaylistsTabComponent,\r\n        AboutTabComponent,\r\n        PeopleTabComponent,\r\n        SubscriptionsTabComponent,\r\n        SubscribersTabComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ChannelsRoutingModule,\r\n        SharedModule,\r\n    ]\r\n})\r\nexport class ChannelsModule {\r\n}\r\n"]}