{"version":3,"sources":["webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.html","webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.ts","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.html","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.ts","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.html","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.ts","webpack:///src/app/videos/show-videos/show-videos.component.html","webpack:///src/app/videos/show-videos/show-videos.component.ts","webpack:///src/app/shared/components/video-js-player/video-js-player.component.html","webpack:///src/app/shared/components/video-js-player/video-js-player.component.ts","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.ts","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.ts","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.html","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.ts","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.html","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.ts","webpack:///src/app/videos/play-video/play-video.component.html","webpack:///src/app/videos/play-video/play-video.component.ts","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.html","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.html","webpack:///src/app/videos/add-video/add-video.component.html","webpack:///src/app/videos/clipz-video/clipz-video.component.html","webpack:///src/app/videos/videos-routing.module.ts","webpack:///src/app/videos/add-video/add-video.component.ts","webpack:///src/app/videos/clipz-video/clipz-video.component.ts","webpack:///src/app/videos/videos.module.ts"],"names":["ShowRegularListComponent","router","trackByElement","video","username","r","this","navigate","route","queryParams","params","users_vids","find","v","authUser","users_videos","saved","duration","moment","diff","created_at","Math","floor","asDays","name","tag","id","ShowPlaylistsListComponent","playlist","firstVideoId","playlist_id","ShowSearchResultsComponent","subject","channelsService","channel","subscribeToChannel","user_id","channel_id","subscribe","dt","getUserChannelSubscriptions","d","setUserSubscriptions","checkIfSubscribed","subscribers","filter","s","push","replace","ShowVideosComponent","videoService","_userInfoService","getExactParams","items","videos","playlists","channelsVideos","apiUrl","showTrending","showFilters","filters","video_type","filterStatus","subscriptions","loadingVideos","_getAuthInfo","search","snapshot","url","includes","selectedTag","searchChannelsVideos","getVideosList","_userInfo","data","console","log","transform","get","withPlaylists","trending","searchWithVideos","length","forEach","unsubscribe","VideoJsPlayerComponent","cdr","videoInit","options","videoUrl","document","getElementsByTagName","player","parts","videoData","split","m","parseInt","pop","registerPlugin","watermark","image","position","fadeTime","deregisterPlugin","on","err","error","detectChanges","initPlayer","VideoCommentsFormComponent","fb","fixLineBreaks","inputFocused","isSubmitted","originalFormattedComment","editComment","selectedComment","selectedReply","reply","isReplyComment","reply2Reply","parentComment","commentAdded","commentUpdated","cancelled","placeholderText","getPlaceholderText","videoCommentsForm","group","from_id","comment","required","video_id","to_user_id","to_comment_id","to_reply_id","is_reply","replyUsername","user","patchValue","valid","commentCtrl","value","updateVideoComment","emit","reset","addVideoComment","substring","lastIndexOf","onCancel","saveComment","SingleCommentComponent","getAuthUser","toggleReplies","selectComment","likeDislikeComment","c","author_id","len","replies","e","liked","foundInReactors","reactors","users_comments","reaction","first_name","last_name","navigateByUrl","skipLocationChange","then","openChannelPage","likeDislikeCommentFn","selectCommentFn","CommentActionsComponent","commentSelected","remove","removeComment","VideoCommentsListComponent","dialog","showReplyForm","showReplyToReplyForm","showReplies","editReply","videoComments","cm","replyBtnClicked","replyCommentSelected","open","afterClosed","confirmed","removeVideoComment","buildParams","updateCommentLikes","comm","comment_id","disliked","likes","dislikes","conn","checkUserCommentConnection","max","VideoDetailsFormComponent","toastr","formReady","separatorKeysCodes","dropzoneConfig","videoDetailsForm","maxLength","tags","thumbnail","event","input","trim","index","indexOf","splice","thumbnailFile","target","files","formData","FormData","field","append","JSON","stringify","removeImage","onAddedFile","changeThumbnail","add","saveDetails","VideoSuggestionsComponent","playlistsService","playlistOpened","videoSuggestions","isProduction","environment","production","urlParams","videoId","playlistId","getById","playlistData","limit","removeVideoFromPlaylist","oldVideoIndex","nextVideo","openVideoPage","PlayVideoComponent","auth","loader","titleService","userVideoConnection","viewed","videoJSPlayerOptions","showTagsForm","isSmallScreen","commentsRefreshed","commentsLoading","getVideoById","setTitle","loggedIn","checkUserVideoConnection","updateViewsCount","indexUserTags","getComments","u","updateViews","action","getLikesState","updateLikes","saveVideo","saveVideoDetails","getVideoComments","count","subscribers_count","width","height","shareUrl","window","location","href","ShowSavedVideosComponent","showSaved","getUserSavedVideos","userVideos","VideojsTestComponent","config","controls","bigPlayButton","fluid","plugins","record","audio","debug","getElementById","msg","VERSION","getPluginVersion","RecordRTC","recordedData","routes","path","component","AddVideoComponent","sanitizer","isValidUrl","pastedText","clipboardData","getData","constructSafeUrl","text","isTikTokVideo","isYoutubeVideo","transformUrlForYoutube","p","match","safeUrl","bypassSecurityTrustResourceUrl","getUrl","checkUrl","pathMatch","title","canActivate","ClipzVideoComponent","VideosRoutingModule","forChild","VideosModule"],"mappings":"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","file":"x","sourcesContent":["<div id=\"regular-video-list-container\">\r\n    <div class=\"video-container\" *ngFor=\"let video of items.videos; trackBy: trackByElement\">\r\n        <div class=\"thumbnail\">\r\n            <img [src]=\"video.thumbnail|getImgPath:'images'\" (click)=\"openVideoPage(video, video.user.username)\">\r\n            <span class=\"live-now\" *ngIf=\"video.status==='live'\">Live now</span>\r\n            <span class=\"duration\" *ngIf=\"video.status!=='live'\">{{video.duration}}</span>\r\n        </div>\r\n        <div class=\"details\">\r\n            <h4 class=\"title\">{{video.name}}</h4>\r\n            <div class=\"shortened-details\">\r\n                <div class=\"user-avatar avatarClass\">\r\n                    <img class=\"avatar\" [src]=\"video.channel.avatar|getImgPath: 'images'\">\r\n                </div>\r\n                <span class=\"channel-name\" [routerLink]=\"'/channels/'+video.user.username\">\r\n                    {{video.user.channel.name}}\r\n                </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? video.participants + ' watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n            </div>\r\n            <p class=\"shortened-description\">\r\n                {{video.description}}\r\n            </p>\r\n\r\n            <div class=\"saved-video\" *ngIf=\"checkIfSavedByCurrentUser(video)\">\r\n                <mat-icon>turned_in</mat-icon>\r\n                <span>Saved</span>\r\n            </div>\r\n\r\n            <div class=\"tags\">\r\n                <ul>\r\n                    <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                        <span>{{tag.name}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"is-new-video\" *ngIf=\"checkIfNewVideo(video)\">\r\n                <span class=\"new\">New</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {Router} from '@angular/router';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'app-show-regular-list',\r\n    templateUrl: './show-regular-list.component.html',\r\n    styleUrls: ['./show-regular-list.component.scss']\r\n})\r\nexport class ShowRegularListComponent implements OnInit {\r\n\r\n    @Input() items;\r\n    @Input() authUser;\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    checkIfSavedByCurrentUser(video) {\r\n        return video.users_vids.find(v => v.username === this.authUser?.username && v.users_videos.saved);\r\n    }\r\n\r\n    checkIfNewVideo(video) {\r\n        const duration = moment.duration(moment().diff(video.created_at));\r\n        return Math.floor(duration.asDays()) < 7;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-container\" *ngFor=\"let playlist of items.playlists\">\r\n    <ng-container *ngIf=\"playlist.videos.length > 0\">\r\n        <div class=\"thumbnail-container\" (click)=\"openPlaylistPage(playlist, playlist.videos[0].id)\">\r\n            <div class=\"thumbnail\">\r\n                <div class=\"short-details\">\r\n                    <mat-icon>playlist_add_check</mat-icon>\r\n                    <p class=\"name\">{{playlist.name}}</p>\r\n                    <p class=\"video-count\">{{playlist.videos.length + (playlist.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                </div>\r\n                <img [src]=\"playlist.thumbnail|getImgPath\">\r\n            </div>\r\n            <div class=\"fake-bg thumbnail\"></div>\r\n        </div>\r\n        <div class=\"details\">\r\n\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-show-playlists-list',\r\n    templateUrl: './show-playlists-list.component.html',\r\n    styleUrls: ['./show-playlists-list.component.scss']\r\n})\r\nexport class ShowPlaylistsListComponent implements OnInit {\r\n\r\n    @Input('items') items;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openPlaylistPage(playlist, firstVideoId) {\r\n        const route = 'videos/play';\r\n        const params = {id: firstVideoId, playlist_id: playlist.id};\r\n        await this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div id=\"search-results-container\">\r\n    <ng-container *ngFor=\"let channel of channelsVideos\">\r\n        <div class=\"channel-item\">\r\n            <div class=\"thumbnail\">\r\n                <img class=\"newAvatar\" [src]=\"channel.avatar|getImgPath:'avatars'\"\r\n                     (click)=\"openChannelPage(channel.user?.username)\">\r\n            </div>\r\n            <div class=\"info\">\r\n                <div class=\"infoPart\">\r\n                    <p class=\"channel-name\" (click)=\"openChannelPage(channel?.user?.username)\">\r\n                        {{channel.name}}\r\n                    </p>\r\n                    <div class=\"shortened-details\">\r\n                        <p class=\"video-count video-countStyle\">\r\n                            {{channel.videos.length + (channel.videos.length === 1 ? ' video' : ' videos')}}\r\n                        </p>\r\n                    </div>\r\n                    <p [innerHTML]=\"getDesc(channel.description)\"></p>\r\n                </div>\r\n                <button class=\"btn subscribe-to-channel-btn\" *ngIf=\"channel?.user?.username !== authUser?.username\"\r\n                        [class.subscribed]=\"checkIfSubscribed(channel)\"\r\n                        (click)=\"subscribeToChannel(channel)\">{{checkIfSubscribed(channel) ? 'Subscribed' : 'Subscribe'}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"video-container\" *ngFor=\"let video of channel.videos\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, channel.user.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\" [routerLink]=\"'/channels/'+channel.user.username\">{{channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\" [innerHTML]=\"video.description\">\r\n                </p>\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-search-results',\r\n    templateUrl: './show-search-results.component.html',\r\n    styleUrls: ['./show-search-results.component.scss']\r\n})\r\nexport class ShowSearchResultsComponent implements OnInit {\r\n\r\n    @Input('channelsVideos') channelsVideos;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        await this.router.navigate(['channels/' + username]);\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    subscribeToChannel(channel) {\r\n        this.channelsService.subscribeToChannel({user_id: this.authUser.id, channel_id: channel.id}).subscribe(dt => {\r\n            this.channelsService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n                if (this.checkIfSubscribed(channel)) {\r\n                    channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id);\r\n                } else {\r\n                    channel.subscribers.push(this.authUser);\r\n                }\r\n                // console.log(channel.subscribers)\r\n                // channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id).concat([this.authUser]);\r\n                // console.log(channel.subscribers)\r\n\r\n                // this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n            });\r\n        });\r\n    }\r\n\r\n    checkIfSubscribed(channel) {\r\n        return channel.subscribers.find(s => s.id === this.authUser?.id);\r\n    }\r\n\r\n    getDesc(d) {\r\n        return d?.replace(/<br\\s*[\\/]?>/gi, '\\n');\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"all-videos\">\r\n    <button class=\"filter-toggle-btn\" *ngIf=\"isFiltersShown()\" (click)=\"showFilters = !showFilters\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Filters</span>\r\n    </button>\r\n    <app-video-filters (filter)=\"getFilteredList($event)\" *ngIf=\"showFilters\"></app-video-filters>\r\n    <div id=\"videos-list\">\r\n        <mat-spinner [diameter]=\"20\" *ngIf=\"loadingVideos\"></mat-spinner>\r\n        <ng-container *ngIf=\"!search && !loadingVideos\">\r\n            <app-show-regular-list [items]=\"items\" [authUser]=\"authUser\"></app-show-regular-list>\r\n            <app-show-playlists-list [items]=\"items\" [authUser]=\"authUser\"></app-show-playlists-list>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"search && !loadingVideos\">\r\n            <app-show-search-results [channelsVideos]=\"channelsVideos\" [authUser]=\"authUser\"></app-show-search-results>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"search && channelsVideos?.length === 0\">\r\n        <span class=\"error\">No results found</span>\r\n    </div>\r\n</div>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-show-videos',\r\n    templateUrl: './show-videos.component.html',\r\n    styleUrls: ['./show-videos.component.scss']\r\n})\r\nexport class ShowVideosComponent implements OnInit, OnDestroy {\r\n    items = {videos: [], playlists: []};\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    selectedTag;\r\n    authUser: CurrentUserData;\r\n    showTrending = false;\r\n    showFilters = false;\r\n    filters = {video_type: 'videos'};\r\n    filterStatus = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n    loadingVideos = false;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private _userInfoService: UserInfoService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n\r\n        this.subscriptions.push(\r\n            this.route.queryParams.subscribe(d => {\r\n                this.search = this.route.snapshot.queryParams?.search;\r\n                this.showTrending = this.router.url.includes('videos');\r\n                this.selectedTag = this.route.snapshot.queryParams?.tag;\r\n                if (this.search) {\r\n                    this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n                } else {\r\n                    this.getVideosList({search: this.search, filters: this.filters, tag: this.selectedTag});\r\n                }\r\n            }));\r\n\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Show videos  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getFilteredList(filters = {video_type: 'videos'}) {\r\n        this.filters = filters;\r\n        this.filterStatus = 'applied';\r\n        if (this.search) {\r\n            this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n        } else {\r\n            this.getVideosList({filters: this.filters});\r\n        }\r\n    }\r\n\r\n    getVideosList(params) {\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.videoService.get({\r\n            withPlaylists: !this.showTrending ? 1 : 0,\r\n            trending: this.showTrending ? 1 : 0,\r\n            ...params\r\n        }).subscribe(dt => {\r\n            this.items = dt;\r\n        });\r\n    }\r\n\r\n    searchChannelsVideos(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n        this.loadingVideos = true;\r\n\r\n        this.channelsService.searchWithVideos({user_id: this.authUser?.id, ...params}).subscribe(dt => {\r\n            this.loadingVideos = false;\r\n            this.channelsVideos = dt;\r\n        });\r\n    }\r\n\r\n\r\n    isFiltersShown() {\r\n        return this.items.videos?.length > 0 ||\r\n            (this.search && this.channelsVideos.find(v => v.videos.length > 0))\r\n            || this.filterStatus === 'applied' && !this.loadingVideos;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n","<div class=\"container\" *ngIf=\"videoUrl\">\r\n    <div class=\"loading-spinner\" *ngIf=\"videoInit==='pending'\">\r\n        <mat-spinner [diameter]=\"15\"></mat-spinner>\r\n        <span style=\"margin-left:10px\">Loading video</span>\r\n    </div>\r\n    <div [hidden]=\"videoInit!=='finished'\">\r\n        <video id=\"player\" class=\"video-js\" controls preload=\"auto\" autoplay data-setup='{}'>\r\n            <source [src]=\"videoUrl\" type = \"video/mpeg\">\r\n            <source [src]=\"videoUrl\" type=\"video/mp4\">\r\n            <source [src]=\"videoUrl\" type = \"video/x-matroska\">\r\n            <p class=\"vjs-no-js\">\r\n                To view this video please enable JavaScript, and consider upgrading to a web browser that\r\n                <a href=\"https://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a>\r\n            </p>\r\n        </video>\r\n    </div>\r\n</div>\r\n","import {AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport videojs from 'video.js';\r\nimport watermark from 'videojs-watermark';\r\n\r\n@Component({\r\n    selector: 'app-video-js-player',\r\n    templateUrl: './video-js-player.component.html',\r\n    styleUrls: ['./video-js-player.component.scss']\r\n})\r\nexport class VideoJsPlayerComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    @Input() videoUrl;\r\n    // videoUrl = 'http://localhost:3001/uploads/videos/Andrea_Corr_Shame_On_You_HD.mp4';\r\n    videoInit = 'idle';\r\n\r\n    options = VIDEOJS_PLAYER_OPTIONS;\r\n    player: videojs.Player;\r\n\r\n    constructor(\r\n        private cdr: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.videoUrl);\r\n    }\r\n\r\n    initPlayer() {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoInit = 'pending';\r\n        this.player = videojs(video, this.options, () => {\r\n            this.player.duration = () => {\r\n                const parts = this.videoData.duration.split(':');\r\n                let s = 0;\r\n                let m = 1;\r\n\r\n                while (parts.length > 0) {\r\n                    s += m * parseInt(parts.pop(), 10);\r\n                    m *= 60;\r\n                }\r\n                return s;\r\n            };\r\n\r\n            videojs.registerPlugin('watermark', watermark);\r\n            this.player.watermark({\r\n                image: 'assets/img/logo.png',\r\n                position: 'bottom-right',\r\n                fadeTime: null\r\n            });\r\n\r\n            videojs.deregisterPlugin('watermark');\r\n\r\n        });\r\n\r\n        this.player.on('loadedmetadata', () => {\r\n            this.videoInit = 'finished';\r\n        });\r\n\r\n        this.player.on('error', (err) => {\r\n            const error = this.player.error();\r\n            this.videoInit = 'finished';\r\n        });\r\n        this.cdr.detectChanges();\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initPlayer();\r\n    }\r\n\r\n}\r\n","import {AfterViewInit, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FixTextLineBreaksPipe} from '@shared/pipes/fix-text-line-breaks.pipe';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-form',\r\n    templateUrl: './video-comments-form.component.html',\r\n    styleUrls: ['./video-comments-form.component.scss']\r\n})\r\nexport class VideoCommentsFormComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    videoCommentsForm: FormGroup;\r\n    inputFocused = false;\r\n    authUser: CurrentUserData;\r\n    isSubmitted = false;\r\n    replyUsername;\r\n    originalFormattedComment = '';\r\n\r\n\r\n    @Input() editComment = false;\r\n    @Input() selectedComment = null;\r\n    @Input() selectedReply = null;\r\n    @Input() reply = false;\r\n    @Input() isReplyComment = false;\r\n    @Input() reply2Reply = false;\r\n    @Input() parentComment = null;\r\n    @ViewChild('cEditable') cEditable;\r\n    @Output('added') commentAdded = new EventEmitter();\r\n    @Output('updated') commentUpdated = new EventEmitter();\r\n    @Output('cancelled') cancelled = new EventEmitter();\r\n\r\n    placeholderText;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private videoService: VideoService,\r\n        private _userInfoService: UserInfoService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n        private fixLineBreaks: FixTextLineBreaksPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        // this.authUser = this.getAuthUser.transform();\r\n        this.placeholderText = this.getPlaceholderText();\r\n\r\n        this.videoCommentsForm = this.fb.group({\r\n            id: [''],\r\n            from_id: [this.authUser.id],\r\n            comment: ['', Validators.required],\r\n            video_id: [this.videoData.id],\r\n            to_user_id: [0],\r\n            to_comment_id: [0],\r\n            to_reply_id: [0],\r\n            is_reply: [0]\r\n        });\r\n\r\n        if (this.reply2Reply) {\r\n            if (this.authUser.id !== this.selectedReply.from_id) {\r\n                this.replyUsername = '@' + this.selectedReply?.user.username + ' ';\r\n                this.videoCommentsForm.patchValue({comment: this.replyUsername});\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Vido-comments-form  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    saveComment() {\r\n        this.isSubmitted = true;\r\n        if (this.videoCommentsForm.valid) {\r\n            // Reply add\r\n            if (this.reply) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n                // Reply edit\r\n            } else if (this.isReplyComment) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.parentComment.id,\r\n                    to_user_id: this.parentComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n            } else if (this.reply2Reply) {\r\n                const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_reply_id: this.selectedReply.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    comment: reply2Reply,\r\n                    is_reply: 1\r\n                });\r\n            }\r\n\r\n            // Comment & reply actions\r\n            if (this.editComment) {\r\n\r\n                if (this.parentComment) {\r\n                    const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                    const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                    this.videoCommentsForm.patchValue({comment: reply2Reply});\r\n                }\r\n\r\n\r\n                this.videoService.updateVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.commentUpdated.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            } else {\r\n\r\n                this.videoService.addVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.inputFocused = false;\r\n                    this.commentAdded.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.inputFocused = false;\r\n        this.videoCommentsForm.get('comment').reset();\r\n        if (this.editComment || this.reply || this.reply2Reply) {\r\n            this.cancelled.emit();\r\n        }\r\n    }\r\n\r\n\r\n    getPlaceholderText() {\r\n        return 'Add a public ' + (this.reply ? 'reply' : 'comment') + '...';\r\n    }\r\n\r\n    get commentCtrl() {\r\n        return this.videoCommentsForm.get('comment');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.editComment) {\r\n            const comment = this.selectedComment.comment;\r\n            if (this.parentComment) {\r\n                this.replyUsername = comment.substring(\r\n                    comment.lastIndexOf('@'),\r\n                    comment.lastIndexOf(' ')\r\n                );\r\n            }\r\n            this.videoCommentsForm.patchValue({\r\n                comment: this.fixLineBreaks.transform(comment.replace(/<[^>]*>?/gm, '')),\r\n                id: this.selectedComment.id\r\n            });\r\n            this.inputFocused = true;\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"videoCommentsForm\" class=\"w-100\">\r\n    <div class=\"d-flex mt-3 comment-input-container\">\r\n        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath:'images'\">\r\n        <input type=\"hidden\" formControlName=\"comment\">\r\n        <mat-form-field floatLabel=\"never\">\r\n            <textarea matInput cdkTextareaAutosize [placeholder]=\"placeholderText\" class=\"comment-input\" #cEditable\r\n                      (focus)=\"inputFocused = true\"\r\n                      formControlName=\"comment\"></textarea>\r\n        </mat-form-field>\r\n    </div>\r\n    <div class=\"d-flex justify-content-end buttonsPart\">\r\n        <div [hidden]=\"!inputFocused\">\r\n            <button class=\"btn text-btn\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n            <button (click)=\"saveComment()\" type=\"button\" [class.green-bg]=\"videoCommentsForm.valid\"\r\n                    class=\"ml-3 px-2 btn enter replyBtn\">{{reply ? 'Reply' : 'Comment'}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","<div class=\"d-flex comments_part_below\">\r\n    <img class=\"avatar avatar-comments\" [src]=\"comment?.user.avatar | getImgPath:'images'\">\r\n    <div class=\"details\">\r\n        <div class=\"d-flex align-items-center mb-2 detailsPart\">\r\n            <div class=\"mr-3 user-name\" [class.author.px-2]=\"isAuthor(comment)\"\r\n                 (click)=\"openChannelPage(comment?.user?.username)\">\r\n                {{comment?.user?.username}} <i class=\"fas fa-check-circle ml-1\" *ngIf=\"isAuthor(comment)\"></i>\r\n            </div>\r\n            <div class=\"comment-date\">{{comment.created_at | dateFromNow}}</div>\r\n        </div>\r\n\r\n        <div class=\"comment-text mb-2\" [innerHTML]=\"comment.comment\">\r\n        </div>\r\n        <div class=\"likes-reply\">\r\n            <div class=\"comments-like mb-2\">\r\n                <i class=\"fa fa-thumbs-up mr-1\" (click)=\"likeDislikeCommentFn(comment)\"\r\n                   [class.liked]=\"checkUserCommentConnection(comment)?.liked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'liked') }} </span>\r\n                <i class=\"fa fa-thumbs-down ml-3 mr-1\" (click)=\"likeDislikeCommentFn(comment, false)\"\r\n                   [class.disliked]=\"checkUserCommentConnection(comment)?.disliked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'disliked') }} </span>\r\n            </div>\r\n            <div class=\"reply-container\">\r\n                <span class=\"reply\" (click)=\"selectCommentFn(comment)\">Reply</span>\r\n                <app-video-comments-form [videoData]=\"videoData\"\r\n                                         [reply]=\"reply\"\r\n                                         *ngIf=\"showReplyForm && (comment.id===selectedComment?.id ||comment.id === selectedReply?.id)\"\r\n                                         [selectedComment]=\"selectedComment\"\r\n                                         [reply2Reply]=\"reply2Reply\"\r\n                                         [selectedReply]=\"selectedReply\"\r\n                                         (added)=\"commentAddedFn($event)\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n            </div>\r\n        </div>\r\n        <p class=\"replies-toggler mt-3\" *ngIf=\"comment?.replies?.length > 0\"\r\n           (click)=\"toggleRepliesFn(comment)\">\r\n            <mat-icon>expand_{{showReplies && selectedComment === comment ? 'more' : 'less'}}</mat-icon>\r\n            <span>{{getRepliesTogglerText(comment)}}</span>\r\n        </p>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-single-comment',\r\n    templateUrl: './single-comment.component.html',\r\n    styleUrls: ['./single-comment.component.scss']\r\n})\r\nexport class SingleCommentComponent implements OnInit {\r\n\r\n    @Input() comment;\r\n    @Input() videoData;\r\n    @Input() showReplyForm;\r\n    @Input() selectedComment;\r\n    @Input() selectedReply;\r\n    @Input() showReplies;\r\n    @Input() reply;\r\n    @Input() reply2Reply;\r\n\r\n    @Output() toggleReplies = new EventEmitter();\r\n    @Output() commentAdded = new EventEmitter();\r\n    @Output() selectComment = new EventEmitter();\r\n    @Output() likeDislikeComment = new EventEmitter();\r\n\r\n    authUser;\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    getRepliesTogglerText(c) {\r\n        const len = c.replies.length;\r\n        return `View ${len + (len > 1 ? ' replies' : ' reply')}`;\r\n    }\r\n\r\n    selectCommentFn(c) {\r\n        this.selectComment.emit(c);\r\n    }\r\n\r\n    commentAddedFn(e) {\r\n        this.commentAdded.emit(e);\r\n    }\r\n\r\n    toggleRepliesFn(c) {\r\n        this.toggleReplies.emit(c);\r\n    }\r\n\r\n    likeDislikeCommentFn(c, liked = true) {\r\n        this.likeDislikeComment.emit({c, liked});\r\n    }\r\n\r\n    checkUserCommentConnection(c) {\r\n        const foundInReactors = c.reactors.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n    getFullName(data) {\r\n        return data.first_name + ' ' + data.last_name;\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate(['channels/' + username])\r\n        );\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-comment-actions',\r\n    templateUrl: './comment-actions.component.html',\r\n    styleUrls: ['./comment-actions.component.scss']\r\n})\r\nexport class CommentActionsComponent implements OnInit {\r\n    authUser;\r\n\r\n    @Input() comment;\r\n    @Output() commentSelected = new EventEmitter();\r\n    @Output() remove = new EventEmitter();\r\n\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n\r\n\r\n    selectComment(c) {\r\n        this.commentSelected.emit(c);\r\n    }\r\n\r\n    removeComment(c) {\r\n        this.remove.emit(c);\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"more-actions\">\r\n\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"selectComment(comment)\">\r\n            <mat-icon>edit</mat-icon>\r\n            <span>Edit</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"removeComment(comment)\">\r\n            <mat-icon>delete</mat-icon>\r\n            <span>Delete</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","<div class=\"comments-container\" [hidden]=\"videoComments.length === 0\">\r\n    <ng-container *ngFor=\"let c of videoComments\">\r\n        <div class=\"comment d-flex mt-4\" *ngIf=\"isCommentShown(c)\">\r\n            <div class=\"left-group\" [class.w-100]=\"editComment\">\r\n                <app-single-comment [comment]=\"c\" [videoData]=\"videoData\" [showReplyForm]=\"showReplyForm\"\r\n                                    [showReplies]=\"showReplies\" [selectedComment]=\"selectedComment\"\r\n                                    class=\"w-100\" [reply]=\"true\" (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                    (commentAdded)=\"commentAdded($event)\" (toggleReplies)=\"toggleReplies($event)\"\r\n                                    (selectComment)=\"selectComment($event, true)\"\r\n                                    [selectedReply]=\"selectedReply\"\r\n                                    [reply2Reply]=\"true\">\r\n                </app-single-comment>\r\n                <div class=\"replies\" [hidden]=\"!isReplyShown(c)\">\r\n                    <ng-container *ngFor=\"let reply of c.replies\">\r\n                        <div class=\"d-flex reply mt-4\" *ngIf=\"reply.id!==selectedReply?.id || !editReply\">\r\n                            <div class=\"left-group\">\r\n                                <app-single-comment [comment]=\"reply\" [videoData]=\"videoData\"\r\n                                                    [showReplyForm]=\"showReplyToReplyForm\"\r\n                                                    [showReplies]=\"showReplies\"\r\n                                                    [selectedComment]=\"selectedComment\"\r\n                                                    [selectedReply]=\"selectedReply\" [reply2Reply]=\"true\"\r\n                                                    (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                                    (commentAdded)=\"commentAdded($event)\" class=\"w-100\"\r\n                                                    (selectComment)=\"replyToReply(c, reply)\">\r\n                                </app-single-comment>\r\n                            </div>\r\n                            <div class=\"right-group\">\r\n                                <app-comment-actions [comment]=\"reply\"\r\n                                                     *ngIf=\"isMyComment(reply) && !editReply\"\r\n                                                     (remove)=\"removeComment($event)\"\r\n                                                     (commentSelected)=\"selectComment($event, false,true)\">\r\n                                </app-comment-actions>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedReply\"\r\n                                                 class=\"w-100\" [isReplyComment]=\"true\" [parentComment]=\"c\"\r\n                                                 *ngIf=\"editReply && reply.id===selectedReply.id\"\r\n                                                 (updated)=\"getUpdatedComments($event)\"\r\n                                                 (cancelled)=\"editReply = false\"\r\n                                                 [videoData]=\"videoData\">\r\n                        </app-video-comments-form>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-group\">\r\n                <app-comment-actions [comment]=\"c\" *ngIf=\"isMyComment(c) && !editComment\"\r\n                                     (remove)=\"removeComment($event)\"\r\n                                     (commentSelected)=\"selectComment($event)\">\r\n                </app-comment-actions>\r\n            </div>\r\n        </div>\r\n        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedComment\"\r\n                                 class=\"edit-comment-form w-100\"\r\n                                 *ngIf=\"editComment && c.id===selectedComment.id\"\r\n                                 (updated)=\"getUpdatedComments($event)\" (cancelled)=\"editComment = false\"\r\n                                 [videoData]=\"videoData\">\r\n        </app-video-comments-form>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {Subscription} from 'rxjs';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-list',\r\n    templateUrl: './video-comments-list.component.html',\r\n    styleUrls: ['./video-comments-list.component.scss'],\r\n    // changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VideoCommentsListComponent implements OnInit, OnDestroy {\r\n\r\n    authUser: CurrentUserData;\r\n    selectedComment;\r\n    subscriptions: Subscription[] = [];\r\n    showReplyForm = false;\r\n    showReplyToReplyForm = false;\r\n    showReplies = false;\r\n    editReply = false;\r\n    selectedReply;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input() videoData;\r\n    @Input() videoComments = [];\r\n    @Input() editComment = false;\r\n\r\n    constructor(\r\n        private subject: SubjectService,\r\n        private videoService: VideoService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private _userInfoService: UserInfoService,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Video-comments-list  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    isMyComment(c) {\r\n        return c.user.id === this.authUser.id;\r\n    }\r\n\r\n    getUpdatedComments(e) {\r\n        this.videoComments = e;\r\n        this.editComment = false;\r\n        this.editReply = false;\r\n        this.selectedComment = e.find(cm => cm.id === this.selectedComment?.id);\r\n        this.selectedReply = e.find(c => c.id === this.selectedReply?.id);\r\n    }\r\n\r\n    selectComment(c, replyBtnClicked = false, replyCommentSelected = false) {\r\n        if (!replyBtnClicked && !replyCommentSelected) {\r\n            this.editComment = !this.editComment;\r\n            this.showReplyForm = !this.editComment;\r\n            this.selectedComment = c;\r\n        } else if (replyCommentSelected) {\r\n            this.editReply = true;\r\n            this.selectedReply = c;\r\n        } else {\r\n            this.showReplyForm = this.selectedComment !== c || !this.showReplyForm;\r\n            this.selectedComment = c;\r\n            this.selectedReply = c;\r\n        }\r\n    }\r\n\r\n    replyToReply(c, r) {\r\n        this.showReplyToReplyForm = this.selectedReply !== r || !this.showReplyToReplyForm;\r\n        this.selectedComment = c;\r\n        this.selectedReply = r;\r\n    }\r\n\r\n\r\n    removeComment(c) {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.videoService.removeVideoComment({\r\n                    user_id: this.authUser.id,\r\n                    id: c.id,\r\n                    video_id: c.video_id\r\n                }).subscribe(dt => {\r\n                    this.videoComments = dt;\r\n                    this.selectedComment = dt.find(cm => cm.id === this.selectedComment?.id);\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.videoComments = e;\r\n        this.showReplyForm = false;\r\n        this.showReplyToReplyForm = false;\r\n        this.showReplies = true;\r\n        this.selectedComment = e.find(c => c.id === this.selectedComment.id);\r\n    }\r\n\r\n    toggleReplies(c) {\r\n        this.showReplies = !this.showReplies;\r\n        this.selectedComment = c;\r\n    }\r\n\r\n    likeDislikeComment(e) {\r\n        const params = this.buildParams(e.c, e.liked);\r\n\r\n\r\n        this.subscriptions.push(this.videoService.updateCommentLikes(params).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.showReplies = true;\r\n            this.selectedComment = this.videoComments.find(comm => comm.id === this.selectedComment?.id);\r\n        }));\r\n    }\r\n\r\n    buildParams(c, liked) {\r\n        const params = {\r\n            video_id: c.video_id,\r\n            comment_id: c.id,\r\n            user_id: this.authUser.id,\r\n            liked: 0,\r\n            disliked: 0,\r\n            likes: c.likes,\r\n            dislikes: c.dislikes\r\n        };\r\n        const conn = this.checkUserCommentConnection(c);\r\n\r\n        // Avoiding negative values here\r\n        params.likes = Math.max(0, conn?.liked ? --c.likes : +c.likes);\r\n        params.dislikes = Math.max(0, conn?.disliked ? --c.dislikes : +c.dislikes);\r\n\r\n\r\n        if (liked) {\r\n            params.liked = +!conn?.liked;\r\n        } else {\r\n            params.disliked = +!conn?.disliked;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n\r\n    checkUserCommentConnection(comment) {\r\n        const foundInReactors = comment.reactors?.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    isCommentShown(c) {\r\n        return (c.id !== this.selectedComment?.id && !this.showReplyForm) || this.showReplyForm || !this.editComment;\r\n    }\r\n\r\n    isReplyShown(c) {\r\n        return this.showReplies && this.selectedComment === c;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"videoDetailsForm\" id=\"tags-form\">\r\n    <div class=\"left-group\">\r\n\r\n        <div id=\"video-name\">\r\n            <mat-form-field>\r\n                <input matInput formControlName=\"name\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"isSubmitted && videoDetailsForm.get('name').hasError('required')\">\r\n                The video name is required\r\n            </mat-error>\r\n            <mat-error *ngIf=\"videoDetailsForm.get('name').hasError('maxlength')\">\r\n                Not more than 12 characters please\r\n            </mat-error>\r\n        </div>\r\n    </div>\r\n    <div class=\"center-group\">\r\n        <div class=\"image-container\" *ngIf=\"videoData.thumbnail\">\r\n            <img class=\"saved-thumbnail\" [src]=\"apiUrl+ 'uploads/thumbnails/'+videoData.thumbnail\">\r\n        </div>\r\n        <div class=\"actions-container\">\r\n            <button id=\"change-thumbnail\" *ngIf=\"videoData.thumbnail\" (click)=\"removeThumbnail()\">Change thumbnail\r\n            </button>\r\n            <dropzone [config]=\"dropzoneConfig\" [hidden]=\"videoData.thumbnail\" (removedFile)=\"removeImage()\"\r\n                      id=\"video-thumbnail-dropzone\" class=\"single\" #dropzone (thumbnail)=\"onAddedFile($event)\"\r\n                      [message]=\"'Click or drag an image to upload'\">\r\n            </dropzone>\r\n            <input type=\"file\" (change)=\"changeThumbnail($event)\" [hidden]=\"true\">\r\n        </div>\r\n    </div>\r\n    <div class=\"right-group video-tags-right-part\">\r\n\r\n        <div id=\"video-tags\">\r\n            <mat-form-field class=\"example-chip-list\">\r\n                <mat-chip-list #tagList formControlName=\"tags\">\r\n                    <mat-chip *ngFor=\"let tag of videoData.tags\" (removed)=\"remove(tag)\">\r\n                        {{tag.name}}\r\n                        <mat-icon matChipRemove>cancel</mat-icon>\r\n                    </mat-chip>\r\n                    <input placeholder=\"Tags...\" #chipsInput\r\n                           [matChipInputFor]=\"tagList\"\r\n                           [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                           (matChipInputTokenEnd)=\"add($event)\">\r\n                </mat-chip-list>\r\n                <mat-hint align=\"end\">Please press 'Enter' after the tag name</mat-hint>\r\n\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"videoData.tags.length ===0 && isSubmitted\">Please provide some tags describing your live\r\n                video\r\n            </mat-error>\r\n        </div>\r\n\r\n        <div class=\"actions actions-video\">\r\n            <button id=\"save-tags\" (click)=\"saveDetails()\">\r\n                <mat-icon>checked</mat-icon>\r\n                <span>Save changes</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {MatChipInputEvent} from '@angular/material/chips';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {API_URL, TAG_CHARACTERS_LIMIT} from '@core/constants/global';\r\nimport {DROPZONE_CONFIG} from 'ngx-dropzone-wrapper';\r\n\r\n@Component({\r\n    selector: 'app-video-details-form',\r\n    templateUrl: './video-details-form.component.html',\r\n    styleUrls: ['./video-details-form.component.scss']\r\n})\r\nexport class VideoDetailsFormComponent implements OnInit {\r\n    @Input('videoData') videoData;\r\n    @Output('formReady') formReady = new EventEmitter();\r\n    videoDetailsForm: FormGroup;\r\n\r\n    isSubmitted = false;\r\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n    apiUrl = API_URL;\r\n\r\n    thumbnailFile;\r\n\r\n    dropzoneConfig = DROPZONE_CONFIG;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private toastr: ToastrService\r\n    ) {\r\n        this.videoDetailsForm = this.fb.group({\r\n            name: ['', [Validators.required, Validators.maxLength(TAG_CHARACTERS_LIMIT)]],\r\n            tags: [[], Validators.required],\r\n            thumbnail: [''],\r\n            video_id: []\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.videoDetailsForm.patchValue({\r\n            video_id: this.videoData.id,\r\n            ...this.videoData\r\n        });\r\n    }\r\n\r\n    add(event: MatChipInputEvent): void {\r\n        const input = event.input;\r\n        const value = event.value;\r\n\r\n        if ((value || '').trim()) {\r\n            if (this.videoData.tags.length === 3) {\r\n                this.toastr.error('We don\\'t support more than 3 tags per video');\r\n            } else {\r\n                this.videoData.tags.push({name: value.trim()});\r\n                this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n            }\r\n\r\n            // this.saveTags();\r\n        }\r\n\r\n        // Reset the input value\r\n        if (input) {\r\n            input.value = '';\r\n        }\r\n    }\r\n\r\n    remove(tag): void {\r\n        const index = this.videoData.tags.indexOf(tag);\r\n\r\n        if (index >= 0) {\r\n            this.videoData.tags.splice(index, 1);\r\n            this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        }\r\n    }\r\n\r\n    removeThumbnail() {\r\n        this.videoDetailsForm.patchValue({thumbnail: ''});\r\n        this.videoData.thumbnail = '';\r\n    }\r\n\r\n    changeThumbnail(e) {\r\n        this.thumbnailFile = e.target.files[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n    saveDetails() {\r\n        this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        this.isSubmitted = true;\r\n        if (this.videoDetailsForm.valid) {\r\n            const formData = new FormData();\r\n            for (const field in this.videoDetailsForm.value) {\r\n                if (field !== 'tags') {\r\n                    formData.append(field, this.videoDetailsForm.value[field]);\r\n                } else {\r\n                    formData.append(field, JSON.stringify(this.videoDetailsForm.value[field]));\r\n                }\r\n            }\r\n            if (this.thumbnailFile) {\r\n                formData.append('video_thumbnail_file', this.thumbnailFile, this.thumbnailFile.name);\r\n            }\r\n            this.formReady.emit(formData);\r\n        }\r\n    }\r\n\r\n    removeImage() {\r\n\r\n    }\r\n\r\n    onAddedFile(e) {\r\n        this.thumbnailFile = e[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-wrap\" *ngIf=\"playlistOpened && playlistData && playlistData.videos.length > 0\">\r\n    <h2>{{playlistData.name}}</h2>\r\n    <div class=\"list-wrap\">\r\n        <ng-container *ngFor=\"let video of playlistData.videos\">\r\n\r\n            <div class=\"playlist-video\" [class.selected]=\"videoId === video.id\"\r\n                 (click)=\"openVideoPage(video, playlistData?.id)\">\r\n\r\n                <div class=\"thumbnail-container\">\r\n                    <img [src]=\"video?.thumbnail|getImgPath:'images'\">\r\n                </div>\r\n\r\n                <div class=\"details-container\">\r\n                    <p class=\"video-name\" (click)=\"openVideoPage(video, playlistData?.id)\">{{video.name}}</p>\r\n                    <p class=\"main-text-3\">{{video.channel.name}}</p>\r\n                </div>\r\n\r\n                <div class=\"remove-btn-container\" *ngIf=\"authUser.id === playlistData.channel.id\"\r\n                     (click)=\"removeVideoFromPlaylist(video,playlistId)\">\r\n                    <span class=\"material-icons\">delete</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"suggested-videos\" *ngFor=\"let video of videoSuggestions;let ind = index\">\r\n    <div class=\"suggested-video\" *ngIf=\"ind < 5\">\r\n\r\n        <div class=\"thumbnail-container\">\r\n            <img [src]=\"video.thumbnail|getImgPath:'images'\" (click)=\"openVideoPage(video)\">\r\n        </div>\r\n\r\n        <div class=\"details-container\">\r\n            <p class=\"video-name\">{{video.name}}</p>\r\n            <p class=\"channel-sub-name\" [routerLink]=\"'/channels/'\"\r\n               [queryParams]=\"{username: video.user.username}\"\r\n            >{{video.channel.name}}</p>\r\n            <div class=\"details-row\">\r\n                <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<!--<div [hidden]=\"isProduction\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--</div>-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL, DEFAULT_VIDEO_SUGGESTIONS_COUNT} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {environment} from '@env';\r\n\r\n@Component({\r\n    selector: 'app-video-suggestions',\r\n    templateUrl: './video-suggestions.component.html',\r\n    styleUrls: ['./video-suggestions.component.scss']\r\n})\r\nexport class VideoSuggestionsComponent implements OnInit {\r\n\r\n    urlParams;\r\n    videoId;\r\n    playlistId;\r\n    playlistData;\r\n\r\n    playlistOpened = false;\r\n    videoSuggestions = [];\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n    isProduction = environment.production;\r\n\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.urlParams = this.route.snapshot.queryParams;\r\n        this.videoId = +this.urlParams?.id;\r\n        this.playlistId = this.urlParams?.playlist_id;\r\n        this.playlistOpened = !!this.playlistId;\r\n\r\n        if (this.playlistOpened) {\r\n            this.playlistsService.getById({playlist_id: this.playlistId}).subscribe(dt => {\r\n                this.playlistData = dt;\r\n            });\r\n        }\r\n\r\n        this.videoService.get({limit: DEFAULT_VIDEO_SUGGESTIONS_COUNT}).subscribe(dt => {\r\n            this.videoSuggestions = dt.videos;\r\n            console.log(dt)\r\n        });\r\n\r\n    }\r\n\r\n    openVideoPage(video, playlistId = null) {\r\n        const route = '/videos/play';\r\n        const params = {id: video.id, playlist_id: playlistId};\r\n\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate([route], {queryParams: params})\r\n        );\r\n\r\n    }\r\n\r\n    removeVideoFromPlaylist(video, playlistId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: video.id\r\n                }).subscribe(dt => {\r\n                    const oldVideoIndex = this.playlistData.videos.indexOf(video);\r\n                    this.playlistData.videos = dt.videos;\r\n                    const nextVideo = this.playlistData.videos[oldVideoIndex];\r\n                    if (nextVideo) {\r\n                        this.openVideoPage(nextVideo);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","<app-user-tags *ngIf=\"auth.loggedIn()\" (tagSelected)=\"getVideosByTag($event)\"></app-user-tags>\r\n<div class=\"ads-block\">\r\n    <div class=\"ads-block-left\">\r\n        <ng-container *ngIf=\"videoData\">\r\n            <div class=\"videoWrap\">\r\n                <app-video-js-player [videoData]=\"videoData\"\r\n                                     [videoUrl]=\"apiUrl + 'uploads/videos/' + videoData.filename\">\r\n                </app-video-js-player>\r\n                <!--<app-video-regular-player [videoData]=\"videoData\"></app-video-regular-player>-->\r\n                <!--<app-vjs-player [videoData]=\"videoData\" [options]=\"videoJSPlayerOptions\"></app-vjs-player>-->\r\n            </div>\r\n\r\n            <div class=\"main-tags\">\r\n                <div class=\"main-tags-text\">\r\n                    <span *ngIf=\"videoData.tags?.length === 0\">No tags defined for this video</span>\r\n                    <ng-container *ngIf=\"videoData.tags?.length > 0\">\r\n                        <p *ngFor=\"let tag of videoData.tags\" class=\"tag\" (click)=\"openVideoByTag(tag.name)\">\r\n                            #{{tag.name}}</p>\r\n                    </ng-container>\r\n                </div>\r\n\r\n                <div class=\"main-tags-like\">\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'like')\">\r\n                        <i class=\"fas fa-thumbs-up\" [class.liked]=\"userVideoConnection?.liked\"></i>\r\n                        <p>{{videoData.likes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'dislike')\">\r\n                        <i class=\"fas fa-thumbs-down\"\r\n                           [class.disliked]=\"userVideoConnection?.disliked\"></i>\r\n                        <p>{{videoData.dislikes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"openSocialShareModal()\">\r\n                        <i class=\"fas fa-share-alt\"></i>\r\n                        <p>Share</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"saveVideo(videoData)\"\r\n                         [class.saved]=\"userVideoConnection?.saved === 'saved'\">\r\n                        <i class=\"fas fa-plus-square\"></i>\r\n                        <p>{{userVideoConnection?.saved === 'saved' ? 'Saved' : 'Save'}}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div class=\"tags-container\">\r\n                <div class=\"editable-details\" *ngIf=\"!showTagsForm\">\r\n                    <p class=\"video-title\">{{videoData?.name}}</p>\r\n                    <button id=\"add-tags\"\r\n                            *ngIf=\"auth.loggedIn() && !showTagsForm && authUser?.id === videoData.author_id\"\r\n                            (click)=\"showTagsForm = !showTagsForm\">\r\n                        <mat-icon>edit</mat-icon>\r\n                        <span>Edit details</span>\r\n                    </button>\r\n                </div>\r\n                <app-video-details-form [videoData]=\"videoData\" *ngIf=\"showTagsForm\"\r\n                                        (formReady)=\"saveVideoDetails($event)\"></app-video-details-form>\r\n            </div>\r\n            <div class=\"details-row\">\r\n                <span class=\"views-count\">{{videoData?.views + ' view' + (videoData?.views === 1 ? '' : 's')}}</span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"date\">{{videoData.created_at|dateFromNow}}</span>\r\n            </div>\r\n            <div class=\"channel-block\"\r\n                 [routerLink]=\"'/channels/'+videoData.users_vids[0].username\"  *ngIf=\"videoData?.channel\">\r\n                <img alt=\"avatar\" class=\"avatar\" [src]=\"videoData.channel.avatar|getImgPath:'avatars'\">\r\n                <div>\r\n                    <p class=\"channel-name\">{{videoData.channel.name}}</p>\r\n                    <p class=\"subscribers-count\">{{buildSubscribersCountText(videoData)}}</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-side\">\r\n                <app-video-suggestions *ngIf=\"isSmallScreen\"></app-video-suggestions>\r\n            </div>\r\n            <div class=\"comments-block\">\r\n                <app-video-comments-form *ngIf=\"auth.loggedIn()\" (added)=\"commentAdded($event)\" [videoData]=\"videoData\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n                <mat-spinner [diameter]=\"15\"\r\n                             [hidden]=\"!auth.loggedIn() || commentsLoading === 'finished'\"></mat-spinner>\r\n                <app-video-comments-list [videoData]=\"videoData\"\r\n                                         [videoComments]=\"videoComments\"></app-video-comments-list>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"ads-block-right\">\r\n        <app-chat-box *ngIf=\"videoData\" [messages]=\"videoData.messages\"></app-chat-box>\r\n        <app-video-suggestions *ngIf=\"!isSmallScreen\"></app-video-suggestions>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {API_URL, VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport IsResponsive from '@core/helpers/is-responsive';\r\nimport {Subscription} from 'rxjs';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Title} from '@angular/platform-browser';\r\nimport {SocialShareDialogComponent} from '@core/components/modals/social-share-dialog/social-share-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-play-video',\r\n    templateUrl: './play-video.component.html',\r\n    styleUrls: ['./play-video.component.scss']\r\n})\r\nexport class PlayVideoComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    videoData;\r\n    apiUrl = API_URL;\r\n\r\n    authUser;\r\n    userVideoConnection = {liked: 0, disliked: 0, saved: '', viewed: false};\r\n    videoJSPlayerOptions = VIDEOJS_PLAYER_OPTIONS;\r\n\r\n    showTagsForm = false;\r\n    isSmallScreen = IsResponsive.isSmallScreen();\r\n\r\n    commentsRefreshed = false;\r\n    formValue;\r\n    videoComments = [];\r\n    commentsLoading = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        private loader: LoaderService,\r\n        private titleService: Title,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const videoId = this.route.snapshot.queryParams.id;\r\n        const params = {id: videoId};\r\n\r\n        this.subscriptions.push(this.videoService.getVideoById(params).subscribe(dt => {\r\n            this.videoData = dt;\r\n            this.titleService.setTitle(dt.name);\r\n            if (this.auth.loggedIn()) {\r\n                this.userVideoConnection = this.checkUserVideoConnection(dt);\r\n                this.updateViewsCount(dt);\r\n                this.indexUserTags(dt);\r\n                this.getComments();\r\n            }\r\n        }));\r\n\r\n\r\n    }\r\n\r\n\r\n    checkUserVideoConnection(videoData) {\r\n        const userVideoConnection = videoData?.users_vids.find(u => u.id === this.authUser.id);\r\n        if (!userVideoConnection) {\r\n            return this.userVideoConnection;\r\n        } else {\r\n            const liked = userVideoConnection.users_videos?.liked;\r\n            const disliked = userVideoConnection.users_videos?.disliked;\r\n            const saved = userVideoConnection.users_videos.saved ? 'saved' : '';\r\n            const viewed = !!userVideoConnection?.users_videos?.viewed;\r\n            return {liked, disliked, saved, viewed};\r\n        }\r\n    }\r\n\r\n    updateViewsCount(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id};\r\n        if (!this.userVideoConnection.viewed) {\r\n            this.subscriptions.push(this.videoService.updateViews(params).subscribe((d) => {\r\n                this.videoData = d;\r\n            }));\r\n        }\r\n    }\r\n\r\n    updateLikes(videoData, action) {\r\n        if (this.auth.loggedIn()) {\r\n\r\n            videoData = this.getLikesState(action, videoData);\r\n\r\n            this.videoService.updateLikes({\r\n                video_id: videoData.id,\r\n                user_id: this.authUser.id,\r\n                likes: videoData.likes,\r\n                dislikes: videoData.dislikes,\r\n                liked: this.userVideoConnection.liked,\r\n                disliked: this.userVideoConnection.disliked,\r\n                saved: videoData.saved\r\n            }).subscribe(dt => {\r\n\r\n            });\r\n        } else {\r\n            this.toastr.error('Please log in first to take this action');\r\n        }\r\n    }\r\n\r\n    getLikesState(action, videoData) {\r\n        if (action === 'like') {\r\n            this.userVideoConnection.liked = +!this.userVideoConnection.liked;\r\n            if (this.userVideoConnection.disliked) {\r\n                videoData.dislikes += videoData.dislikes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.disliked = 0;\r\n            videoData.likes += this.userVideoConnection.liked ? 1 : -1;\r\n\r\n        } else {\r\n            this.userVideoConnection.disliked = +!this.userVideoConnection.disliked;\r\n            if (this.userVideoConnection.liked) {\r\n                videoData.likes += videoData.likes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.liked = 0;\r\n            videoData.dislikes += this.userVideoConnection.disliked ? 1 : -1;\r\n        }\r\n        return videoData;\r\n    }\r\n\r\n    indexUserTags(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id, tags: this.videoData?.tags};\r\n        this.subscriptions.push(this.videoService.indexUserTags(params).subscribe(d => {\r\n\r\n        }));\r\n    }\r\n\r\n    async openVideoByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    saveVideo(videoData) {\r\n\r\n        this.subscriptions.push(this.videoService.saveVideo({\r\n            video_id: videoData.id,\r\n            user_id: this.authUser.id,\r\n            saved: this.userVideoConnection.saved === 'saved' ? 0 : 1\r\n        }).subscribe(dt => {\r\n            this.userVideoConnection.saved = dt.saved ? 'saved' : '';\r\n        }));\r\n    }\r\n\r\n    saveVideoDetails(e) {\r\n        this.subscriptions.push(this.videoService.saveVideoDetails(e)\r\n            .subscribe(dt => {\r\n                this.videoData = dt;\r\n                this.titleService.setTitle(dt.name);\r\n                this.showTagsForm = false;\r\n            }));\r\n    }\r\n\r\n    getComments() {\r\n        this.commentsLoading = 'loading';\r\n        this.subscriptions.push(this.videoService.getVideoComments({video_id: this.videoData.id}).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.commentsLoading = 'finished';\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.commentsRefreshed = true;\r\n        this.videoComments = e;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    buildSubscribersCountText(videoData) {\r\n        const count = videoData.channel.subscribers_count;\r\n        return count + ' subscriber' + (count === 1 ? '' : 's');\r\n    }\r\n\r\n    openSocialShareModal() {\r\n        this.dialog.open(SocialShareDialogComponent, {\r\n            width: '500px',\r\n            height: '400px',\r\n            data: {shareUrl: window.location.href}\r\n        })\r\n            .afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"videos-list\" *ngIf=\"userVideos && showSaved\">\r\n    <ng-container *ngIf=\"!search\">\r\n        <div class=\"video-container flex-wrap\" *ngFor=\"let video of userVideos.users_vids\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, userVideos.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\" [routerLink]=\"'/channels/'+video?.user?.username\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\">\r\n                   {{video.description}}\r\n                </p>\r\n\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n<div *ngIf=\"!userVideos && showSaved\" style=\"text-align: center; font-size: 25px; color: darkred\">NOT SAVED VIDEO</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-show-saved-videos',\r\n    templateUrl: './show-saved-videos.component.html',\r\n    styleUrls: ['./show-saved-videos.component.scss']\r\n})\r\nexport class ShowSavedVideosComponent implements OnInit {\r\n\r\n    userVideos;\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    authUser: CurrentUserData;\r\n    showSaved = false;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // this.authUser = this.getAuthUser.transform();\r\n\r\n        this.videoService.getUserSavedVideos({user_id: this.authUser.id}).subscribe(dt => {\r\n            this.userVideos = dt;\r\n            this.showSaved = true;\r\n        });\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Show saved videos  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\r\nimport videojs from 'video.js';\r\nimport * as RecordRTC from 'recordrtc';\r\n\r\n@Component({\r\n    selector: 'app-videojs-test',\r\n    templateUrl: './videojs-test.component.html',\r\n    styleUrls: ['./videojs-test.component.scss']\r\n})\r\nexport class VideojsTestComponent implements OnInit, AfterViewInit {\r\n    config = {\r\n        controls: true,\r\n        bigPlayButton: false,\r\n        width: 320,\r\n        height: 240,\r\n        fluid: false,\r\n        plugins: {\r\n            record: {\r\n                audio: true,\r\n                video: true,\r\n                maxLength: 110,\r\n                debug: true\r\n            }\r\n        }\r\n    };\r\n    player;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.player = videojs(document.getElementById('video'), this.config, () => {\r\n            // console.log('player ready! id:', el);\r\n\r\n            // print version information at startup\r\n            const msg = 'Using video.js ' + videojs.VERSION +\r\n                ' with videojs-record ' + videojs.getPluginVersion('record') +\r\n                ' and recordrtc ' + RecordRTC.version;\r\n            videojs.log(msg);\r\n        }, () => {\r\n        });\r\n\r\n        let player = this.player;\r\n\r\n        this.player.on('finishRecord', () => {\r\n            // the blob object contains the recorded data that\r\n            // can be downloaded by the user, stored on server etc.\r\n            console.log('finished recording: ', player.recordedData);\r\n            // player.record().saveAs({'video': 'my-video-file-name.webm'});\r\n        });\r\n\r\n    }\r\n}\r\n","<video id=\"video\" class=\"video-js\" playsinline></video>\r\n","<input id=\"url-input\" placeholder=\"Paste the url here\" (paste)=\"getUrl($event)\" (change)=\"checkUrl($event)\">\r\n<div *ngIf=\"isValidUrl\" class=\"video-container\">\r\n    <iframe width=\"560\" height=\"315\" [src]=\"safeUrl\" *ngIf=\"safeUrl && isYoutubeVideo(url)\" title=\"YouTube video player\"\r\n            frameborder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowfullscreen></iframe>\r\n\r\n\r\n</div>\r\n\r\n<div class=\"video-container\">\r\n    <iframe width=\"560\" height=\"500\" [src]=\"safeUrl\" *ngIf=\"safeUrl && !isYoutubeVideo(url)\"\r\n            title=\"YouTube video player\"\r\n            frameborder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowfullscreen></iframe>\r\n</div>\r\n","<div class=\"all-videos\">\r\n    <button class=\"filter-toggle-btn\" *ngIf=\"isFiltersShown()\" (click)=\"showFilters = !showFilters\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Filters</span>\r\n    </button>\r\n    <app-video-filters (filter)=\"getFilteredList($event)\" *ngIf=\"showFilters\"></app-video-filters>\r\n    <div id=\"videos-list\">\r\n        <mat-spinner [diameter]=\"20\" *ngIf=\"loadingVideos\"></mat-spinner>\r\n        <ng-container *ngIf=\"!search && !loadingVideos\">\r\n            <app-show-regular-list [items]=\"items\" [authUser]=\"authUser\"></app-show-regular-list>\r\n<!--            <app-show-playlists-list [items]=\"items\" [authUser]=\"authUser\"></app-show-playlists-list>-->\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"search && !loadingVideos\">\r\n            <app-show-search-results [channelsVideos]=\"channelsVideos\" [authUser]=\"authUser\"></app-show-search-results>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"search && channelsVideos?.length === 0\">\r\n        <span class=\"error\">No results found</span>\r\n    </div>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowVideosComponent} from '@app/videos/show-videos/show-videos.component';\r\nimport {PlayVideoComponent} from '@app/videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from '@app/videos/show-saved-videos/show-saved-videos.component';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {VideojsTestComponent} from '@app/videos/videojs-test/videojs-test.component';\r\nimport {AddVideoComponent} from '@app/videos/add-video/add-video.component';\r\nimport { ClipzVideoComponent } from '@app/videos/clipz-video/clipz-video.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'add',\r\n        component: AddVideoComponent\r\n    },\r\n    {\r\n        path: 'test',\r\n        component: VideojsTestComponent\r\n    },\r\n    {\r\n        path: '',\r\n        component: ShowVideosComponent,\r\n        pathMatch: 'full',\r\n        data: {\r\n            title: 'Videos',\r\n        }\r\n    },\r\n    {\r\n        path: 'play',\r\n        component: PlayVideoComponent,\r\n        data: {\r\n            title: 'Play Video',\r\n        }\r\n    },\r\n    {\r\n        path: 'saved',\r\n        component: ShowSavedVideosComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n            title: 'Saved Videos',\r\n        }\r\n    },\r\n    {\r\n        path: 'clipz',\r\n        component: ClipzVideoComponent,\r\n        data: {\r\n            title: 'Clipz',\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class VideosRoutingModule {\r\n}\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'app-add-video',\r\n    templateUrl: './add-video.component.html',\r\n    styleUrls: ['./add-video.component.scss']\r\n})\r\nexport class AddVideoComponent implements OnInit {\r\n    url;\r\n    safeUrl;\r\n    isValidUrl = false;\r\n\r\n    constructor(\r\n        private sanitizer: DomSanitizer\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getUrl(e: ClipboardEvent) {\r\n        const clipboardData = e.clipboardData;\r\n        const pastedText = clipboardData.getData('text');\r\n        this.url = pastedText;\r\n        this.constructSafeUrl(pastedText);\r\n        console.log(pastedText);\r\n\r\n    }\r\n\r\n    checkUrl(e) {\r\n        let text = e.target.value;\r\n        this.url = text;\r\n        console.log(this.isTikTokVideo(text))\r\n        if (this.isYoutubeVideo(text)) {\r\n            text = this.transformUrlForYoutube(text);\r\n            this.constructSafeUrl(text);\r\n        } else {\r\n            // this.isValidUrl = false;\r\n            this.constructSafeUrl(text);\r\n        }\r\n    }\r\n\r\n    isYoutubeVideo(url) {\r\n        const p = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        if (url.match(p)) {\r\n            return url.match(p)[1];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTikTokVideo(url) {\r\n        // const p = /^(https?:\\/\\/(?:(?:www|m)\\.(?:tiktok.com)\\/(?:v|embed|trending)(?:\\/)?(?:\\?shareId=)?)(?<id>[\\da-z]+))?$/;\r\n        const p = /https?:\\/\\/(?:(?:www|m)\\.(?:tiktok.com)\\/(?:v|embed|trending)(?:\\/)?(?:\\?shareId=)?)(?<id>[\\da-z]+)/;\r\n\r\n        console.log('aaa', url, url.match(p)[1])\r\n        if (url.match(p)) {\r\n            return !!url.match(p)[1];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    transformUrlForYoutube(url) {\r\n        const youTubeIdFromLink = (u) => u.match(/(?:https?:\\/\\/)?(?:www\\.|m\\.)?youtu(?:be)?\\.(?:com|be)(?:\\/watch\\/?\\?v=|\\/embed\\/|\\/)([^\\s&\\?\\/\\#]+)/)[1];\r\n        const youTubeId = youTubeIdFromLink(url);\r\n        return url.split('&')[0].replace('/watch?v=', '/embed/');\r\n    }\r\n\r\n    constructSafeUrl(text) {\r\n        if (this.isYoutubeVideo(text)) {\r\n            this.isValidUrl = true;\r\n            text = this.transformUrlForYoutube(text);\r\n        }\r\n        this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(text);\r\n    }\r\n\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Subscription} from 'rxjs';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-clipz-video',\r\n    templateUrl: './clipz-video.component.html',\r\n    styleUrls: ['./clipz-video.component.scss']\r\n})\r\nexport class ClipzVideoComponent implements OnInit, OnDestroy {\r\n\r\n    items = {videos: [], playlists: []};\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    selectedTag;\r\n    authUser: CurrentUserData;\r\n    showTrending = false;\r\n    showFilters = false;\r\n    filters = {video_type: 'clipz'};\r\n    filterStatus = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n    loadingVideos = false;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private _userInfoService: UserInfoService,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n        // this.authUser = this.getAuthUser.transform();\r\n        this._getAuthInfo();\r\n        this.subscriptions.push(\r\n            this.route.queryParams.subscribe(d => {\r\n                this.search = this.route.snapshot.queryParams?.search;\r\n                this.showTrending = this.router.url.includes('clipz');\r\n                this.selectedTag = this.route.snapshot.queryParams?.tag;\r\n                if (this.search) {\r\n                    this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n                } else {\r\n                    this.getVideosList({search: this.search, filters: this.filters, tag: this.selectedTag});\r\n                }\r\n            }));\r\n\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Clipz-video  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getFilteredList(filters = {video_type: 'clipz'}) {\r\n        this.filters = filters;\r\n        this.filterStatus = 'applied';\r\n        if (this.search) {\r\n            this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n        } else {\r\n            this.getVideosList({filters: this.filters});\r\n        }\r\n    }\r\n\r\n    getVideosList(params) {\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.videoService.get({\r\n            withPlaylists: !this.showTrending ? 1 : 0,\r\n            trending: this.showTrending ? 1 : 0,\r\n            ...params\r\n        }).subscribe(dt => {\r\n            this.items = dt;\r\n        });\r\n    }\r\n\r\n    searchChannelsVideos(params) {\r\n        console.log(params);\r\n\r\n        params = this.getExactParams.transform(params);\r\n        this.loadingVideos = true;\r\n\r\n        this.channelsService.searchWithVideos({user_id: this.authUser?.id, ...params}).subscribe(dt => {\r\n            this.loadingVideos = false;\r\n            this.channelsVideos = dt;\r\n        });\r\n    }\r\n\r\n\r\n    isFiltersShown() {\r\n        return this.items.videos?.length > 0 ||\r\n            (this.search && this.channelsVideos.find(v => v.videos.length > 0))\r\n            || this.filterStatus === 'applied' && !this.loadingVideos;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {VideosRoutingModule} from './videos-routing.module';\r\nimport {ShowVideosComponent} from './show-videos/show-videos.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\n\r\nimport {PlayVideoComponent} from '../videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from './show-saved-videos/show-saved-videos.component';\r\nimport {VideoSuggestionsComponent} from './play-video/video-suggestions/video-suggestions.component';\r\nimport { VideoDetailsFormComponent } from './play-video/video-details-form/video-details-form.component';\r\nimport { ShowRegularListComponent } from './show-videos/show-regular-list/show-regular-list.component';\r\nimport { ShowSearchResultsComponent } from './show-videos/show-search-results/show-search-results.component';\r\nimport { ShowPlaylistsListComponent } from './show-videos/show-playlists-list/show-playlists-list.component';\r\nimport { VideoCommentsFormComponent } from './play-video/video-comments-form/video-comments-form.component';\r\nimport { VideoCommentsListComponent } from './play-video/video-comments-list/video-comments-list.component';\r\nimport { CommentActionsComponent } from './play-video/video-comments-list/comment-actions/comment-actions.component';\r\nimport { SingleCommentComponent } from './play-video/video-comments-list/single-comment/single-comment.component';\r\nimport { VideojsTestComponent } from './videojs-test/videojs-test.component';\r\nimport { AddVideoComponent } from './add-video/add-video.component';\r\nimport { ClipzVideoComponent } from './clipz-video/clipz-video.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowVideosComponent,\r\n        PlayVideoComponent,\r\n        ShowSavedVideosComponent,\r\n        VideoSuggestionsComponent,\r\n        VideoDetailsFormComponent,\r\n        ShowRegularListComponent,\r\n        ShowSearchResultsComponent,\r\n        ShowPlaylistsListComponent,\r\n        VideoCommentsFormComponent,\r\n        VideoCommentsListComponent,\r\n        CommentActionsComponent,\r\n        SingleCommentComponent,\r\n        VideojsTestComponent,\r\n        AddVideoComponent,\r\n        ClipzVideoComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        VideosRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class VideosModule {\r\n}\r\n"]}