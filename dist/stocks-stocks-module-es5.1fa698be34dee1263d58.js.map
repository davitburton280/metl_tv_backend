{"version":3,"sources":["webpack:///src/app/core/helpers/normalizeTableColumnName.ts","webpack:///src/app/stocks/stock-profile/summary-tab/summary-tab.component.html","webpack:///src/app/stocks/stock-profile/summary-tab/summary-tab.component.ts","webpack:///src/app/stocks/stock-profile/historical-tab/historical-tab.component.html","webpack:///src/app/stocks/stock-profile/historical-tab/historical-tab.component.ts","webpack:///src/app/stocks/stock-profile/stock-profile.component.html","webpack:///src/app/stocks/stock-profile/stock-profile.component.ts","webpack:///src/app/stocks/stocks-routing.module.ts","webpack:///src/app/stocks/stocks.module.ts"],"names":["normalizeColName","col","toUpperCase","slice","replace","trim","SummaryTabComponent","stocksService","loader","subject","updateStocks","getAuthUser","colorScheme","domain","displayedColumns","userStocks","addedToWatchlist","subscriptions","stocksUpdatedHere","processingStock","this","getUserStocks","getStockInfo","authUser","transform","currentUserStocks","subscribe","dt","stocks","find","us","symbol","selectedStock","dataLoading","getStockChartData","stock","chartData","chart","tableData","table","tick","tickPresent","ticks","t","i","moment","minute","format","s","name","removal","isStockFollowed","result","show","push","updateFollowedStocks","user_id","id","user_stocks","hide","changeUserStocks","empty","length","HistoricalTabComponent","paginationValues","getStockHistoricalPrices","historical","paginator","StockProfileComponent","StocksRoutingModule","StocksModule","router","route","activeTab","currentIndices","indices","snapshot","params","tab","navigateByUrl","skipLocationChange","then","navigate","routes","path","component","data","title","forChild"],"mappings":"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","file":"x","sourcesContent":["function normalizeColName(col): string {\r\n    col = `${col[0].toUpperCase()}${col.slice(1)}`.replace(/([A-Z])/g, ' $1').trim();\r\n    return col.replace(/_/g, ' ');\r\n}\r\n\r\nexport {normalizeColName as normalizeColName};\r\n","<div class=\"loader-holder\">\r\n    <mat-spinner [diameter]=\"50\" [hidden]=\"!loader.dataLoading\"></mat-spinner>\r\n</div>\r\n<div class=\"table-chart-container\">\r\n    <ng-container *ngIf=\"chartData && chartData[0].series.length > 0\">\r\n\r\n        <div class=\"chart-container\">\r\n\r\n            <ngx-charts-area-chart\r\n                [scheme]=\"colorScheme\"\r\n                [legend]=\"false\"\r\n                [showXAxisLabel]=\"false\"\r\n                [showYAxisLabel]=\"false\"\r\n                [trimXAxisTicks]=\"false\"\r\n                [maxXAxisTickLength]=\"5\"\r\n                [autoScale]=\"true\"\r\n                [xAxis]=\"true\"\r\n                [yAxis]=\"true\"\r\n                [rotateXAxisTicks]=\"false\"\r\n                [xAxisTickFormatting]=\"axisFormatting\"\r\n                [results]=\"chartData\">\r\n            </ngx-charts-area-chart>\r\n        </div>\r\n        <div class=\"table-container\">\r\n            <h1 class=\"selected-stock\">{{selectedStock.replace('^', '')}}</h1>\r\n            <table mat-table [dataSource]=\"tableData\" class=\"mat-elevation-z8\">\r\n\r\n                <ng-container *ngFor=\"let col of displayedColumns\">\r\n                    <ng-container [matColumnDef]=\"col\">\r\n                        <th mat-header-cell *matHeaderCellDef> {{normalizeColName(col)}}</th>\r\n                        <td mat-cell *matCellDef=\"let element\">\r\n                            <span *ngIf=\"col!=='action'\">{{element[col]}}</span>\r\n                            <div *ngIf=\"col==='action'\" class=\"action-column\">\r\n                                <button id=\"watchlist-act-btn\" (click)=\"updateUserStocks(element)\"\r\n                                        [ngClass]=\"addedToWatchlist? 'red-bg':'green-bg'\"\r\n                                >{{(addedToWatchlist ? 'Remove from' : 'Add to') + ' watchlist'}}</button>\r\n                                <mat-spinner [diameter]=\"15\" *ngIf=\"processingStock\"></mat-spinner>\r\n                            </div>\r\n                        </td>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n<mat-error *ngIf=\"(!chartData || chartData[0].series.length === 0) && !loader.dataLoading\">No chart data found\r\n</mat-error>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {normalizeColName} from '@core/helpers/normalizeTableColumnName';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {XAxisTicksComponent} from '@swimlane/ngx-charts';\r\nimport * as moment from 'moment';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {UpdateUserStocksPipe} from '@shared/pipes/update-user-stocks.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-summary-tab',\r\n    templateUrl: './summary-tab.component.html',\r\n    styleUrls: ['./summary-tab.component.scss']\r\n})\r\nexport class SummaryTabComponent implements OnInit {\r\n\r\n    // Chart settings\r\n    chartData: any[];\r\n    colorScheme = {\r\n        domain: ['#18B587', '#F53C6F']\r\n    };\r\n\r\n\r\n    // Table settings\r\n    displayedColumns: string[] = ['symbol', 'name', 'price', 'change', 'changesPercentage', 'marketCap', 'open', 'volume', 'action'];\r\n    tableData;\r\n\r\n    userStocks = [];\r\n\r\n    addedToWatchlist = false;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    authUser;\r\n    stocksUpdatedHere = false;\r\n    processingStock = false;\r\n\r\n    @Input('selectedStock') selectedStock;\r\n\r\n    constructor(\r\n        private stocksService: StocksService,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService,\r\n        private updateStocks: UpdateUserStocksPipe,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.getUserStocks();\r\n        this.getStockInfo();\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    getUserStocks() {\r\n        this.subject.currentUserStocks.subscribe((dt: any) => {\r\n            this.userStocks = dt.stocks;\r\n            this.addedToWatchlist = !!this.userStocks.find(us => us.symbol === this.selectedStock);\r\n        });\r\n    }\r\n\r\n    getStockInfo() {\r\n        this.loader.dataLoading = true;\r\n        this.stocksService.getStockChartData({stock: this.selectedStock}).subscribe(dt => {\r\n            this.chartData = dt.chart;\r\n            this.tableData = new MatTableDataSource(dt.table);\r\n            this.loader.dataLoading = false;\r\n        });\r\n    }\r\n\r\n    axisFormatting(tick) {\r\n        const xAxisComponent = this as any;\r\n        const ticks = xAxisComponent.ticks;\r\n        const tickPresent = ticks.find((t, i) => t === tick && moment(t, 'HH:mm:ss').minute() % 30 === 0);\r\n        return tickPresent ? moment(tickPresent, 'HH:mm:ss').format('HH:mm A') : '';\r\n    }\r\n\r\n    normalizeColName(col): string {\r\n        return normalizeColName(col);\r\n    }\r\n\r\n    isStockFollowed(stock) {\r\n        return !!this.userStocks.find(s => s.name === stock.name);\r\n    }\r\n\r\n\r\n    updateUserStocks(stock) {\r\n        this.processingStock = true;\r\n        const removal = this.isStockFollowed(stock);\r\n        const result = this.updateStocks.transform(this.userStocks, stock, removal);\r\n        this.addedToWatchlist = !removal;\r\n        this.loader.show();\r\n        if (result) {\r\n            this.subscriptions.push(this.stocksService.updateFollowedStocks({\r\n                user_id: this.authUser.id,\r\n                stocks: result\r\n            }).subscribe(dt => {\r\n                this.processingStock = false;\r\n                this.userStocks = dt?.user_stocks || [];\r\n                this.stocksUpdatedHere = true;\r\n                this.loader.hide();\r\n                this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n","<table mat-table [dataSource]=\"tableData\" class=\"mat-elevation-z8\" *ngIf=\"tableData && tableData.data.length\">\r\n\r\n    <!--- Note that these columns can be defined in any order.\r\n          The actual rendered columns are set as a property on the row definition\" -->\r\n    <!-- Symbol Column -->\r\n    <ng-container *ngFor=\"let col of displayedColumns\">\r\n        <ng-container [matColumnDef]=\"col\">\r\n            <th mat-header-cell *matHeaderCellDef> {{normalizeColName(col)}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element[col]}} </td>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"paginationValues\"\r\n               [hidden]=\"!tableData?.data.length\"></mat-paginator>\r\n\r\n<mat-error *ngIf=\"!tableData?.data.length\">No historical prices found</mat-error>\r\n","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {normalizeColName} from '@core/helpers/normalizeTableColumnName';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\n\r\n@Component({\r\n    selector: 'app-historical-tab',\r\n    templateUrl: './historical-tab.component.html',\r\n    styleUrls: ['./historical-tab.component.scss']\r\n})\r\nexport class HistoricalTabComponent implements OnInit {\r\n    @Input('selectedStock') selectedStock;\r\n\r\n    displayedColumns: string[] = ['date', 'price', 'change', 'changePercent', 'open', 'volume'];\r\n    tableData;\r\n    paginationValues = [10, 25, 100];\r\n\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n    constructor(\r\n        private stocksService: StocksService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.stocksService.getStockHistoricalPrices({stock: this.selectedStock}).subscribe(dt => {\r\n            this.tableData = new MatTableDataSource(dt.historical);\r\n            this.tableData.paginator = this.paginator;\r\n        });\r\n    }\r\n\r\n    normalizeColName(col): string {\r\n        return normalizeColName(col);\r\n    }\r\n\r\n}\r\n","<div class=\"stock-content\">\r\n    <div class=\"major-indexes\">\r\n        <h2>Major indexes</h2>\r\n        <div class=\"stocks-list-container\">\r\n            <div class=\"spinner-container\">\r\n                <mat-spinner [diameter]=\"25\" *ngIf=\"dataLoading ==='loading'\"></mat-spinner>\r\n            </div>\r\n            <app-stock-tiles [stocks]=\"indices\" [dragDropDisabled]=\"true\" *ngIf=\"indices?.length > 0\"\r\n                             [followingAllowed]=\"false\"\r\n                             [stockProfileAllowed]=\"true\"></app-stock-tiles>\r\n        </div>\r\n    </div>\r\n    <div class=\"stock-tabs\" *ngIf=\"selectedStock\">\r\n\r\n        <ul class=\"nav nav-tabs\">\r\n            <li [class.active]=\"activeTab==='summary'\">\r\n                <a data-toggle=\"tab\" (click)=\"changeTab('summary')\">\r\n                    Summary</a></li>\r\n\r\n            <li [class.active]=\"activeTab==='historical'\">\r\n                <a data-toggle=\"tab\" (click)=\"changeTab('historical')\">\r\n                    Historical data</a>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"tab-content\">\r\n            <div id=\"summary\">\r\n                <app-summary-tab [selectedStock]=\"selectedStock\" [hidden]=\"activeTab!=='summary'\"></app-summary-tab>\r\n            </div>\r\n            <div id=\"historical\">\r\n                <app-historical-tab [selectedStock]=\"selectedStock\"\r\n                                    [hidden]=\"activeTab!=='historical'\"></app-historical-tab>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <mat-error *ngIf=\"!selectedStock && dataLoading==='finished'\">Please select a tile to view its information\r\n    </mat-error>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-stock-profile',\r\n    templateUrl: './stock-profile.component.html',\r\n    styleUrls: ['./stock-profile.component.scss']\r\n})\r\nexport class StockProfileComponent implements OnInit {\r\n    activeTab = 'summary';\r\n    indices;\r\n    selectedStock;\r\n    stockInfo;\r\n    dataLoading = 'idle';\r\n\r\n    constructor(\r\n        private stocksService: StocksService,\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private subject: SubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.dataLoading = 'loading';\r\n        this.subject.currentIndices.subscribe(dt => {\r\n            if (dt.length > 0) {\r\n                this.dataLoading = 'finished';\r\n                this.indices = dt;\r\n            }\r\n        });\r\n        this.selectedStock = this.route.snapshot?.params?.symbol?.toUpperCase();\r\n    }\r\n\r\n\r\n    changeTab(tab) {\r\n        this.activeTab = tab;\r\n    }\r\n\r\n    openStockProfile(stock) {\r\n        this.router.navigateByUrl('/test', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate([`stocks/${stock}/analytics`])\r\n        );\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {StockProfileComponent} from '@app/stocks/stock-profile/stock-profile.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'analytics',\r\n        component: StockProfileComponent,\r\n        data: {\r\n            title: 'Stock profile',\r\n        }\r\n    },\r\n    {\r\n        path: ':symbol/analytics',\r\n        component: StockProfileComponent,\r\n        data: {\r\n            title: 'Stock profile',\r\n        }\r\n    },\r\n\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class StocksRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {StocksRoutingModule} from './stocks-routing.module';\r\nimport {StockProfileComponent} from '@app/stocks/stock-profile/stock-profile.component';\r\nimport {SummaryTabComponent} from '@app/stocks/stock-profile/summary-tab/summary-tab.component';\r\nimport {HistoricalTabComponent} from '@app/stocks/stock-profile/historical-tab/historical-tab.component';\r\nimport {NgxChartsModule} from '@swimlane/ngx-charts';\r\nimport {SharedModule} from '@shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        StockProfileComponent,\r\n        SummaryTabComponent,\r\n        HistoricalTabComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        StocksRoutingModule,\r\n        NgxChartsModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class StocksModule {\r\n}\r\n"]}