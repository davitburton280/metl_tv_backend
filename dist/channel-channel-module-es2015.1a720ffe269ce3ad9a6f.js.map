{"version":3,"sources":["webpack:///src/app/channel/components/channel-info/channel-info.component.html","webpack:///src/app/channel/components/channel-info/channel-info.component.ts","webpack:///src/app/channel/components/channel-sorting/channel-sorting.component.html","webpack:///src/app/channel/components/channel-sorting/channel-sorting.component.ts","webpack:///src/app/channel/components/playlist-videos/playlist-videos.component.html","webpack:///src/app/channel/components/playlist-videos/playlist-videos.component.ts","webpack:///src/app/channel/components/playlist-videos/new-video-player/new-video-player.component.ts","webpack:///src/app/channel/components/playlist-videos/new-video-player/new-video-player.component.html","webpack:///src/app/channel/dialogs/create-playlist-dialog/create-playlist-dialog.component.ts","webpack:///src/app/channel/dialogs/create-playlist-dialog/create-playlist-dialog.component.html","webpack:///src/app/channel/dialogs/confirm-dialog/confirm-dialog.component.ts","webpack:///src/app/channel/dialogs/confirm-dialog/confirm-dialog.component.html","webpack:///src/app/channel/components/create-playlist-btn/create-playlist-btn.component.ts","webpack:///src/app/channel/components/create-playlist-btn/create-playlist-btn.component.html","webpack:///src/app/channel/pages/main-channel-page/main-channel-page.component.ts","webpack:///src/app/channel/pages/main-channel-page/main-channel-page.component.html","webpack:///src/app/channel/pages/watchlist-page/watchlist-page.component.html","webpack:///src/app/channel/pages/watchlist-page/watchlist-page.component.ts","webpack:///src/app/channel/pages/edit-channel-profile/edit-channel-profile.component.html","webpack:///src/app/channel/pages/edit-channel-profile/edit-channel-profile.component.ts","webpack:///src/app/channel/pages/about-channel/about-channel.component.html","webpack:///src/app/channel/pages/about-channel/about-channel.component.ts","webpack:///src/app/channel/pages/playlist-channel/playlist-channel.component.html","webpack:///src/app/channel/pages/playlist-channel/playlist-channel.component.ts","webpack:///src/app/channel/pages/channel-vidoes/channel-videos.component.html","webpack:///src/app/channel/pages/channel-vidoes/channel-videos.component.ts","webpack:///src/app/channel/pages/channel-vidoes/channel-vidos-list/channel-vidos-list.component.html","webpack:///src/app/channel/pages/channel-vidoes/channel-vidos-list/channel-vidos-list.component.ts","webpack:///src/app/channel/pages/channel-vidoes/channel-vidos-list/channel-vidos-list-item/channel-vidos-list-item.component.html","webpack:///src/app/channel/pages/channel-vidoes/channel-vidos-list/channel-vidos-list-item/channel-vidos-list-item.component.ts","webpack:///src/app/channel/pages/sub-page/sub-page.component.html","webpack:///src/app/channel/pages/sub-page/sub-page.component.ts","webpack:///src/app/channel/channel-routing.module.ts","webpack:///src/app/shared/components/video-js/video-js.component.ts","webpack:///src/app/shared/components/video-js/video-js.component.html","webpack:///src/app/shared/components/categories/categories.component.ts","webpack:///src/app/shared/components/categories/categories.component.html","webpack:///src/app/shared/components/videos-list-holder/videos-list-holder.component.html","webpack:///src/app/shared/components/videos-list-holder/videos-list-holder.component.ts","webpack:///src/app/shared/components/video-regular-player/video-regular-player.component.ts","webpack:///src/app/shared/components/video-regular-player/video-regular-player.component.html","webpack:///src/app/shared/pipes/convert-to-currency.pipe.ts","webpack:///src/app/channel/channel.module.ts"],"names":["ChannelInfoComponent","console","log","this","channelData","ChannelSortingComponent","_channelsService","_route","_category","menuShow","params","subscribe","_groupId","id","getCategory","e","_searchKey","target","value","getChannelVideosByChannelId","category","search","getChannelCategory","data","channelCategory","checked","some","push","filter","obj","_uploadDataString","uploadDate","doSomething","show","AppPlaylistVideosComponent","_newPlayListService","_getIds","dataSourcePlayListVideosState$","newPlayListVideosState$","state$","getVideos","_ids","getVideosPlayListById","playlist_id","user_id","videoPath","NewVideoPlayerComponent","_newPlayListVideo","startedPlay","videoplayer","nativeElement","play","setTimeout","pause","paused","pauseVideo","CreatePlaylistDialogComponent","_fb","dialogRef","_newPlaylistService","_unsubscribe$","Subject","_formBuilder","createPlayListFormGroup","group","name","required","privacy","get","description","createPlayList","close","create","ConfirmDialogComponent","_channelService","confirm","func","pipe","takeUntil","channelVideoState$","deleteVideo","ids","setLoading","updatePrivate","video_id","closeDialogConfirm","CreatePlaylistBtnComponent","dialog","open","height","width","panelClass","openCreatePlayListDialog","MainChannelPageComponent","_userInfoService","_currentUserData","_userInfo","channel","WatchlistPageComponent","videoService","subjectService","router","getExactParams","stocksService","subject","cdr","apiUrl","subscriptions","userStocks","filteredStocks","stocksLoading","getStocksSearch","s","getSearchResults","currentUserStocks","d","initial","dt","stocks","username","localStorage","setItem","setStocksSearch","us","toLowerCase","includes","updateFollowedStocks","authUser","user_stocks","changeUserStocks","empty","length","detectChanges","sendData","order_type","rows","JSON","stringify","dragdrop","updateUserStocksPriority","hasOwnProperty","token","maxWidth","maxHeight","afterClosed","forEach","unsubscribe","openModal","EditChannelProfileComponent","uploadFile","coverShowImg","avatarShowImg","discardORSave","_fetchChannelDataById","channelUpdateFormGroup","getChanelByID","cover","avatar","coverImgSrc","_imgCoverSuccess","avatarImgSrc","Boolean","patchValue","event","shape","title","file","files","imageCoverFile","blob","reader","FileReader","onload","result","toString","readAsDataURL","imageAvatarFile","fdCover","FormData","append","path","fdAvatar","_imgAvatarSuccess","invalid","UPDATE_FORM_DATA_GROUP","updateChannel","createImage","updateChannelInfo","AboutChannelComponent","updateDescGroup","desc","showForm","PlaylistChannelComponent","dataSourcePlayListState$","newPlaylistState$","getAllPlayList","ChannelVideosComponent","_getParamsInRout","channelVideosStateData$","_getVideos","ChannelVidosListComponent","videosList","ChannelVidosListItemComponent","_dialog","_getAuthInfo","videosItem","_authUser","updatePrivacy","privacy_id","deleteChannelVideo","filename","SubPageComponent","getChannelSubscription","subscribers","routes","component","children","redirectTo","pathMatch","ChannelRoutingModule","forChild","VideoJsComponent","elementRef","initPlayer","video","document","getElementsByTagName","videoUrl","videoData","setAttribute","player","dispose","CategoriesComponent","VideosListHolderComponent","toastr","videoLoading","trackByElement","videos","removable","_getUserInfo","r","navigate","route","queryParams","navigateByUrl","skipLocationChange","then","confirmed","removeVideo","success","tag","url","VideoRegularPlayerComponent","ConvertToCurrencyPipe","currency","ChannelModule"],"mappings":"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,SAASC,qBAAqB,SAAS,GACrD/N,KAAKgO,SAAW,IAAU,kBAAoBhO,KAAKiO,UAAUlB,SAC7Dc,EAAMK,aAAa,MAAOlO,KAAKgO,W,6CAZ1ByB,I,uBAAAA,EAA2B,6NCTxC,gBACI,kBAEA,gBACJ,S,qNDKO,G,6XEHA,a,MAAMC,EAET,UAAU3O,EAAe4O,EAAW,WAChC,GAAiB,YAAbA,EACA,OAAO,IAAa5O,G,6CAJnB2O,I,iDAAAA,EAAqB,U,GAA3B,G,2CC8CA,a,MAAME,G,8BAAAA,I,oDAAAA,IAAa,SARb,CACL,IACA,IACA,KACA,O,GAID,G,KApBC,GAAsB,ujCALtB,EACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,GACA,EACA,GACA,GAAuB,qH,KARvB,GAAyB,ujCAPzB,EACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,GACA,EACA,GACA,GAAuB,qH,KAFvB,EAA0B,ujCAb1B,EACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,GACA,EACA,GACA,GAAuB","file":"x","sourcesContent":["<div class=\"images-box\">\r\n    <div class=\"images-cover\">\r\n        <img class=\"images-cover-create c1\" [src]=\"channelData?.cover|getImgPath:'images'\" alt=\"\">\r\n    </div>\r\n    <div class=\"images-avatar\">\r\n        <img *ngIf=\"channelData?.avatar\" [src]=\"channelData?.avatar|getImgPath:'images'\" alt=\"\">\r\n        <mat-icon *ngIf=\"!channelData?.avatar\">add_a_photo</mat-icon>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"channel-desc\">\r\n    <div class=\"box\">\r\n        <div class=\"group-title\">\r\n            <p class=\"title\">\r\n                {{channelData?.name}}\r\n            </p>\r\n        </div>\r\n        <div class=\"channel-status-members\">\r\n            <div class=\"channel-status-img\">\r\n                <mat-icon>public</mat-icon>\r\n                <span class=\"channel-status\">public channel</span>\r\n            </div>\r\n            <div class=\"members-count\">\r\n                <span>{{channelData?.subscribers_count}} members</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"edit-btn-content\">\r\n        <a [routerLink]=\"channelData?.id\"\r\n           class=\"edit-channel-btn\"\r\n           type=\"button\">\r\n\r\n            <mat-icon>edit</mat-icon>\r\n            Edit channel\r\n        </a>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {ChanelInterface} from '@core/interfaces';\r\n\r\n@Component({\r\n    selector: 'app-channel-info',\r\n    templateUrl: 'channel-info.component.html',\r\n    styleUrls: ['channel-info.component.scss']\r\n})\r\n\r\nexport class ChannelInfoComponent implements OnInit, OnDestroy {\r\n    @Input() channelData: ChanelInterface;\r\n    public coverImgSrc: string | undefined;\r\n    public avatarImgSrc: string | undefined;\r\n\r\n    constructor() {\r\n        console.log(this.channelData, 'GO GO GO');\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"sorting-block\">\r\n    <div class=\"sorting-search\">\r\n        <input type=\"text\"\r\n               (keyup)=\"doSomething($event)\"\r\n               placeholder=\"Search...\">\r\n        <mat-icon>search</mat-icon>\r\n    </div>\r\n    <div class=\"contenier\">\r\n\r\n        <button\r\n            mat-raised-button\r\n            style=\"margin-left: 20px\"\r\n            mat-button (click)=\"show()\">Filter</button>\r\n\r\n        <div class=\"sorting_date-type\" *ngIf=\"menuShow\">\r\n            <div class=\"category_stock-list\">\r\n                <section class=\"example-section\">\r\n                    <mat-checkbox\r\n                        *ngFor=\"let category of channelCategory\"\r\n                        class=\"example-margin\"\r\n                        (change)=\"setValueCategory($event,category.id)\"\r\n                    >\r\n                        {{category.name}}\r\n                    </mat-checkbox>\r\n                </section>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Select upload Date</mat-label>\r\n                    <mat-select (valueChange)=\"uploadDataFunc($event)\">\r\n                        <mat-option value=\"1\">LastHour</mat-option>\r\n                        <mat-option value=\"2\">Today</mat-option>\r\n                        <mat-option value=\"3\">This Week</mat-option>\r\n                        <mat-option value=\"4\">This Mount</mat-option>\r\n                        <mat-option value=\"5\">This year</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"divdir\" *ngIf=\"menuShow\" (click)=\"show()\" (click)=\"show()\"></div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\nimport { ChannelCategoryInterface } from '@core/interfaces/channel-vidos.interface';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { VIDEO_FILTERS } from '@core/constants/global';\r\n\r\n@Component({\r\n    selector: 'app-channel-sorting',\r\n    templateUrl: 'channel-sorting.component.html',\r\n    styleUrls: ['channel-sorting.component.scss']\r\n})\r\n\r\nexport class ChannelSortingComponent implements OnInit, OnDestroy {\r\n    public channelCategory: ChannelCategoryInterface[] | undefined;\r\n    private _category: number[] = [];\r\n    private _uploadDataString: number | undefined;\r\n    private _groupId: number | undefined;\r\n    private _searchKey: string | '';\r\n    public menuShow = false;\r\n\r\n    constructor(\r\n        private _channelsService: ChannelsService,\r\n        private _route: ActivatedRoute\r\n    ) {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this._groupId = params.id;\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getCategory();\r\n    }\r\n\r\n    public doSomething(e: any) {\r\n        this._searchKey = e.target.value;\r\n        const obj = {\r\n            id: this._groupId,\r\n            category: this._category,\r\n            search: this._searchKey\r\n        };\r\n        this._channelsService.getChannelVideosByChannelId(obj);\r\n    }\r\n\r\n    public getCategory() {\r\n        this._channelsService.getChannelCategory()\r\n            .subscribe((data: ChannelCategoryInterface[]) => {\r\n                this.channelCategory = data;\r\n            });\r\n    }\r\n\r\n    public setValueCategory(e: any, category) {\r\n        if (e.checked && !this._category.some(data => data === category)) {\r\n            this._category.push(category);\r\n        } else {\r\n            this._category = this._category.filter(data => data !== category);\r\n        }\r\n        const obj = {\r\n            id: this._groupId,\r\n            category: this._category,\r\n            search: this._searchKey\r\n        };\r\n        console.log(obj);\r\n        this._channelsService.getChannelVideosByChannelId(obj);\r\n    }\r\n\r\n    public uploadDataFunc(e: any) {\r\n        this._uploadDataString = e;\r\n        const obj = {\r\n            id: this._groupId,\r\n            category: this._category,\r\n            search: this._searchKey,\r\n            uploadDate: this._uploadDataString\r\n        };\r\n        this._channelsService.getChannelVideosByChannelId(obj);\r\n    }\r\n\r\n    public show() {\r\n        this.menuShow = !this.menuShow;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<ng-container *ngIf=\"(dataSourcePlayListVideosState$ | async) as state\">\r\n    <div class=\"video-playlist-wrapper\">\r\n        <div class=\"video-content\" >\r\n            <app-new-video-player\r\n                *ngIf=\"videoPath\"\r\n                [videoPath]=\"videoPath\"></app-new-video-player>\r\n\r\n            <app-new-video-player\r\n                *ngIf=\"!videoPath && state.videos.videos\"\r\n                [videoPath]=\"state.videos.videos[0]\">\r\n            </app-new-video-player>\r\n        </div>\r\n\r\n\r\n        <div class=\"video-playlist\">\r\n            <div class=\"playlist-desc\">\r\n                <div class=\"playlist-desc-name\">\r\n                    <h3>\r\n                        <span class=\"naem\">{{state.videos.name}}</span>\r\n                        <span class=\"playlist-video-count\">1/30</span>\r\n                    </h3>\r\n                </div>\r\n                <div class=\"playlist-privacy\">\r\n                <span>\r\n\r\n                </span>\r\n                    <span>\r\n                    Private\r\n                </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"video-list\">\r\n                <div class=\"video-list-item\" *ngFor=\"let video of state.videos.videos;let i = index\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"videos\"\r\n                        [defaultChecked]=\"(i === 0)\"\r\n                        (change)=\"getPLayVideoData(video)\"\r\n                        [id]=\"video.id\">\r\n                    <label [for]=\"video.id\">\r\n                        <div class=\"video-cover\">\r\n\r\n                            <img [src]=\"video?.thumbnail|getImgPath:'images'\" alt=\"\">\r\n                        </div>\r\n                        <div class=\"video-name\">\r\n                            <p class=\"video-name-text\"> {{video.name}}</p>\r\n                        </div>\r\n                    </label>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { NewPlaylistService } from '@core/services/new-playlist.service';\r\nimport { Observable } from 'rxjs';\r\nimport { NewPlayListVideosInitialState } from '@core/interfaces/new-playlist.interface';\r\n\r\n@Component({\r\n    selector: 'app-playlist-videos',\r\n    templateUrl: 'playlist-videos.component.html',\r\n    styleUrls: ['playlist-videos.component.scss']\r\n})\r\n\r\nexport class AppPlaylistVideosComponent implements OnInit, OnDestroy {\r\n    private _ids: number | undefined;\r\n    public dataSourcePlayListVideosState$: Observable<NewPlayListVideosInitialState> | undefined;\r\n    public videoPath: any;\r\n\r\n    constructor(\r\n        private _route: ActivatedRoute,\r\n        private _newPlayListService: NewPlaylistService\r\n    ) {\r\n        this._getIds();\r\n        this.dataSourcePlayListVideosState$ =\r\n            this._newPlayListService.newPlayListVideosState$.state$;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getVideos();\r\n        console.log(this.dataSourcePlayListVideosState$);\r\n    }\r\n\r\n    private _getIds() {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this._ids = params.id;\r\n        });\r\n    }\r\n\r\n    private getVideos() {\r\n        const params = {\r\n            playlist_id: this._ids,\r\n            user_id: 1\r\n        };\r\n        this._newPlayListService.getVideosPlayListById(params);\r\n    }\r\n\r\n    public getPLayVideoData(e: any) {\r\n        this.videoPath = e;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NewPlaylistService } from '@core/services/new-playlist.service';\r\n\r\n@Component({\r\n    selector: 'app-new-video-player',\r\n    templateUrl: 'new-video-player.component.html',\r\n    styleUrls: ['new-video-player.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\n\r\nexport class NewVideoPlayerComponent implements OnInit, OnDestroy {\r\n    @Input() public videoPath: any;\r\n    @ViewChild('videoPlayer') videoplayer: any;\r\n    public startedPlay = false;\r\n    public show = false;\r\n\r\n    constructor(\r\n        private _newPlayListVideo: NewPlaylistService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log(this.videoPath, \"Dsadsadsadas\");\r\n    }\r\n\r\n    public pauseVideo(videoplayer) {\r\n        videoplayer.nativeElement.play();\r\n        // this.startedPlay = true;\r\n        // if(this.startedPlay == true)\r\n        // {\r\n        setTimeout(() => {\r\n            videoplayer.nativeElement.pause();\r\n            if (videoplayer.nativeElement.paused) {\r\n                this.show = !this.show;\r\n            }\r\n        }, 5000);\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"video-player-content\">\r\n    <!--        Video Taag or Ifrem-->\r\n    <div class=\"video\">\r\n        <video (canplay)=\"pauseVideo(videoplayer)\"\r\n               [src]=\"videoPath?.filename|getImgPath: 'videos'\"\r\n               controls\r\n               #videoPlayer>\r\n        </video>\r\n    </div>\r\n\r\n    <div class=\"videos-desc\">\r\n        <div class=\"select-video\">\r\n            <h2>{{videoPath?.name}}</h2>\r\n        </div>\r\n        <ul class=\"videos-desc-list\">\r\n            <li class=\"videos-desc-list-item\">\r\n                        <span class=\"material-symbols-outlined\">\r\n                            visibility\r\n                        </span>\r\n                <span class=\"like\">\r\n                            {{videoPath?.views}}\r\n                        </span>\r\n            </li>\r\n            <li class=\"videos-desc-list-item\">\r\n                        <span class=\"material-symbols-outlined\">\r\n                            thumb_up\r\n                        </span>\r\n                <span class=\"like\">\r\n                            {{videoPath?.likes}}\r\n                        </span>\r\n            </li>\r\n            <li class=\"videos-desc-list-item\">\r\n                        <span class=\"material-symbols-outlined\">\r\n                             thumb_down\r\n                        </span>\r\n                <span class=\"dislike\">\r\n                            {{videoPath?.dislikes}}\r\n                        </span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { NewPlaylistService } from '@core/services/new-playlist.service';\r\n\r\n@Component({\r\n    selector: 'app-create-playlist-dialog',\r\n    templateUrl: 'create-playlist-dialog.component.html',\r\n    styleUrls: ['create-playlist-dialog.component.scss']\r\n})\r\n\r\nexport class CreatePlaylistDialogComponent implements OnInit, OnDestroy {\r\n    private _unsubscribe$ = new Subject<void>();\r\n    public createPlayListFormGroup: FormGroup | any;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private dialogRef: MatDialogRef<CreatePlaylistDialogComponent>,\r\n        private _newPlaylistService: NewPlaylistService,\r\n        @Inject(MAT_DIALOG_DATA) public data: any\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._formBuilder();\r\n    }\r\n\r\n    private _formBuilder(): void {\r\n        this.createPlayListFormGroup = this._fb.group({\r\n            name: [null, Validators.required],\r\n            privacy: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n    public create() {\r\n        const obj = {\r\n            name: this.createPlayListFormGroup.get('name').value,\r\n            description: 'text',\r\n            privacy: this.createPlayListFormGroup.get('privacy').value\r\n        };\r\n        this._newPlaylistService.createPlayList(obj);\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}\r\n","<div class=\"playlist-dialog\">\r\n    <header class=\"playlist-dialog-header\">\r\n        <h2>Create PlayList</h2>\r\n        <span class=\"material-symbols-outlined\" (click)=\"close()\">\r\n            close\r\n        </span>\r\n    </header>\r\n\r\n    <div class=\"list\">\r\n        <div class=\"list-item\">\r\n            <mat-checkbox class=\"example-margin\">\r\n\r\n                PlayList Name\r\n            </mat-checkbox>\r\n            <span class=\"material-symbols-outlined\">\r\n                        lock\r\n                    </span>\r\n        </div>\r\n        <div class=\"list-item\">\r\n            <mat-checkbox class=\"example-margin\">\r\n\r\n                PlayList Name\r\n            </mat-checkbox>\r\n            <span class=\"material-symbols-outlined\">\r\n                        lock\r\n                    </span>\r\n        </div>\r\n        <div class=\"list-item\">\r\n            <mat-checkbox class=\"example-margin\">\r\n\r\n                PlayList Name\r\n            </mat-checkbox>\r\n            <span class=\"material-symbols-outlined\">\r\n                        lock\r\n                    </span>\r\n        </div>\r\n    </div>\r\n    <!--create-playList start-->\r\n    <div class=\"create-playList\">\r\n        <!--create-playList button start-->\r\n        <!--        (click)=\"showForm()\"-->\r\n        <button>\r\n\r\n            <!--create-playList button icon start-->\r\n            <span class=\"material-symbols-outlined\">\r\n            queue_music\r\n        </span>\r\n            <!--create-playList button icon end-->\r\n\r\n            <!--create-playList button text start-->\r\n            <span>\r\n            Create playlist\r\n       </span>\r\n            <!--create-playList button text end-->\r\n\r\n        </button>\r\n\r\n    </div>\r\n    <!--create-playList end-->\r\n    <form [formGroup]=\"createPlayListFormGroup\">\r\n        <div class=\"form-group\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput placeholder=\"Name\" formControlName=\"name\">\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Privacy</mat-label>\r\n                <mat-select formControlName=\"privacy\">\r\n                    <mat-option [value]=\"1\">\r\n                        <span>Private</span>\r\n                        <span>only you can view</span>\r\n                    </mat-option>\r\n                    <mat-option [value]=\"0\">\r\n                        <span>Public</span>\r\n                        <span>Anyone can search for and view</span>\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n\r\n    </form>\r\n\r\n    <div class=\"submit-btn\">\r\n        <button (click)=\"create()\">\r\n            Create Playlist\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\n\r\n@Component({\r\n    selector: 'app-confirm-dialog',\r\n    templateUrl: 'confirm-dialog.component.html',\r\n    styleUrls: ['confirm-dialog.component.scss']\r\n})\r\n\r\nexport class ConfirmDialogComponent implements OnInit, OnDestroy {\r\n    private _unsubscribe$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n        private _channelService: ChannelsService,\r\n        @Inject(MAT_DIALOG_DATA) public data: any\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n\r\n    public closeDialogConfirm() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public confirm() {\r\n        console.log('remove');\r\n        switch (this.data.confirm) {\r\n            case 'remove':\r\n                this.data.func.pipe(\r\n                    takeUntil(this._unsubscribe$)\r\n                )\r\n                    .subscribe((data: any) => {\r\n                        this._channelService.channelVideoState$.deleteVideo(this.data.ids);\r\n                        this._channelService.channelVideoState$.setLoading(false);\r\n                        this.dialogRef.close();\r\n                    });\r\n                break;\r\n            case 'Privicy':\r\n                this.data.func.pipe(\r\n                    takeUntil(this._unsubscribe$)\r\n                )\r\n                    .subscribe((data: any) => {\r\n                        this._channelService.channelVideoState$.updatePrivate(this.data.video_id, data.data);\r\n                        this._channelService.channelVideoState$.setLoading(false);\r\n                        this.dialogRef.close();\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}\r\n","<form class=\"confirm_dialog\">\r\n    <div class=\"confirm_dialog-title\">\r\n        <img src=\"assets/img/question_mark.svg\" alt=\"\">\r\n    </div>\r\n\r\n    <div class=\"confirm-question\">\r\n        <p>Are you sure?</p>\r\n    </div>\r\n\r\n    <div class=\"btn-section\">\r\n        <button class=\"remuve-btn\" (click)=\"confirm()\">Confirm</button>\r\n        <button class=\"cancel-btn\" (click)=\"closeDialogConfirm()\">Cancel</button>\r\n    </div>\r\n</form>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CreatePlaylistDialogComponent } from '@app/channel/dialogs';\r\n\r\n@Component({\r\n    selector: 'app-create-playlist-btn',\r\n    templateUrl: 'create-playlist-btn.component.html',\r\n    styleUrls: ['create-playlist-btn.component.scss']\r\n})\r\n\r\nexport class CreatePlaylistBtnComponent implements OnInit, OnDestroy {\r\n\r\n    constructor(\r\n        private dialog: MatDialog\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n\r\n    public openCreatePlayListDialog() {\r\n        const dialogRef = this.dialog.open(CreatePlaylistDialogComponent, {\r\n            height: 'auto',\r\n            width: '350px',\r\n            panelClass: 'custom-dialog-container'\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<!--create-playList start-->\r\n<div class=\"create-playList\">\r\n    <!--create-playList button start-->\r\n    <button (click)=\"openCreatePlayListDialog()\">\r\n\r\n        <!--create-playList button icon start-->\r\n        <span class=\"material-symbols-outlined\">\r\n            queue_music\r\n        </span>\r\n        <!--create-playList button icon end-->\r\n\r\n        <!--create-playList button text start-->\r\n        <span>\r\n            Create playlist\r\n       </span>\r\n        <!--create-playList button text end-->\r\n\r\n    </button>\r\n</div>\r\n<!--create-playList end-->\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ChanelInterface, CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-main-channel-page',\r\n    templateUrl: 'main-channel-page.component.html',\r\n    styleUrls: ['main-channel-page.component.scss']\r\n})\r\n\r\nexport class MainChannelPageComponent implements OnInit, OnDestroy {\r\n    public channelData: ChanelInterface;\r\n\r\n    constructor(private _userInfoService: UserInfoService) {\r\n        this._currentUserData();\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    private _currentUserData() {\r\n        this._userInfoService._userInfo\r\n            .subscribe((data: CurrentUserData) => {\r\n                this.channelData = data?.channel;\r\n            });\r\n    }\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"channel-info-img\">\r\n    <app-channel-info [channelData]=\"channelData\"></app-channel-info>\r\n</div>\r\n\r\n<div class=\"router-block\">\r\n    <ul class=\"router-list\">\r\n        <li class=\"router-list-item\"\r\n            [routerLinkActiveOptions]=\"{exact:true}\"\r\n            #rla=\"routerLinkActive\"\r\n            [routerLinkActive]=\"'active'\">\r\n            <a [routerLink]=\"['watchlist']\">Watchlist</a>\r\n        </li>\r\n\r\n        <li class=\"router-list-item\"\r\n            [routerLinkActiveOptions]=\"{exact:true}\"\r\n            #rla=\"routerLinkActive\"\r\n            [routerLinkActive]=\"'active'\">\r\n            <a [routerLink]=\"['channel-videos',channelData?.id]\">Videos</a>\r\n        </li>\r\n\r\n        <li class=\"router-list-item\"\r\n            [routerLinkActiveOptions]=\"{exact:true}\"\r\n            #rla=\"routerLinkActive\"\r\n            [routerLinkActive]=\"'active'\"\r\n        >\r\n            <a [routerLink]=\"['channel-playlist',channelData?.id]\">Playlist</a>\r\n        </li>\r\n\r\n        <li class=\"router-list-item\"\r\n            [routerLinkActiveOptions]=\"{exact:true}\"\r\n            #rla=\"routerLinkActive\"\r\n            [routerLinkActive]=\"'active'\">\r\n            <a [routerLink]=\"['channel-subscriptions',channelData?.id]\">Contacts</a>\r\n        </li>\r\n\r\n        <li class=\"router-list-item\"\r\n            [routerLinkActiveOptions]=\"{exact:true}\"\r\n            #rla=\"routerLinkActive\"\r\n            [routerLinkActive]=\"'active'\">\r\n            <a [routerLink]=\"['channel-about',channelData?.id]\">About Us</a>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n<div>\r\n    <router-outlet></router-outlet>\r\n</div>\r\n\r\n\r\n","<div class=\"search-add-content-stock\">\r\n    <div class=\"watchlist-search d- w-30\"\r\n         [class.bordered]=\"userStocks?.length > 0\">\r\n        <app-search-stocks-form class=\"d-block search-stocks-component\"\r\n                                *ngIf=\"userStocks?.length > 0\"\r\n                                [whiteForm]=\"true\" [returnSearchText]=\"true\"\r\n                                (search)=\"searchInUserStocks($event)\">\r\n        </app-search-stocks-form>\r\n    </div>\r\n    <div class=\"open-add-stock-modal\" (click)=\"openModal()\">\r\n        <button type=\"button\">\r\n            <mat-icon>add_circle_outline</mat-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div *ngIf=\"filteredStocks && authUser?.channel?.name === authUser?.username\">\r\n    <small class=\"error\" *ngIf=\"userStocks?.length === 0\">\r\n        No stocks added to watchlist</small>\r\n    <app-stock-tiles [stocks]=\"filteredStocks\" [userStocks]=\"userStocks\" *ngIf=\"userStocks?.length > 0\"\r\n                     (updatedStocksList)=\"saveUpdatedStocksList($event)\" [followingAllowed]=\"true\"\r\n                     (updatedStocksPriority)=\"updateStocksPriority($event)\"\r\n    ></app-stock-tiles>\r\n</div>\r\n","import {ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Subscription} from 'rxjs';\r\nimport {Stock} from '@shared/models/stock';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {Router} from '@angular/router';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {StocksListsModalComponent} from '@shared/components/stocks-lists-modal/stocks-lists-modal.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-watchlist-page',\r\n    templateUrl: 'watchlist-page.component.html',\r\n    styleUrls: ['watchlist-page.component.scss']\r\n})\r\n\r\nexport class WatchlistPageComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n    authUser: CurrentUserData | undefined;\r\n    search: string | null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    userStocks: Stock[] = [];\r\n    filteredStocks: Stock[] = [];\r\n\r\n    stocksLoading = 'idle';\r\n\r\n\r\n    @Input() channelUser;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private _userInfoService: UserInfoService,\r\n        private subjectService: SubjectService,\r\n        public router: Router,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe,\r\n        private stocksService: StocksService,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n        private dialog: MatDialog,\r\n    ) {\r\n        this._currentUserData();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.stocksLoading = 'loading';\r\n        this.subscriptions.push(this.subjectService.getStocksSearch().subscribe(s => {\r\n            this.getSearchResults(s);\r\n        }));\r\n        this.subscriptions.push(\r\n            this.subject.currentUserStocks\r\n                .pipe(filter(d => !d.initial))\r\n                .subscribe(dt => {\r\n                    this.userStocks = dt.stocks;\r\n                    this.filteredStocks = this.userStocks;\r\n                    this.stocksLoading = 'finished';\r\n                }));\r\n    }\r\n\r\n    private _currentUserData() {\r\n        this._userInfoService._userInfo\r\n            .subscribe((data: CurrentUserData) => {\r\n                console.log(data?.channel?.name === data?.username);\r\n                // this.authUser = data?.channel;\r\n            });\r\n    }\r\n\r\n    searchInUserStocks(e) {\r\n        localStorage.setItem('searchStock', e.search);\r\n        this.subjectService.setStocksSearch(e.search);\r\n    }\r\n\r\n    getSearchResults(s) {\r\n        this.search = s;\r\n        if (s) {\r\n            this.filteredStocks = this.userStocks.filter(us => us.name.toLowerCase().includes(s));\r\n        } else {\r\n            this.filteredStocks = this.userStocks;\r\n        }\r\n    }\r\n\r\n    saveUpdatedStocksList(stocks) {\r\n        this.stocksLoading = 'loading';\r\n        this.subscriptions.push(this.stocksService.updateFollowedStocks({\r\n            user_id: this.authUser.id,\r\n            ...{stocks}\r\n        }).subscribe(dt => {\r\n            this.userStocks = dt?.user_stocks || [];\r\n            this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n            this.stocksLoading = 'finished';\r\n            this.cdr.detectChanges();\r\n        }));\r\n    }\r\n\r\n    updateStocksPriority(e) {\r\n        const sendData = {\r\n            order_type: 'custom',\r\n            rows: JSON.stringify(e),\r\n            user_id: this.authUser?.id\r\n        };\r\n\r\n        this.subject.changeUserStocks({stocks: e, dragdrop: true});\r\n        this.stocksService.updateUserStocksPriority(sendData).subscribe(dt => {\r\n            localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n        });\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(StocksListsModalComponent, {\r\n            maxWidth: '100vw',\r\n            maxHeight: '100vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            panelClass: 'stocks-lists-modal'\r\n        }).afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n","<section id=\"group-img-edit\" class=\"editCoverDiv\">\r\n    <div class=\"images-box\">\r\n        <div class=\"images-cover\">\r\n            <img class=\"images-cover-create c1\" *ngIf=\"!coverShowImg\" [src]=\"_imgCoverSuccess|getImgPath:'images'\"\r\n                 alt=\"\">\r\n            <img class=\"images-cover-create c2\" *ngIf=\"coverShowImg\" [src]=\"coverImgSrc\" alt=\"\">\r\n            <input type=\"file\" #coverChangeImg hidden (change)=\"createImage($event, 'square')\">\r\n            <button (click)=\"coverChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"images-avatar\">\r\n            <!--            <img *ngIf=\"!coverShowImg\" [src]=\"coverImg|getImgPath:'images'\" alt=\"\">-->\r\n            <img *ngIf=\"!avatarShowImg\" [src]=\"avatarImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <img *ngIf=\"avatarShowImg\" [src]=\"avatarImgSrc\" alt=\"\">\r\n            <!--            <mat-icon *ngIf=\"!avatarImgSrc\">add_a_photo</mat-icon>-->\r\n            <input type=\"file\" #avatarChangeImg hidden (change)=\"createImage($event, 'circle')\">\r\n            <button (click)=\"avatarChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"images-save-btn-box\" *ngIf=\"(avatarImgSrc && discardORSave) || (coverImgSrc && discardORSave)\">\r\n        <button class=\"save-btn\" (click)=\"saveAvatarImage(avatarImgSrc,coverImgSrc)\">Save</button>\r\n        <button class=\"discard-btn\" (click)=\"remuveAvatarImage('','')\">DISCARD</button>\r\n    </div>\r\n</section>\r\n\r\n<form [formGroup]=\"channelUpdateFormGroup\">\r\n    <div class=\"form-group w-80\">\r\n        <input type=\"text\" formControlName=\"name\" placeholder=\"Name\">\r\n    </div>\r\n\r\n\r\n    <div class=\"submit-form\">\r\n        <button (click)=\"updateChannelInfo()\">Save changes</button>\r\n    </div>\r\n</form>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ImgEditCropperComponent} from '@core/components/modals/img-edit-cropper/img-edit-cropper.component';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-edit-channel-profile',\r\n    templateUrl: 'edit-channel-profile.component.html',\r\n    styleUrls: ['edit-channel-profile.component.scss']\r\n})\r\n\r\nexport class EditChannelProfileComponent implements OnInit, OnDestroy {\r\n    private _groupId: number | undefined;\r\n    private imageCoverFile;\r\n    private imageAvatarFile;\r\n    public channelUpdateFormGroup: FormGroup | undefined;\r\n    public coverShowImg = false;\r\n    public avatarShowImg = false;\r\n    public discardORSave = false;\r\n    public _imgCoverSuccess;\r\n    private _imgAvatarSuccess;\r\n    public coverImgSrc;\r\n    public avatarImgSrc;\r\n    private _unsubscribe$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private _route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        private _channelService: ChannelsService,\r\n        private uploadFile: VideoService,\r\n    ) {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this._groupId = params.id;\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._formBuilder();\r\n        this._fetchChannelDataById();\r\n    }\r\n\r\n    private _formBuilder() {\r\n        this.channelUpdateFormGroup = this._fb.group({\r\n            name: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n    private _fetchChannelDataById() {\r\n\r\n        this._channelService.getChanelByID(this._groupId).subscribe(({data}: any) => {\r\n            console.log(data);\r\n            if (data?.cover || data?.avatar) {\r\n                this.coverImgSrc = data?.cover;\r\n                this._imgCoverSuccess = data?.cover;\r\n                this.avatarImgSrc = data?.avatar;\r\n                this.avatarShowImg = !Boolean(data?.avatar);\r\n                this.coverShowImg = !Boolean(data?.cover);\r\n            }\r\n            this.channelUpdateFormGroup.patchValue({\r\n                name: data?.name,\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    public remuveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n    }\r\n\r\n    public createImage(event, shape) {\r\n        const file = event.target.files[0];\r\n        this.dialog.open(ImgEditCropperComponent, {\r\n            maxWidth: '60vw',\r\n            maxHeight: '70vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {\r\n                title: 'Profile Image Cropper',\r\n                shape,\r\n                file\r\n            }\r\n        }).afterClosed()\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    if (dt.shape === 'square') {\r\n                        this.imageCoverFile = dt.blob;\r\n                        this.discardORSave = true;\r\n                        this.coverShowImg = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.coverImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageCoverFile);\r\n                    }\r\n                    if (dt.shape === 'circle') {\r\n                        this.imageAvatarFile = dt.blob;\r\n                        this.avatarShowImg = true;\r\n                        this.discardORSave = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.avatarImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageAvatarFile);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    public saveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n        if (this.coverShowImg) {\r\n            const fdCover = new FormData();\r\n            fdCover.append('image', this.imageCoverFile);\r\n            fdCover.append('belonging', 'group_cover_img');\r\n            fdCover.append('duration', '');\r\n            this.uploadFile.uploadFile(fdCover, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgCoverSuccess = data.path;\r\n                this.coverImgSrc = data.path;\r\n                console.log(this._imgCoverSuccess);\r\n            });\r\n        }\r\n        if (this.avatarShowImg) {\r\n            const fdAvatar = new FormData();\r\n            fdAvatar.append('image', this.imageAvatarFile);\r\n            fdAvatar.append('belonging', 'group_avatar_img');\r\n            fdAvatar.append('duration', '');\r\n            this.uploadFile.uploadFile(fdAvatar, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgAvatarSuccess = data.path;\r\n                // this.coverImgSrc = data.path;\r\n                console.log(this._imgAvatarSuccess);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    public updateChannelInfo() {\r\n        if (this.channelUpdateFormGroup.invalid) {\r\n            return;\r\n        }\r\n        const UPDATE_FORM_DATA_GROUP = {\r\n            name: this.channelUpdateFormGroup.get('name').value,\r\n            cover: this._imgCoverSuccess,\r\n            avatar: this._imgAvatarSuccess,\r\n        };\r\n        this._channelService.updateChannel(this._groupId, UPDATE_FORM_DATA_GROUP).subscribe((data) => {\r\n            console.log(data, 'UPDATE_FORM_DATA_GROUP');\r\n        });\r\n        // console.log(UPDATE_FORM_DATA_GROUP, );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}\r\n","<section class=\"about-channel\">\r\n    <header class=\"about-channel-title\">\r\n        <h1 class=\"about-channel-title-text\">Description</h1>\r\n        <button class=\"update-show\"\r\n                (click)=\"showForm()\"\r\n                >Update Description</button>\r\n    </header>\r\n    <main class=\"about-channel-desc\" *ngIf=\"!show\">\r\n            <p class=\"about-channel-desc\">\r\n                dsadasdasdasdsadasdasdasdadadasda\r\n            </p>\r\n    </main>\r\n    <form class=\"about-channel-form\"\r\n          *ngIf=\"show\"\r\n          [formGroup]=\"updateDescGroup\">\r\n        <div class=\"form-group\">\r\n            <textarea  formControlName=\"desc\" placeholder=\"Description\">\r\n\r\n            </textarea>\r\n        </div>\r\n        <div style=\"display: flex;\r\n    justify-content: flex-end;\">\r\n            <button class=\"submit-btn\">Save</button>\r\n        </div>\r\n    </form>\r\n</section>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-about-channel',\r\n    templateUrl: 'about-channel.component.html',\r\n    styleUrls: ['about-channel.component.scss']\r\n})\r\n\r\nexport class AboutChannelComponent implements OnInit, OnDestroy {\r\n    public updateDescGroup: FormGroup | undefined;\r\n    public show = false;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._formBuilder();\r\n    }\r\n\r\n    private _formBuilder() {\r\n        this.updateDescGroup = this._fb.group({\r\n            desc: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n    public showForm() {\r\n        this.show = !this.show;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"playlist-create-btn\">\r\n    <app-create-playlist-btn></app-create-playlist-btn>\r\n</div>\r\n<ng-container *ngIf=\"(dataSourcePlayListState$ | async) as state\">\r\n    <div class=\"video-group\">\r\n        <a *ngFor=\"let playList of state.playLists\"\r\n           [routerLink]=\"['/channel/channel-playlist/1/playList',playList.id]\">\r\n            <div class=\"video-group-list\">\r\n                <div class=\"video-group-list-cover\">\r\n                    <img class=\"images-cover-create c1\"\r\n                         *ngIf=\"playList?.videos[0]\"\r\n                         [src]=\"playList?.videos[0]?.thumbnail|getImgPath:'images'\"\r\n                         alt=\"\">\r\n\r\n                    <img class=\"images-cover-create c1\"\r\n                         *ngIf=\"!playList?.videos[0]\"\r\n                         src=\"assets/img/playList.png\"\r\n                         alt=\"\">\r\n                </div>\r\n                <div class=\"hover-shadow\"></div>\r\n                <p class=\"playlist-name\">Playlist {{playList.name}}</p>\r\n            </div>\r\n        </a>\r\n    </div>\r\n</ng-container>\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { NewPlaylistService } from '@core/services/new-playlist.service';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { NewPlayListInitialState } from '@core/interfaces/new-playlist.interface';\r\n\r\n@Component({\r\n    selector: 'app-playlist-channel',\r\n    templateUrl: './playlist-channel.component.html',\r\n    styleUrls: ['playlist-channel.component.scss']\r\n})\r\n\r\nexport class PlaylistChannelComponent implements OnInit, OnDestroy {\r\n    public dataSourcePlayListState$: Observable<NewPlayListInitialState> | undefined;\r\n    public createPostGroup: FormGroup | unknown;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private _newPlaylistService: NewPlaylistService\r\n    ) {\r\n        this.dataSourcePlayListState$ = this._newPlaylistService.newPlaylistState$.state$;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._newPlaylistService.getAllPlayList();\r\n    }\r\n\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"search-component\">\r\n    <app-channel-sorting></app-channel-sorting>\r\n</div>\r\n\r\n<div *ngIf=\"( channelVideosStateData$ | async) as state\">\r\n    <div class=\"table-container\" *ngIf=\"state.channelVideo\">\r\n\r\n        <app-channel-videos-list [videosList]=\"state.channelVideo\">\r\n\r\n        </app-channel-videos-list>\r\n\r\n\r\n    </div>\r\n    <div class=\"no_result\"\r\n         *ngIf=\"(!state.channelVideo?.length  && !state.loading)\">\r\n        <div class=\"no_result-img\">\r\n            <img src=\"assets/img/Error-amico.svg\" alt=\"amico\">\r\n        </div>\r\n        <div class=\"no_result-title\">\r\n            <h2>No Result Found</h2>\r\n        </div>\r\n        <div class=\"no_result-desc\">\r\n            <span>\r\n                We can`t find any item matching\r\n            </span>\r\n            <span>\r\n                your search\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"( state.loading)\" style=\"height: 400px;position: relative;\">\r\n        <app-loading></app-loading>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { ChannelVideosInitialStateInterface } from '@core/interfaces/channel-vidos.interface';\r\n\r\n@Component({\r\n    selector: 'app-channel-videos',\r\n    templateUrl: 'channel-videos.component.html',\r\n    styleUrls: ['channel-videos.component.scss']\r\n})\r\n\r\nexport class ChannelVideosComponent implements OnInit, OnDestroy {\r\n    private _groupId: number | undefined;\r\n    public channelVideosStateData$: Observable<ChannelVideosInitialStateInterface> | undefined;\r\n\r\n    constructor(\r\n        private _channelsService: ChannelsService,\r\n        private _route: ActivatedRoute\r\n    ) {\r\n        this._getParamsInRout();\r\n        this.channelVideosStateData$ = this._channelsService.channelVideoState$.state$;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._getVideos();\r\n    }\r\n\r\n    private _getVideos() {\r\n        this._channelsService.getChannelVideosByChannelId({ id: this._groupId });\r\n    }\r\n\r\n    private _getParamsInRout() {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this._groupId = params.id;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","\r\n\r\n\r\n<!--channel-videos-list start-->\r\n<div class=\"channel-videos-list\">\r\n\r\n    <!--    channel-videos-list-item start-->\r\n    <div class=\"channel-videos-list-item-component\" *ngFor=\"let video of videosList\">\r\n        <app-channel-videos-list-item\r\n            [videosItem]=\"video\">\r\n        </app-channel-videos-list-item>\r\n    </div>\r\n    <!--    channel-videos-list-item end-->\r\n\r\n</div>\r\n<!--channel-videos-list end-->\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { ChannelVidosDataListInterface } from '@core/interfaces/channel-vidos.interface';\r\n\r\n@Component({\r\n    selector: 'app-channel-videos-list',\r\n    templateUrl: 'channel-vidos-list.component.html',\r\n    styleUrls: ['channel-vidos-list.component.scss']\r\n})\r\n\r\nexport class ChannelVidosListComponent implements OnInit, OnDestroy {\r\n    @Input() videosList: ChannelVidosDataListInterface[] | undefined;\r\n    constructor() {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log(this.videosList, 'videosList');\r\n    }\r\n\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<!--    channel-videos-list-item start-->\r\n<!--var channel-videos-list-item= @-->\r\n<div class=\"channel-videos-list-item\">\r\n    <!--    @-item start-->\r\n    <div class=\"channel-videos-list-item-img\">\r\n        <!--    @-item-img start-->\r\n        <img [src]=\"videosItem.thumbnail|getImgPath:'images'\" alt=\"\">\r\n        <!--    @-item-img end-->\r\n\r\n        <!--    @-item-videos-action start-->\r\n        <div class=\"videos-action\">\r\n            <mat-icon (click)=\"show()\">more_horiz</mat-icon>\r\n\r\n            <!--    @-item-videos-action-list-box start-->\r\n            <div class=\"action-list-box\" *ngIf=\"menuShow\">\r\n\r\n                <!--    @-item-videos-action-list start-->\r\n                <ul class=\"action-list\">\r\n                    <li >\r\n                        <mat-icon (click)=\"openConfirmDialogPrivicy()\">\r\n                            {{ videosItem.privacy_id === 1 ? 'visibility_on': 'visibility_off' }}</mat-icon>\r\n\r\n                    </li>\r\n                    <li >\r\n                        <mat-icon\r\n                            (click)=\"openConfirmDialogRemuve()\"\r\n                        >delete_forever</mat-icon>\r\n                    </li>\r\n                </ul>\r\n                <!--    @-item-videos-action-list end-->\r\n\r\n            </div>\r\n            <!--    @-item-videos-action-list-box end-->\r\n\r\n        </div>\r\n        <!--    @-item-videos-action end-->\r\n\r\n        <!--    @-item-videos-duration start-->\r\n        <div class=\"video-duration\">\r\n            <span>{{videosItem.duration}}</span>\r\n        </div>\r\n        <!--    @-item-videos-duration end-->\r\n\r\n    </div>\r\n    <!--    @-item end-->\r\n\r\n    <div class=\"videos-desc\">\r\n        <div class=\"videos-desc-img\">\r\n            <img [src]=\"''|getImgPath:'images'\" alt=\"\">\r\n        </div>\r\n        <div class=\"videos-desc-text\">\r\n            <p class=\"videos-name\">{{videosItem.name}}</p>\r\n            <p class=\"videos-create-name\"></p>\r\n            <p class=\"videos-views-date\">\r\n                <span class=\"views\">{{videosItem.views}} views</span>\r\n                <span class=\"date\"></span>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!--    channel-videos-list-item end-->\r\n<div class=\"divdir\" *ngIf=\"menuShow\" (click)=\"show()\"></div>\r\n\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { ChannelVidosDataListInterface } from '@core/interfaces/channel-vidos.interface';\r\nimport { ConfirmDialogComponent } from '@app/channel/dialogs/confirm-dialog/confirm-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\nimport { UserInfoService } from '@core/services/user-info.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { CurrentUserData } from '@core/interfaces';\r\n\r\n@Component({\r\n    selector: 'app-channel-videos-list-item',\r\n    templateUrl: 'channel-vidos-list-item.component.html',\r\n    styleUrls: ['channel-vidos-list-item.component.scss']\r\n})\r\n\r\nexport class ChannelVidosListItemComponent implements OnInit, OnDestroy {\r\n    @Input() videosItem: ChannelVidosDataListInterface | undefined;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private _authUser: CurrentUserData;\r\n    public menuShow = false;\r\n\r\n    constructor(\r\n        private _dialog: MatDialog,\r\n        private _channelsService: ChannelsService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log(this.videosItem, 'videosList');\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$)\r\n            )\r\n            .subscribe((data) => {\r\n                this._authUser = data;\r\n            });\r\n    }\r\n\r\n    public show() {\r\n        this.menuShow = !this.menuShow;\r\n    }\r\n\r\n    public openConfirmDialogPrivicy() {\r\n        const obj = {\r\n            privacy: this.videosItem.privacy_id === 2 ? 1 : 2,\r\n            video_id: this.videosItem.id\r\n        };\r\n        this._dialog.open(ConfirmDialogComponent, {\r\n            height: 'auto',\r\n            width: 'auto',\r\n            data: {\r\n                confirm: 'Privicy',\r\n                func: this._channelsService.updatePrivacy(this.videosItem.id, obj),\r\n                video_id: this.videosItem.id\r\n            }\r\n        });\r\n    }\r\n\r\n    public openConfirmDialogRemuve() {\r\n        const obj = {\r\n            id: this.videosItem.id,\r\n            filename: this.videosItem.filename,\r\n            username: this._authUser.username\r\n        };\r\n        this._dialog.open(ConfirmDialogComponent, {\r\n            height: 'auto',\r\n            width: 'auto',\r\n            data: {\r\n                confirm: 'remove',\r\n                ids: this.videosItem.id,\r\n                func: this._channelsService.deleteChannelVideo(obj)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","\r\n<!--Subscribers-content start--!-->\r\n<!--let Subscribers-content == @-->\r\n<div class=\"subscribers-content\">\r\n\r\n    <!--@title start--!-->\r\n    <div class=\"subscribers-content-title\">\r\n\r\n        <!--@title-text start--!-->\r\n        <h1 class=\"subscribers-content-title-text\">\r\n            Subscribers\r\n        </h1>\r\n        <!--@title-text end--!-->\r\n\r\n    </div>\r\n    <!--@title end--!-->\r\n\r\n    <!--@list start--!-->\r\n    <div class=\"subscribers-content-list\">\r\n\r\n        <!--@list-item start--!-->\r\n        <div class=\"subscribers-content-list-item\"\r\n             *ngFor=\"let sub of subscribers\">\r\n\r\n            <!--@list-item-img start--!-->\r\n            <div class=\"subscribers-content-list-item-img\">\r\n                <img [src]=\"sub.avatar|getImgPath:'images'\" alt=\"\">\r\n            </div>\r\n            <!--@list-item-img start--!-->\r\n\r\n            <!--@list-item-desc start--!-->\r\n            <div class=\"subscribers-content-list-item-desc\">\r\n\r\n                <!--@list-item-full-name start--!-->\r\n                <p class=\"subscribers-content-list-item-full-name\">\r\n                    {{sub.first_name}} {{sub.last_name}}\r\n                </p>\r\n                <!--@list-item-full-name end--!-->\r\n            </div>\r\n            <!--@list-item-desc end--!-->\r\n\r\n        </div>\r\n        <!--@list-item end--!-->\r\n\r\n    </div>\r\n    <!--@list end--!-->\r\n\r\n</div>\r\n<!--Subscribers-content end--!-->\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { UserInfoService } from '@core/services/user-info.service';\r\nimport { ChannelsService } from '@core/services/channels.service';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { SubscribersItem, SubscriptionResponseInterface } from '@core/interfaces/subscription.interface';\r\n\r\n@Component({\r\n    selector: 'app-sub-page',\r\n    templateUrl: 'sub-page.component.html',\r\n    styleUrls: ['sub-page.component.scss']\r\n})\r\n\r\nexport class SubPageComponent implements OnInit, OnDestroy {\r\n    private _groupId: number | undefined;\r\n    public subscribers: SubscribersItem [] | undefined;\r\n\r\n    constructor(\r\n        private _channelsService: ChannelsService,\r\n        private _route: ActivatedRoute,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this._groupId = params.id;\r\n        });\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this._channelsService.getChannelSubscription({ id: this._groupId })\r\n            .subscribe((data: SubscriptionResponseInterface) => {\r\n                this.subscribers = data.subscribers;\r\n            });\r\n    }\r\n\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {\r\n    EditChannelProfileComponent,\r\n    MainChannelPageComponent,\r\n    PlaylistChannelComponent,\r\n    WatchlistPageComponent\r\n} from '@app/channel/pages';\r\nimport { ChannelVideosComponent } from '@app/channel/pages/channel-vidoes';\r\nimport { SubPageComponent } from '@app/channel/pages/sub-page';\r\nimport { AboutChannelComponent } from '@app/channel/pages/about-channel';\r\nimport { AppPlaylistVideosComponent } from '@app/channel/components';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: MainChannelPageComponent,\r\n        data: {\r\n            title: 'Channel page'\r\n        },\r\n        children: [\r\n            { path: '', redirectTo: 'watchlist', pathMatch: 'full' },\r\n            {\r\n                path: 'watchlist',\r\n                component: WatchlistPageComponent\r\n            },\r\n            {\r\n                path: 'channel-videos/:id',\r\n                component: ChannelVideosComponent\r\n            },\r\n            {\r\n                path: 'channel-subscriptions/:id',\r\n                component: SubPageComponent\r\n            },\r\n            {\r\n                path: 'channel-about/:id',\r\n                component: AboutChannelComponent\r\n            },\r\n            {\r\n                path: 'channel-playlist/:id',\r\n                component: PlaylistChannelComponent\r\n            },\r\n            {\r\n                path: 'channel-playlist/:id/playList/:id',\r\n                component: AppPlaylistVideosComponent\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: ':id',\r\n        component: EditChannelProfileComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ChannelRoutingModule {\r\n}\r\n","import {AfterViewInit, Component, ElementRef, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport videojs from 'video.js';\r\nimport {API_URL} from '@core/constants/global';\r\n// import * as Plyr from 'plyr';\r\n// import 'videojs-hls-quality-selector';\r\n\r\ndeclare var require: any;\r\n// require('videojs-contrib-quality-levels');\r\n// require('videojs-hls-quality-selector');\r\n\r\n@Component({\r\n    selector: 'app-vjs-player',\r\n    templateUrl: './video-js.component.html',\r\n    styleUrls: ['./video-js.component.scss']\r\n})\r\nexport class VideoJsComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('target', {static: true}) target: ElementRef;\r\n    @Input() options: {\r\n        fluid: boolean,\r\n        liveui: boolean,\r\n        aspectRatio: string,\r\n        autoplay: boolean,\r\n        sources: {\r\n            src: string,\r\n            type: string,\r\n        }[],\r\n        plugins?: {\r\n            record: {\r\n                audio: boolean,\r\n                video: boolean,\r\n                maxLength: number,\r\n                debug: boolean\r\n            }\r\n        },\r\n\r\n        html5: {\r\n            vhs: {\r\n                withCredentials: boolean\r\n            }\r\n        }\r\n\r\n    };\r\n    player: videojs.Player;\r\n    @Input('videoData') videoData;\r\n    videoUrl;\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initPlayer();\r\n\r\n    }\r\n\r\n    async initPlayer() {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoUrl = API_URL + 'uploads/videos/' + this.videoData.filename;\r\n        video.setAttribute('src', this.videoUrl);\r\n        // video.setAttribute('poster', API_URL + 'uploads/thumbnails/' + this.videoData.thumbnail);\r\n        // video.poster = API_URL + 'uploads/thumbnails/' + this.videoData.thumbnail;\r\n        // video.muted = true;\r\n        // video.load();\r\n        // await video.play();\r\n\r\n        //\r\n        // const player = new Plyr('video', {\r\n        //     captions: {active: true},\r\n        //     quality: {default: 576, options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240]},\r\n        //     // controls: ['captions']\r\n        // });\r\n        // console.log(player)\r\n\r\n        // instantiate Video.js\r\n        // this.target.nativeElement.setAttribute('src', this.videoUrl);\r\n        // this.player = videojs(this.target.nativeElement, this.options, function onPlayerReady() {\r\n        //     const player = this;\r\n        //     console.log(player)\r\n        //     player.on('pause', () => {\r\n        //         console.log('paused')\r\n        //         player.one('play', () => {\r\n        //             console.log('play')\r\n        //             player.load();\r\n        //             player.play();\r\n        //         });\r\n        //     });\r\n        //\r\n        //     player.on('error', () => {\r\n        //\r\n        //         player.pause();\r\n        //         player.trigger('ended');\r\n        //\r\n        //         player.reset();\r\n        //\r\n        //         player.src(player.currentSrc());\r\n        //\r\n        //     });\r\n        //\r\n        //     player.hlsQualitySelector({\r\n        //         displayCurrentQuality: true,\r\n        //         vjsIconClass : 'vjs-icon-hd'\r\n        //     });\r\n        //\r\n        //\r\n        //     // console.log('onPlayerReady', this);\r\n        // });\r\n        // this.player.src({type: 'video/x-matroska', src: this.videoUrl});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // destroy player\r\n        if (this.player) {\r\n            this.player.dispose();\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <video class=\"video-js\" #target controls autoplay\r\n           width=\"640\"\r\n           height=\"480\"\r\n           data-setup=\"{}\"></video>\r\n</div>\r\n<!--<div class=\"container\">-->\r\n\r\n<!--    <video width=\"640\" height=\"480\" controls muted playsinline id=\"player\" preload=\"none\">-->\r\n<!--        &lt;!&ndash;    <source src=\"https://vjs.zencdn.net/v/oceans.mp4?sd\" type='video/mp4' label='SD' res='480' />&ndash;&gt;-->\r\n<!--        &lt;!&ndash;    <source src=\"https://vjs.zencdn.net/v/oceans.mp4?hd\" type='video/mp4' label='HD' res='1080'/>&ndash;&gt;-->\r\n<!--        &lt;!&ndash;    <source src=\"https://vjs.zencdn.net/v/oceans.mp4?phone\" type='video/mp4' label='phone' res='144'/>&ndash;&gt;-->\r\n<!--        &lt;!&ndash;    <source src=\"https://vjs.zencdn.net/v/oceans.mp4?4k\" type='video/mp4' label='4k' res='2160'/>&ndash;&gt;-->\r\n<!--    </video>-->\r\n<!--</div>-->\r\n\r\n\r\n<!--<div class=\"container\">-->\r\n<!--    <video controls crossorigin playsinline>-->\r\n<!--&lt;!&ndash;        <source src=\"http://localhost:3001/uploads/videos/1613738222158.mkv\"  type=\"video/webm\" size=\"576\">&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <source  src=\"http://localhost:3001/uploads/videos/1613738222158.mkv\"type=\"video/webm\" size=\"720\">&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <source  src=\"http://localhost:3001/uploads/videos/1613738222158.mkv\" type=\"video/webm\" size=\"1080\">&ndash;&gt;-->\r\n\r\n<!--        &lt;!&ndash; Caption files &ndash;&gt;-->\r\n<!--&lt;!&ndash;        <track kind=\"captions\" label=\"English\" srclang=\"en\" src=\"https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt\"&ndash;&gt;-->\r\n<!--&lt;!&ndash;               default>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <track kind=\"captions\" label=\"Français\" srclang=\"fr\" src=\"https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt\">&ndash;&gt;-->\r\n<!--        &lt;!&ndash; Fallback for browsers that don't support the <video> element &ndash;&gt;-->\r\n<!--        <a href=\"https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4\" download>Download</a>-->\r\n<!--    </video>-->\r\n<!--</div>-->\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-categories',\r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.scss']\r\n})\r\nexport class CategoriesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<ul class=\"categories\">\r\n    <li><a class=\"active\">Recommendations</a></li>\r\n    <li><a>Today's picks</a></li>\r\n    <li><a>AAPL</a></li>\r\n    <li><a>Phil Ramirez</a></li>\r\n    <li><a>True Money</a></li>\r\n    <li><a>PICK 4</a></li>\r\n    <li><a>Synergy fusion</a></li>\r\n    <li><a>Sunshine trading stream</a></li>\r\n    <li><a>Shot stocks</a></li>\r\n    <li><a>SMP</a></li>\r\n    <li><a>Strategy for U</a></li>\r\n    <li><a>Automotive</a></li>\r\n</ul>\r\n","<!--<ng-container *ngIf=\"videos?.length > 0\">-->\r\n<p class=\"trending-text\" *ngIf=\"videos?.length > 0\">{{title}}</p>\r\n<!--    <div class=\"ph-item item\">-->\r\n<!--        <div class=\"ph-col-12\">-->\r\n<!--            <div class=\"ph-picture\"></div>-->\r\n\r\n<!--            <div class=\"d-flex\">-->\r\n<!--                <div class=\"ph-avatar mr-3\"></div>-->\r\n\r\n<!--                <div class=\"ph-col-10\">-->\r\n<!--                    <div class=\"ph-row align-items-start\">-->\r\n<!--                        <div class=\"ph-col-2\"></div>-->\r\n<!--                        <div class=\"ph-col-8 empty\"></div>-->\r\n<!--                        <div class=\"ph-col-2\"></div>-->\r\n<!--                    </div>-->\r\n<!--                    <div class=\"ph-row align-items-start\">-->\r\n<!--                        <div class=\"ph-col-4\"></div>-->\r\n<!--                    </div>-->\r\n<!--                    <div class=\"ph-row align-items-start\">-->\r\n<!--                        <div class=\"ph-col-6\"></div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n\r\n\r\n<!--        </div>-->\r\n<!--    </div>-->\r\n<div class=\"list-container d-flex flex-wrap justify-content-center justify-content-lg-start\">\r\n    <ng-container *ngFor=\"let video of videos; trackBy: trackByElement\">\r\n        <div class=\"item mx-2 ml-lg-0  mr-lg-4\">\r\n\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"itemTemplate\"\r\n                [ngTemplateOutletContext]=\"{details: detailsSource || video.user}\">\r\n            </ng-container>\r\n\r\n            <ng-template let-d=\"details\" #itemTemplate>\r\n                <div class=\"thumbnail\" (click)=\"openVideoPage(video, d?.username)\">\r\n                    <img class=\"thumbnail-image\" [src]=\"video.thumbnail|getImgPath:'images'\">\r\n                    <span class=\"live-now\" *ngIf=\"video.status==='live'\">Live now</span>\r\n                    <span class=\"duration\" *ngIf=\"video.status!=='live'\">{{video.duration}}</span>\r\n                </div>\r\n                <div class=\"video-info\">\r\n                    <div class=\"left-side\">\r\n                        <img class=\"avatar\" [src]=\"video?.user?.avatar|getImgPath: 'images'\">\r\n                        <div>\r\n                            <p class=\"video-name\">{{video.name}}</p>\r\n                            <p class=\"channel-sub-name\" [routerLink]=\"'/channels/'+video?.user?.username\"\r\n                            >{{video?.user?.username}}</p>\r\n<!--                            <p class=\"channel-sub-name\"-->\r\n<!--                            >Hrach</p>-->\r\n                            <div class=\"shortened-details\">\r\n                                    <span class=\"watchers-count\">\r\n                                        {{video.status === 'live' ? (video.participants| kMFormatter) + ' watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                                    </span>\r\n                                <span class=\"dot\">&middot;</span>\r\n                                <span class=\"upload-time\">{{video.created_at| dateFromNow}}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"right-side\">\r\n                        <ul>\r\n                            <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                <span>{{tag.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div class=\"remove-video\" *ngIf=\"removable\">\r\n                    <mat-icon (click)=\"removeVideo(video)\">delete</mat-icon>\r\n                </div>\r\n                <div class=\"update-privacy\" *ngIf=\"isChannelPage()\" (click)=\"updatePrivacy(video, video.privacy?.name)\"\r\n                     [ngClass]=\"video.privacy?.name !== 'Public'  ? 'red':'green'\">\r\n                    <mat-icon>visibility_{{video.privacy?.name !== 'Public' ? 'off' : 'on'}}</mat-icon>\r\n                </div>\r\n            </ng-template>\r\n\r\n\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n<!--</ng-container>-->\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {Router} from '@angular/router';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {Subscription} from 'rxjs';\r\nimport {finished} from 'stream';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-videos-list-holder',\r\n    templateUrl: './videos-list-holder.component.html',\r\n    styleUrls: ['./videos-list-holder.component.scss']\r\n})\r\nexport class VideosListHolderComponent implements OnInit, OnDestroy {\r\n\r\n    authUser: CurrentUserData;\r\n    videoLoading = 'idle';\r\n    trackByElement = trackByElement;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input() videos = [];\r\n    @Input() title = '';\r\n    @Input() removable = false;\r\n    @Input() detailsSource;\r\n\r\n    constructor(\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getUserInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.videoLoading = 'loading';\r\n        if (this.videos?.length > 0) {\r\n            this.videoLoading = 'finished';\r\n        }\r\n    }\r\n\r\n    private _getUserInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n        });\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        console.log(video);\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate(['channels/' + username])\r\n        );\r\n    }\r\n\r\n    removeVideo(video) {\r\n        console.log(video);\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.videoService.removeVideo({\r\n                    id: video.id,\r\n                    filename: video.filename,\r\n                    username: this.authUser.username\r\n                }).subscribe(dt => {\r\n                    this.toastr.success('The video was removed successfully');\r\n                    this.videos = dt.videos;\r\n                });\r\n            }\r\n        }));\r\n\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    isChannelPage() {\r\n        return this.router.url.includes('channel') && this.removable;\r\n    }\r\n\r\n\r\n    updatePrivacy(video, privacy) {\r\n        this.subscriptions.push(this.videoService.updatePrivacy({\r\n            video_id: video.id,\r\n            privacy: privacy === 'Public' ? 'Private' : 'Public'\r\n        }).subscribe(dt => {\r\n            video.privacy = dt;\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport 'videojs-watermark/dist/videojs-watermark.css';\r\n\r\n@Component({\r\n    selector: 'app-video-regular-player',\r\n    templateUrl: './video-regular-player.component.html',\r\n    styleUrls: ['./video-regular-player.component.scss']\r\n})\r\nexport class VideoRegularPlayerComponent implements OnInit {\r\n\r\n    @Input() videoData;\r\n    videoUrl;\r\n    player;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoUrl = API_URL + 'uploads/videos/' + this.videoData.filename;\r\n        video.setAttribute('src', this.videoUrl);\r\n    }\r\n\r\n}\r\n","<div class=\"video-container\">\r\n    <video controls autoplay></video>\r\n\r\n    <img class=\"watermark\" src=\"assets/img/logo.png\">\r\n</div>\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {COIN_WORTH} from '@core/constants/global';\r\n\r\n@Pipe({\r\n    name: 'convertToCurrency'\r\n})\r\nexport class ConvertToCurrencyPipe implements PipeTransform {\r\n\r\n    transform(value: number, currency = 'dollars') {\r\n        if (currency === 'dollars') {\r\n            return COIN_WORTH * value;\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport {\r\n    AboutChannelComponent,\r\n    EditChannelProfileComponent,\r\n    MainChannelPageComponent, PlaylistChannelComponent,\r\n    WatchlistPageComponent\r\n} from '@app/channel/pages';\r\nimport {\r\n    AppPlaylistVideosComponent,\r\n    ChannelInfoComponent,\r\n    ChannelSortingComponent, CreatePlaylistBtnComponent, NewVideoPlayerComponent\r\n} from '@app/channel/components';\r\nimport { ChannelRoutingModule } from '@app/channel/channel-routing.module';\r\nimport {\r\n    ChannelVideosComponent,\r\n    ChannelVidosListComponent,\r\n    ChannelVidosListItemComponent\r\n} from '@app/channel/pages/channel-vidoes';\r\nimport { SubPageComponent } from '@app/channel/pages/sub-page';\r\nimport { MaterialModule } from '@core/modules/material.module';\r\nimport { ConfirmDialogComponent, CreatePlaylistDialogComponent } from '@app/channel/dialogs';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CreatePlaylistBtnComponent,\r\n        MainChannelPageComponent,\r\n        WatchlistPageComponent,\r\n        EditChannelProfileComponent,\r\n        ChannelInfoComponent,\r\n        ChannelVideosComponent,\r\n        SubPageComponent,\r\n        ChannelVidosListComponent,\r\n        ChannelVidosListItemComponent,\r\n        ChannelSortingComponent,\r\n        ConfirmDialogComponent,\r\n        CreatePlaylistDialogComponent,\r\n        AboutChannelComponent,\r\n        AppPlaylistVideosComponent,\r\n        PlaylistChannelComponent,\r\n        NewVideoPlayerComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        SharedModule,\r\n        MaterialModule,\r\n        ChannelRoutingModule\r\n    ],\r\n    entryComponents: [ConfirmDialogComponent, CreatePlaylistDialogComponent]\r\n})\r\nexport class ChannelModule {\r\n}\r\n"]}