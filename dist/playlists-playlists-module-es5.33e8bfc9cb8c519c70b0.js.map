{"version":3,"sources":["webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/search-videos-tab/search-videos-tab.component.html","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/search-videos-tab/search-videos-tab.component.ts","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/video-url-tab/video-url-tab.component.html","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/video-url-tab/video-url-tab.component.ts","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/your-videos-tab/your-videos-tab.component.html","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/your-videos-tab/your-videos-tab.component.ts","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component.html","webpack:///src/app/core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component.ts","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.html","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.ts","webpack:///src/app/core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component.html","webpack:///src/app/core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component.ts","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.html","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.html","webpack:///src/app/playlists/playlists-routing.module.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.ts","webpack:///src/app/playlists/playlists.module.ts"],"names":["SearchVideosTabComponent","videoService","getSelectedVideos","router","searchedVideos","selectedVideos","searched","trackByElement","subscriptions","selectVid","e","this","push","searchInAllVideos","subscribe","dt","id","find","v","video","transform","playlist","emit","name","navigate","queryParams","tag","forEach","s","unsubscribe","searchVideos","VideoUrlTabComponent","fb","validUrl","apiUrl","searchingVideo","isSubmitted","searchVideoByUrlForm","group","url","required","possibleUrl","clipboardData","getData","getVideos","test","URL","searchParams","get","getVideoById","getUrlString","YourVideosTabComponent","getUserVideos","user_id","authUser","currentUser","AddVideoToPlaylistDialogComponent","modal","playlistsService","_userInfoService","toastr","data","activeTab","_getAuthInfo","_userInfo","console","log","videos","tab","length","params","playlist_id","video_ids","JSON","stringify","addVideosToPlaylist","close","error","changeTab","cancel","addVideos","PlaylistInfoFormComponent","dialog","editMode","refreshPlaylist","playlistInfoForm","description","privacy","open","afterClosed","value","patchValue","updatePrivacy","success","valid","updatePlaylistInfo","username","backToPlaylists","AddVideoToAnotherPlaylistComponent","videoId","video_id","playlists","saveToPlaylistsForm","array","getPlaylistsFormGroup","addPlaylistForm","channel_id","channel","ret","map","p","found","checked","control","target","playlistIds","controls","c","addVideoToOtherPlaylists","addPlaylist","save","PlaylistVideosComponent","route","previousIndex","currentIndex","sendData","rows","updateVideoPosition","playlistId","thumbnail","changePlaylistThumbnail","confirmed","removeVideoFromPlaylist","width","result","SinglePlaylistComponent","PlaylistsRoutingModule","PlaylistsModule","routes","path","component","getPlaylistDetails","snapshot","getById","title","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"tab1\">\r\n    <div class=\"input-wrap\">\r\n        <app-search-videos-form (search)=\"searchVideos($event)\"></app-search-videos-form>\r\n    </div>\r\n    <ng-container *ngIf=\"searchedVideos.length > 0\">\r\n        <div class=\"video-item\" [class.selected]=\"checkIfVideoSelected(video.id)\"\r\n             [class.added]=\"getSelectedVideos.checkIfVideoAddedToPlaylist(video, playlist)\"\r\n             *ngFor=\"let video of searchedVideos; trackBy:trackByElement\" (click)=\"selectVideo(video)\">\r\n            <div class=\"video-container\">\r\n                <div class=\"img\">\r\n                    <span class=\"added-placeholder\"></span>\r\n                    <img class=\"thumbnail\" [src]=\"video.thumbnail|getImgPath\">\r\n                    <span class=\"duration\">{{video.duration}}</span>\r\n                </div>\r\n\r\n                <div class=\"details\">\r\n                    <div class=\"title\">\r\n                        <h4 class=\"\">{{video.name}}</h4>\r\n                    </div>\r\n                    <div class=\"shortened-details\">\r\n                        <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"watchers-count\">\r\n                            {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                        </span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                    </div>\r\n\r\n                    <div class=\"desc-tags\">\r\n                        <p class=\"shortened-description\">{{video.description}}</p>\r\n                        <div class=\"tags\">\r\n                            <ul>\r\n                                <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                    <span>{{tag.name}}</span>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"no-results-found\" *ngIf=\"searchedVideos.length === 0 && searched\">\r\n        <span>No search results found</span>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetSelectedVideosToBeAddedToPlaylistPipe} from '@shared/pipes/get-selected-videos-to-be-added-to-playlist.pipe';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-search-videos-tab',\r\n    templateUrl: './search-videos-tab.component.html',\r\n    styleUrls: ['./search-videos-tab.component.scss']\r\n})\r\nexport class SearchVideosTabComponent implements OnInit, OnDestroy {\r\n    searchedVideos = [];\r\n    selectedVideos = [];\r\n    searched = false;\r\n    trackByElement = trackByElement;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('selectVideo') selectVid = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public getSelectedVideos: GetSelectedVideosToBeAddedToPlaylistPipe,\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    searchVideos(e) {\r\n        this.searched = true;\r\n        this.subscriptions.push(this.videoService.searchInAllVideos(e).subscribe(dt => {\r\n            this.searchedVideos = dt;\r\n        }));\r\n    }\r\n\r\n    checkIfVideoSelected(id) {\r\n        return this.selectedVideos.find(v => v === id);\r\n    }\r\n\r\n    selectVideo(video) {\r\n        this.selectedVideos = this.getSelectedVideos.transform(video, this.selectedVideos, this.playlist);\r\n        this.selectVid.emit(this.selectedVideos);\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"tab2\">\r\n    <div class=\"input-wrap\" id=\"search-by-url-input\">\r\n        <div class=\"input\">\r\n            <form [formGroup]=\"searchVideoByUrlForm\">\r\n                <input type=\"text\" placeholder=\"Paste URL here\" #urlInput\r\n                       (keyup.enter)=\"getUrlString($event.target.value)\"\r\n                       (paste)=\"getUrlString($event)\" formControlName=\"url\">\r\n                <mat-hint>Please put only Metl.tv URLs here</mat-hint>\r\n                <span *ngIf=\"urlCtrl.hasError('patternInvalid')\" class=\"error\">Please provide a valid URL</span>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <mat-spinner *ngIf=\"searchingVideo\" [diameter]=\"15\"></mat-spinner>\r\n    <ng-container *ngIf=\"searchedVideos.length > 0\">\r\n        <div class=\"video-item\" [class.selected]=\"checkIfVideoSelected(video.id)\"\r\n             [class.added]=\"getSelectedVideos.checkIfVideoAddedToPlaylist(video, playlist)\"\r\n             *ngFor=\"let video of searchedVideos; trackBy: trackByElement\" (click)=\"selectVideo(video)\">\r\n            <div class=\"video-container\">\r\n                <div class=\"img\">\r\n                    <span class=\"added-placeholder\"></span>\r\n                    <img class=\"thumbnail\" [src]=\"video.thumbnail|getImgPath\">\r\n                    <span class=\"duration\">{{video.duration}}</span>\r\n                </div>\r\n\r\n                <div class=\"details\">\r\n                    <div class=\"title\">\r\n                        <h4 class=\"\">{{video.name}}</h4>\r\n                    </div>\r\n                    <div class=\"shortened-details\">\r\n                        <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                    </div>\r\n                    <div class=\"desc-tags\">\r\n                        <p class=\"shortened-description\">{{video.description}}</p>\r\n                        <div class=\"tags\">\r\n                            <ul>\r\n                                <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                    <span>{{tag.name}}</span>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"searchedVideos.length === 0 && isSubmitted && validUrl\">\r\n        <span>No videos found via specified url</span>\r\n    </ng-container>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {METL_URL_PATTERN} from '@core/constants/patterns';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {GetSelectedVideosToBeAddedToPlaylistPipe} from '@shared/pipes/get-selected-videos-to-be-added-to-playlist.pipe';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-video-url-tab',\r\n    templateUrl: './video-url-tab.component.html',\r\n    styleUrls: ['./video-url-tab.component.scss']\r\n})\r\nexport class VideoUrlTabComponent implements OnInit, OnDestroy {\r\n    searchVideoByUrlForm: FormGroup;\r\n    validUrl = true;\r\n    searchedVideos = [];\r\n    selectedVideos = [];\r\n    trackByElement = trackByElement;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    apiUrl = API_URL;\r\n\r\n    searchingVideo = false;\r\n    isSubmitted = false;\r\n    @Input('playlist') playlist;\r\n    @Output('selectVideo') selectVid = new EventEmitter();\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private videoService: VideoService,\r\n        public getSelectedVideos: GetSelectedVideosToBeAddedToPlaylistPipe,\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.searchVideoByUrlForm = this.fb.group({\r\n            url: ['', [Validators.required, patternValidator(METL_URL_PATTERN)]]\r\n        });\r\n    }\r\n\r\n    getUrlString(e) {\r\n        const possibleUrl = e.clipboardData?.getData('text') || e;\r\n        this.isSubmitted = true;\r\n        this.searchedVideos = [];\r\n        this.getVideos(possibleUrl);\r\n    }\r\n\r\n    getVideos(possibleUrl) {\r\n        this.validUrl = METL_URL_PATTERN.test(possibleUrl);\r\n        if (this.validUrl) {\r\n            const parsedUrl = new URL(possibleUrl);\r\n            const id = parsedUrl.searchParams.get('id');\r\n            if (id) {\r\n                this.searchingVideo = true;\r\n                this.videoService.getVideoById({id}).subscribe(dt => {\r\n                    this.searchingVideo = false;\r\n                    this.searchedVideos = dt ? [dt] : [];\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfVideoSelected(id) {\r\n        return this.selectedVideos.find(v => v === id);\r\n    }\r\n\r\n    selectVideo(video) {\r\n        this.selectedVideos = this.getSelectedVideos.transform(video, this.selectedVideos, this.playlist);\r\n        this.selectVid.emit(this.selectedVideos);\r\n    }\r\n\r\n    get urlCtrl(): AbstractControl {\r\n        return this.searchVideoByUrlForm.get('url');\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"tab3\" *ngIf=\"currentUser\">\r\n    <ng-container *ngIf=\"currentUser.videos?.length > 0\">\r\n        <div class=\"video-item\" [class.selected]=\"ifVideoSelected(video.id)\"\r\n             [class.added]=\"getSelectedVideos.checkIfVideoAddedToPlaylist(video, playlist)\"\r\n             *ngFor=\"let video of currentUser.videos; trackBy: trackByElement\" (click)=\"selectVideo(video)\">\r\n            <div class=\"video-container\">\r\n                <div class=\"img\">\r\n                    <span class=\"added-placeholder\"></span>\r\n                    <img class=\"thumbnail\" [src]=\"video.thumbnail|getImgPath\">\r\n                    <span class=\"duration\">{{video.duration}}</span>\r\n                </div>\r\n\r\n                <div class=\"details\">\r\n                    <div class=\"title\">\r\n                        <h4 class=\"\">{{video.name}}</h4>\r\n                    </div>\r\n                    <div class=\"shortened-details\">\r\n                        <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"watchers-count\">\r\n                            {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                        </span>\r\n                        <span class=\"dot\">&middot;</span>\r\n                        <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                    </div>\r\n                    <div class=\"desc-tags\">\r\n                        <p class=\"shortened-description\">{{video.description}}</p>\r\n                        <div class=\"tags\">\r\n                            <ul>\r\n                                <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                    <span>{{tag.name}}</span>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"currentUser.videos?.length === 0\">There are no videos in this list</ng-container>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {GetSelectedVideosToBeAddedToPlaylistPipe} from '@shared/pipes/get-selected-videos-to-be-added-to-playlist.pipe';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-your-videos-tab',\r\n    templateUrl: './your-videos-tab.component.html',\r\n    styleUrls: ['./your-videos-tab.component.scss']\r\n})\r\nexport class YourVideosTabComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n    selectedVideos = [];\r\n    trackByElement = trackByElement;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input('currentUser') currentUser;\r\n    @Input('authUser') authUser;\r\n    @Input('playlist') playlist;\r\n\r\n    @Output('selectVideo') selectVid = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public getSelectedVideos: GetSelectedVideosToBeAddedToPlaylistPipe,\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscriptions.push(this.videoService.getUserVideos({user_id: this.authUser.id}).subscribe(dt => {\r\n            this.currentUser = dt;\r\n        }));\r\n\r\n    }\r\n\r\n    ifVideoSelected(id) {\r\n        return this.selectedVideos.find(v => v === id);\r\n    }\r\n\r\n    selectVideo(video) {\r\n        this.selectedVideos = this.getSelectedVideos.transform(video, this.selectedVideos, this.playlist);\r\n        this.selectVid.emit(this.selectedVideos);\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"add-video-playlist-modal\">\r\n    <div class=\"content-wrap\">\r\n        <h1 class=\"title\">Add videos to playlist</h1>\r\n\r\n        <div class=\"content\">\r\n            <div class=\"tab-list\">\r\n                <ul>\r\n                    <li>\r\n                        <a class=\"nav-link\" [class.active]=\"activeTab==='search'\" (click)=\"changeTab('search')\">\r\n                            Video search\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"nav-link\" [class.active]=\"activeTab==='url'\" (click)=\"changeTab('url')\">URL</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"nav-link\" [class.active]=\"activeTab==='yours'\" (click)=\"changeTab('yours')\">\r\n                            Your videos\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"tab-items\">\r\n\r\n                <app-search-videos-tab *ngIf=\"activeTab==='search'\" [playlist]=\"playlist\"\r\n                                       (selectVideo)=\"selectVideo($event)\"></app-search-videos-tab>\r\n                <app-video-url-tab *ngIf=\"activeTab==='url'\" [playlist]=\"playlist\"\r\n                                   (selectVideo)=\"selectVideo($event)\"></app-video-url-tab>\r\n                <app-your-videos-tab *ngIf=\"activeTab==='yours'\" [currentUser]=\"currentUser\" [authUser]=\"authUser\"\r\n                                     [playlist]=\"playlist\" (selectVideo)=\"selectVideo($event)\">\r\n                </app-your-videos-tab>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"btn-wrap\">\r\n        <button class=\"btn cancel\" (click)=\"cancel()\">Cancel</button>\r\n        <button class=\"btn add-videos\" (click)=\"addVideos()\" [disabled]=\"ifSubmitInactive(activeTab)\">Add videos\r\n        </button>\r\n    </div>\r\n\r\n</div>\r\n","import {Component, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-add-video-to-playlist-dialog',\r\n    templateUrl: './add-video-to-playlist-dialog.component.html',\r\n    styleUrls: ['./add-video-to-playlist-dialog.component.scss']\r\n})\r\nexport class AddVideoToPlaylistDialogComponent implements OnInit {\r\n    activeTab = 'yours';\r\n    authUser: CurrentUserData;\r\n    currentUser;\r\n    selectedVideos = [];\r\n    playlist;\r\n\r\n\r\n    @ViewChild('urlInput') urlInput;\r\n\r\n    constructor(\r\n        private modal: MatDialogRef<AddVideoToPlaylistDialogComponent>,\r\n        private videoService: VideoService,\r\n        private playlistsService: PlaylistsService,\r\n        private _userInfoService: UserInfoService,\r\n        // private getAuthUser: GetAuthUserPipe,\r\n        private toastr: ToastrService,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n    ) {\r\n        this.playlist = data.playlist;\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Add video to playlist AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    selectVideo(videos) {\r\n        this.selectedVideos = videos;\r\n    }\r\n\r\n    changeTab(tab) {\r\n        this.activeTab = tab;\r\n        this.selectedVideos = [];\r\n    }\r\n\r\n\r\n    addVideos() {\r\n        if (this.selectedVideos.length > 0) {\r\n            const params = {playlist_id: this.playlist.id, video_ids: JSON.stringify(this.selectedVideos)};\r\n            this.playlistsService.addVideosToPlaylist(params).subscribe(dt => {\r\n                this.modal.close();\r\n            });\r\n        } else {\r\n            this.toastr.error('Please select at least one video', 'No videos selected');\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.modal.close();\r\n    }\r\n\r\n    ifSubmitInactive(activeTab) {\r\n        if (activeTab === 'yours') {\r\n            return this.currentUser?.videos?.length === 0;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\">\r\n    <img [src]=\"playlist.thumbnail|getImgPath\">\r\n    <button class=\"btn play-all\" *ngIf=\"playlist.videos?.length!==0\" (click)=\"openPlaylistPage(playlist)\">\r\n        <span class=\"material-icons\">play_arrow</span>\r\n        Play All\r\n    </button>\r\n\r\n    <div class=\"info\">\r\n        <ng-container *ngIf=\"!editMode\">\r\n            <h3>\r\n                <span>{{playlist.name}}</span>\r\n                <span class=\"material-icons\" (click)=\"editPlaylistInfo(playlist)\">create</span>\r\n            </h3>\r\n            <p>{{playlist.description}}</p>\r\n            <h3>{{playlist.videos?.length}} videos</h3>\r\n            <h3 *ngIf=\"!editMode\">Last updated on {{playlist.updated_at|date: 'd MMM, yyyy'}}</h3>\r\n            <div class=\"select\" id=\"privacy-select\">\r\n                <mat-icon>visibility_{{+playlist.privacy ? 'off' : 'on'}}</mat-icon>\r\n                <select (change)=\"updatePrivacy($event.target.value, playlist)\">\r\n                    <option [value]=\"1\" [selected]=\"playlist.privacy\">Private</option>\r\n                    <option [value]=\"0\" [selected]=\"!playlist.privacy\">Public</option>\r\n                </select>\r\n            </div>\r\n        </ng-container>\r\n        <form [formGroup]=\"playlistInfoForm\" id=\"playlist-info-form\" *ngIf=\"editMode\">\r\n            <input formControlName=\"name\">\r\n            <span class=\"error\" *ngIf=\"playlistInfoForm.get('name').hasError('required')\">\r\n                Playlist name is required\r\n            </span>\r\n            <textarea formControlName=\"description\"></textarea>\r\n            <button class=\"btn cancel\" (click)=\"editMode=!editMode\">Cancel</button>\r\n            <button class=\"btn save-playlist-changes\" (click)=\"savePlaylistInfoChanges()\">Save\r\n            </button>\r\n        </form>\r\n    </div>\r\n\r\n    <button class=\"btn back\" (click)=\"backToPlaylists()\">Back</button>\r\n    <button class=\"btn add-video\" *ngIf=\"!editMode\" (click)=\"openVideosModal()\">Add Video</button>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {Router} from '@angular/router';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-playlist-info-form',\r\n    templateUrl: './playlist-info-form.component.html',\r\n    styleUrls: ['./playlist-info-form.component.scss']\r\n})\r\nexport class PlaylistInfoFormComponent implements OnInit {\r\n    playlistInfoForm: FormGroup;\r\n    apiUrl = API_URL;\r\n    editMode = false;\r\n    authUser: CurrentUserData;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n        public router: Router,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.playlistInfoForm = this.fb.group({\r\n            id: [''],\r\n            name: ['', Validators.required],\r\n            description: [''],\r\n            privacy: ['']\r\n        });\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Playlist info form AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    openVideosModal() {\r\n        this.dialog.open(AddVideoToPlaylistDialogComponent, {data: {playlist: this.playlist}}).afterClosed().subscribe(dt => {\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    updatePrivacy(value, playlist) {\r\n        console.log(+value);\r\n        playlist.privacy = +value;\r\n        this.playlistInfoForm.patchValue({privacy: +value});\r\n        this.playlistsService.updatePrivacy({privacy: value, id: playlist.id}).subscribe(dt => {\r\n            this.toastr.success('Playlist privacy is updated successfully');\r\n        });\r\n\r\n    }\r\n\r\n    editPlaylistInfo(playlist) {\r\n        this.editMode = true;\r\n        this.playlistInfoForm.patchValue(playlist);\r\n    }\r\n\r\n    savePlaylistInfoChanges() {\r\n        if (this.playlistInfoForm.valid) {\r\n            this.playlistsService.updatePlaylistInfo(this.playlistInfoForm.value).subscribe((dt) => {\r\n                this.editMode = false;\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n    openPlaylistPage(playlist) {\r\n        const route = 'videos/play';\r\n        const params = {id: playlist.videos?.[0]?.id, playlist_id: playlist.id};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n    backToPlaylists() {\r\n        const route = 'channels/show';\r\n        const params = {tab: 'playlists', username: this.authUser.username};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div class=\"save-to-playlists-popup\">\r\n    <div class=\"save-to-playlists-form\">\r\n        <h2>Save to...</h2>\r\n        <form [formGroup]=\"saveToPlaylistsForm\">\r\n            <ul formArrayName=\"playlists\">\r\n                <li *ngFor=\"let c of playlistIds.controls;let i = index\" class=\"playlist\">\r\n\r\n                    <div class=\"d-flex justify-content-between\" [formGroupName]=\"i\">\r\n                        <div class=\"d-flex align-items-center\">\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"checkbox\" [id]=\"'playlist-'+(i+1)\" formControlName=\"checked\"\r\n                                   (change)=\"addToPlaylist($event, c)\">\r\n                            <label [for]=\"'playlist-'+(i+1)\">{{c.value.name}}</label>\r\n                        </div>\r\n                        <mat-icon>{{c.value.privacy ? 'lock' : 'public'}}</mat-icon>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n\r\n            <button class=\"btn save-playlists\" (click)=\"save()\">Save</button>\r\n        </form>\r\n    </div>\r\n\r\n    <div class=\"new-playlist\">\r\n        <form [formGroup]=\"addPlaylistForm\">\r\n\r\n            <h2><i class=\"fas fa-plus\"></i> Create new playlist</h2>\r\n\r\n            <div class=\"input\">\r\n                <input type=\"text\" placeholder=\"Playlist Title\" formControlName=\"name\">\r\n            </div>\r\n\r\n            <div class=\"select\">\r\n                <select name=\"\" id=\"privacy\" formControlName=\"privacy\">\r\n                    <option [value]=\"''\">Visibility</option>\r\n                    <option [value]=\"0\">Public</option>\r\n                    <option [value]=\"1\">Private</option>\r\n                </select>\r\n            </div>\r\n            <button class=\"btn\" (click)=\"addPlaylist()\">Add playlist</button>\r\n        </form>\r\n    </div>\r\n\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {FormArray, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-add-video-to-another-playlist',\r\n    templateUrl: './add-video-to-another-playlist.component.html',\r\n    styleUrls: ['./add-video-to-another-playlist.component.scss']\r\n})\r\nexport class AddVideoToAnotherPlaylistComponent implements OnInit {\r\n    playlists;\r\n    saveToPlaylistsForm: FormGroup;\r\n    addPlaylistForm: FormGroup;\r\n    videoId;\r\n    authUser: CurrentUserData;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private playlistsService: PlaylistsService,\r\n        private fb: FormBuilder,\r\n        private _userInfoService: UserInfoService,\r\n        private dialog: MatDialogRef<AddVideoToAnotherPlaylistComponent>,\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.videoId = data.video_id;\r\n        this.playlists = data.playlists;\r\n        // this.authUser = this.getAuthUser.transform();\r\n        this._getAuthInfo();\r\n        this.saveToPlaylistsForm = this.fb.group({\r\n            video_id: [this.videoId, Validators.required],\r\n            playlists: this.fb.array(\r\n                this.getPlaylistsFormGroup(this.playlists)\r\n            )\r\n        });\r\n\r\n        this.addPlaylistForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            channel_id: [this.authUser?.channel?.id],\r\n            privacy: ['']\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Add video another playlist  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getPlaylistsFormGroup(playlists) {\r\n        const ret = [];\r\n        playlists.map(p => {\r\n            const found = p.videos.find(v => v.id === this.videoId);\r\n            ret.push(this.fb.group({id: p.id, name: p.name, privacy: p.privacy, checked: !!found}));\r\n        });\r\n        console.log(ret);\r\n        return ret;\r\n    }\r\n\r\n    addToPlaylist(e, control) {\r\n\r\n        control.patchValue({checked: e.target.checked});\r\n        // console.log(this.playlistForm.value)\r\n        // const value = id;\r\n        // if (e.target.checked && !this.playlistIds.controls.find(c => c.value === value)) {\r\n        //     // this.playlistIds.push(new FormControl(value));\r\n        // } else {\r\n        //     let i = 0;\r\n        //     this.playlistIds.controls.forEach((item: FormControl) => {\r\n        //         if (+item.value === value) {\r\n        //             console.log('removing')\r\n        //             // this.playlistIds.removeAt(i);\r\n        //             return;\r\n        //         }\r\n        //         i++;\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    checkIfVideoInPlaylist(videoId, playlist) {\r\n        const found = playlist.videos.find(v => v.id === videoId);\r\n        if (found && !this.playlistIds.controls.find(c => c.value === videoId)) {\r\n            this.playlistIds.push(new FormControl(videoId));\r\n        }\r\n    }\r\n\r\n    save() {\r\n        this.playlistsService.addVideoToOtherPlaylists(this.saveToPlaylistsForm.value).subscribe(dt => {\r\n            this.dialog.close();\r\n        });\r\n    }\r\n\r\n    addPlaylist() {\r\n        this.playlistsService.addPlaylist(this.addPlaylistForm.value).subscribe(dt => {\r\n            this.playlistIds.controls.push(this.fb.group({\r\n                id: dt.id,\r\n                name: dt.name,\r\n                privacy: +dt.privacy,\r\n                checked: true\r\n            }));\r\n            this.addPlaylistForm.patchValue({name: '', privacy: ''});\r\n        });\r\n    }\r\n\r\n    get playlistIds() {\r\n        return this.saveToPlaylistsForm.controls.playlists as FormArray;\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\" cdkDropList>\r\n    <div class=\"playlist-item\" cdkDrag [cdkDragPreviewClass]=\"'video-container'\"\r\n         (cdkDragDropped)=\"dragDropped($event, video)\"\r\n         *ngFor=\"let video of playlist.videos; trackBy:trackByElement\">\r\n        <div class=\"video-container\">\r\n            <div class=\"img\">\r\n                <img [src]=\"video.thumbnail|getImgPath\"\r\n                     (click)=\"openPlaylistPage(video, playlist)\">\r\n                <div class=\"update-privacy\" (click)=\"updatePrivacy(video, video.privacy.name)\"\r\n                     [ngClass]=\"video.privacy.name !== 'Public'  ? 'red':'green'\">\r\n                    <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'off' : 'on'}}</mat-icon>\r\n                </div>\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n\r\n            <div class=\"details\">\r\n                <div class=\"title\">\r\n                    <h4 class=\"\">{{video.name}}</h4>\r\n                    <div class=\"dotes\">\r\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\"\r\n                                aria-label=\"Example icon-button with a menu\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                        </button>\r\n                        <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"addToAnotherPlaylist(video)\">\r\n                                <mat-icon>playlist_add</mat-icon>\r\n                                <span>Add to another playlist</span>\r\n                            </button>\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_top</mat-icon>-->\r\n                            <!--                                            <span>Move to top</span>-->\r\n                            <!--                                        </button>-->\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_bottom</mat-icon>-->\r\n                            <!--                                            <span>Move to bottom</span>-->\r\n                            <!--                                        </button>-->\r\n                            <button mat-menu-item\r\n                                    (click)=\"changePlaylistThumbnail(playlist.id, video.thumbnail)\">\r\n                                <mat-icon>insert_photo</mat-icon>\r\n                                <span>Set as playlist thumbnail</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"updatePrivacy(video, video.privacy.name)\">\r\n                                <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'on' : 'off'}}</mat-icon>\r\n                                <span>Make {{video.privacy.name !== 'Private' ? 'private' : 'public'}}</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"removeVideoFromPlaylist(playlist.id, video.id)\">\r\n                                <mat-icon>delete</mat-icon>\r\n                                <span>Remove from playlist</span>\r\n                            </button>\r\n\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                </div>\r\n                <div class=\"video-details-2nd-row\">\r\n                    <p class=\"shortened-description\">{{video.description}}</p>\r\n                    <div class=\"tags\">\r\n                        <ul>\r\n                            <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                <span>{{tag.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-playlist-videos',\r\n    templateUrl: './playlist-videos.component.html',\r\n    styleUrls: ['./playlist-videos.component.scss']\r\n})\r\nexport class PlaylistVideosComponent implements OnInit {\r\n\r\n    apiUrl = API_URL;\r\n    authUser: CurrentUserData;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private dialog: MatDialog,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Playlist Video AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    openPlaylistPage(video, playlist) {\r\n        this.router.navigate(['videos/play'], {queryParams: {id: video.id, playlist_id: playlist.id}});\r\n    }\r\n\r\n    dragDropped(e, video) {\r\n        // console.log(e)\r\n        // console.log(channel)\r\n        this.playlist.videos = moveItemInArray(this.playlist.videos, e.previousIndex, e.currentIndex);\r\n        // console.log(this.playlist)\r\n        const sendData = {\r\n            rows: JSON.stringify(this.playlist),\r\n            playlist_id: this.playlist.id,\r\n            // user_id: this.authUser.id\r\n        };\r\n        this.playlistsService.updateVideoPosition(sendData).subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    changePlaylistThumbnail(playlistId, thumbnail) {\r\n        const params = {playlist_id: playlistId, ...{thumbnail}};\r\n        this.playlistsService.changePlaylistThumbnail(params).subscribe(dt => {\r\n            this.playlist = dt;\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    removeVideoFromPlaylist(playlistId, videoId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: videoId\r\n                }).subscribe(dt => {\r\n                    this.playlist = dt;\r\n                    this.refreshPlaylist.emit();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    addToAnotherPlaylist(video) {\r\n        this.playlistsService.get({channel_id: this.authUser?.channel?.id}).subscribe(dt => {\r\n            this.dialog.open(AddVideoToAnotherPlaylistComponent, {\r\n                width: '500px',\r\n                data: {video_id: video.id, playlists: dt}\r\n            }).afterClosed().subscribe(result => {\r\n                this.refreshPlaylist.emit();\r\n            });\r\n        });\r\n    }\r\n\r\n    updatePrivacy(video, privacy) {\r\n        this.videoService.updatePrivacy({\r\n            video_id: video.id,\r\n            privacy: privacy === 'Public' ? 'Private' : 'Public'\r\n        }).subscribe(dt => {\r\n            video.privacy = dt;\r\n        });\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","<div class=\"single-playlist\" *ngIf=\"playlist\">\r\n    <h2>Edit Playlist</h2>\r\n\r\n    <div class=\"inner-wrap\">\r\n        <div class=\"left\">\r\n            <app-playlist-info-form [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\">\r\n            </app-playlist-info-form>\r\n        </div>\r\n\r\n        <div class=\"right\">\r\n            <app-playlist-videos [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\"></app-playlist-videos>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SinglePlaylistComponent} from '@app/playlists/single-playlist/single-playlist.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'single/:id',\r\n        component: SinglePlaylistComponent,\r\n        data: {\r\n            title: 'Edit Playlist'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PlaylistsRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-single-playlist',\r\n    templateUrl: './single-playlist.component.html',\r\n    styleUrls: ['./single-playlist.component.scss']\r\n})\r\nexport class SinglePlaylistComponent implements OnInit {\r\n    playlist;\r\n    apiUrl = API_URL;\r\n    authUser: CurrentUserData;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n        // this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getPlaylistDetails();\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Single playlist AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n\r\n    getPlaylistDetails() {\r\n\r\n        const playlistId = this.route.snapshot?.params?.id;\r\n\r\n        if (playlistId) {\r\n            this.playlistsService.getById({playlist_id: playlistId, user_id: this.authUser}).subscribe(dt => {\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {PlaylistsRoutingModule} from './playlists-routing.module';\r\nimport {SinglePlaylistComponent} from './single-playlist/single-playlist.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { PlaylistInfoFormComponent } from './single-playlist/playlist-info-form/playlist-info-form.component';\r\nimport { PlaylistVideosComponent } from './single-playlist/playlist-videos/playlist-videos.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [SinglePlaylistComponent, PlaylistInfoFormComponent, PlaylistVideosComponent],\r\n    imports: [\r\n        CommonModule,\r\n        PlaylistsRoutingModule,\r\n        DragDropModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class PlaylistsModule {\r\n}\r\n"]}