{"version":3,"sources":["webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.ts","webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.html","webpack:///src/app/shared/components/posts/post-item/post-item.component.ts","webpack:///src/app/shared/components/posts/post-item/post-item.component.html","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.ts","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.html"],"names":["SocialShareDialogComponent","data","dialog","toastr","this","shareUrl","encodeURIComponent","inputElement","closeAll","select","document","execCommand","setSelectionRange","success","copyInputMessage","PostItemComponent","postsService","userStore","postsStore","router","route","accessedFromGroup","vote","deletePosts","API_URL","commentsField","snapshot","params","id","authUser","allPosts$","subscribe","allPosts","posts","open","width","height","window","location","href","afterClosed","dt","post","isPostVotedByAuthUser","selectedPost","emit","post_id","user_id","user_posts","find","up","usersPosts","users_posts","voted","push","delete","e","console","log","setEditePost","cover_img","maxWidth","maxHeight","countUploadFile","navigate","PostFormPlaceholderComponent","postsServices","uploadFile","fb","_userInfoService","fd","FormData","videoUploadSpinner","finishVideoUpload","videoName","_getAuthInfo","_userInfo","type","res","postForm","group","description","username","author_id","group_id","path","votes","add","value","setAllPosts","reset","forEach","elem","includes","append","file","duration","addPhotoVideoPosts","uploadDialog"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-social-share-dialog',\r\n    templateUrl: './social-share-dialog.component.html',\r\n    styleUrls: ['./social-share-dialog.component.scss']\r\n})\r\nexport class SocialShareDialogComponent implements OnInit {\r\n    shareUrl;\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n    ) {\r\n        this.shareUrl = data.shareUrl;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getTweeterLink() {\r\n        return 'https://twitter.com/intent/tweet?text=' + this.shareUrl;\r\n    }\r\n\r\n    getFacebookLink() {\r\n        return 'https://www.facebook.com/sharer/sharer.php?href=' + encodeURIComponent(this.shareUrl);\r\n    }\r\n\r\n    copyInputMessage(inputElement){\r\n        this.dialog.closeAll();\r\n        inputElement.select();\r\n        document.execCommand('copy');\r\n        inputElement.setSelectionRange(0, 0);\r\n        this.toastr.success('Captioned');\r\n    }\r\n\r\n}\r\n","<div class=\"modalDiv\">\r\n    <p class=\"shareLink\" >Share this link via</p>\r\n    <div class=\"linkImages\">\r\n        <a  target=\"_blank\" [href]=\"getTweeterLink()\">\r\n            <img class=\"twitterImg\" src=\"assets/img/twitter.svg\" alt=\"\">\r\n        </a>\r\n        <a  [href]=\"getFacebookLink()\"\r\n           onclick=\"javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');return false;\"\r\n           target=\"_blank\" title=\"Share on Facebook\">\r\n            <img class=\"facebookImg\" src=\"assets/img/facebook.svg\" alt=\"\">\r\n        </a>\r\n    </div>\r\n    <div class=\"copyingDiv\">\r\n        <input id=\"link-address-holder\" [value]=\"shareUrl\" #urlHolder>\r\n        <p class=\"copyLink\" (click)=\"copyInputMessage(urlHolder)\">Or copy link</p>\r\n    </div>\r\n    <button class=\"copy-url\" (click)=\"copyInputMessage(urlHolder)\">Copy</button>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport {Post} from '@shared/models/post';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport { SocialShareDialogComponent } from '@core/components/modals/social-share-dialog/social-share-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { PostsStoreService } from '@core/services/stores/posts-store.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {API_URL} from '@core/constants/global';\r\nimport { UploadFileComponent } from '@core/components/modals/upload-file/upload-file.component';\r\n\r\n@Component({\r\n    selector: 'app-post-item',\r\n    templateUrl: './post-item.component.html',\r\n    styleUrls: ['./post-item.component.scss']\r\n})\r\nexport class PostItemComponent implements OnInit, OnDestroy {\r\n    @Input() post: Post;\r\n    @Input() group;\r\n    @Input() accessedFromGroup = false;\r\n    @Output() vote = new EventEmitter();\r\n    @Output() deletePosts = new EventEmitter();\r\n\r\n    selectedPost: Post;\r\n    authUser;\r\n    allPosts;\r\n    totalCount;\r\n    API_URL = API_URL;\r\n    commentsField;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n        private userStore: UserStoreService,\r\n        private dialog: MatDialog,\r\n        private postsStore: PostsStoreService,\r\n        public router: Router,\r\n        private route: ActivatedRoute\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.commentsField = !!this.route.snapshot?.params?.id;\r\n        // console.log(this.route.snapshot?.params?.id);\r\n        this.authUser = this.userStore.authUser;\r\n        this.postsStore.allPosts$.subscribe((data: any) => {\r\n            this.allPosts = data.posts;\r\n        });\r\n    }\r\n    openSocialShareModal() {\r\n        this.dialog.open(SocialShareDialogComponent, {\r\n            width: '500px',\r\n            height: '400px',\r\n            data: {shareUrl: window.location.href}\r\n        })\r\n            .afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    voteForPost(vote, post) {\r\n        if (!this.isPostVotedByAuthUser(vote)) {\r\n            this.selectedPost = post;\r\n            this.vote.emit({\r\n                post_id: this.post.id,\r\n                user_id: this.authUser.id,\r\n                post,\r\n                vote\r\n            });\r\n        }\r\n    }\r\n\r\n    isPostVotedByAuthUser(vote) {\r\n        return !!this.post?.user_posts?.find(up => {\r\n            const usersPosts = up.users_posts;\r\n            return usersPosts.voted === vote &&\r\n                usersPosts.user_id === this.authUser.id;\r\n        });\r\n    }\r\n\r\n    deletePost(post) {\r\n        const id = [];\r\n        id.push(post.id);\r\n        this.postsService.delete(id).subscribe((e) => {\r\n            this.deletePosts.emit();\r\n        });\r\n    }\r\n\r\n    editPost(post) {\r\n        console.log(post);\r\n        this.postsStore.setEditePost(post);\r\n        if (post.cover_img) {\r\n            this.dialog.open(UploadFileComponent, {\r\n                maxWidth: '591px',\r\n                maxHeight: '479px',\r\n                height: '100%',\r\n                width: '100%',\r\n                data: {\r\n                    countUploadFile: 'oneFile',\r\n                    post\r\n                }\r\n            }).afterClosed().subscribe(dt => {\r\n                console.log(dt);\r\n            });\r\n        } else {\r\n            this.router.navigate(['/posts/create']);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"post-item\" *ngIf=\"post\">\r\n    <div class=\"posted\">\r\n        <p>\r\n            Posted by <span [routerLink]=\"'/users/'+post.post_author.username\"\r\n                            class=\"author-username\">{{post.post_author.username}}</span>\r\n            <ng-container *ngIf=\"!accessedFromGroup && post.post_group as group\">\r\n                <i class=\"fas fa-arrow-right group-pointer\"></i>\r\n                <span class=\"post-group-name\" [routerLink]=\"'/groups/'+group.custom_name+'/about'\">{{group.name}}</span>\r\n            </ng-container>\r\n        </p>\r\n        <p>{{ post.views + ' views ' }}{{ post.created_at| dateFromNow }}</p>\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n        <div class=\"left-wrap\">\r\n            <div class=\"voting-container\">\r\n                <button class=\"vote-up-btn\" [class.active]=\"isPostVotedByAuthUser(1)\" (click)=\"voteForPost(1, post)\" [disabled]=\"\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n                <div class=\"vote-count\">{{post.votes}}</div>\r\n                <button class=\"vote-down-btn\" [class.active]=\"isPostVotedByAuthUser(-1)\" (click)=\"voteForPost(-1, post)\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"right-wrap\">\r\n            <div [innerHTML]=\"post.description\" [routerLink]=\"'/posts/'+post.id\"></div>\r\n\r\n            <img *ngIf=\"post?.cover_img?.includes('image')\" class=\"post-cover\" [routerLink]=\"'/posts/'+post.id\" [src]=\"post.cover_img|getImgPath: 'images'\">\r\n            <video *ngIf=\"post?.cover_img?.includes('video')\" [routerLink]=\"'/posts/'+post.id\" [src]=\"post.cover_img|getImgPath: 'videos'\" controls ></video>\r\n<!--            <video src=\"https://metl.tv/uploads/videos/video_1652789198844.mp4\" controls ></video>-->\r\n\r\n            <div class=\"post-menu\">\r\n                <div class=\"menu\">\r\n                        <a *ngIf=\"commentsField\"><span class=\"material-icons\">chat_bubble</span>Comments</a>\r\n                        <a (click)=\"openSocialShareModal()\"><span class=\"material-icons\">share</span>Share</a>\r\n                </div>\r\n                <div class=\"dotes\" *ngIf=\"authUser.id === post.author_id\">\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                        <i class=\"material-icons\">more_vert</i>\r\n                    </button>\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item (click)=\"editPost(post)\">\r\n                            <mat-icon>edit</mat-icon>\r\n                            <span>Edit</span>\r\n                        </button>\r\n                        <button mat-menu-item (click)=\"deletePost(post)\">\r\n                            <mat-icon>delete</mat-icon>\r\n                            <span>Delete</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {PostsStoreService} from '@core/services/stores/posts-store.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {UploadFileComponent} from '@core/components/modals/upload-file/upload-file.component';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-post-form-placeholder',\r\n    templateUrl: './post-form-placeholder.component.html',\r\n    styleUrls: ['./post-form-placeholder.component.scss']\r\n})\r\nexport class PostFormPlaceholderComponent implements OnInit {\r\n    @Input() selectedGroup;\r\n\r\n    authUser: CurrentUserData;\r\n    fd = new FormData();\r\n    videoUploadSpinner = false;\r\n    finishVideoUpload = false;\r\n    videoName = '';\r\n    postForm: FormGroup;\r\n\r\n    constructor(\r\n        public userStore: UserStoreService,\r\n        private postsServices: PostsService,\r\n        private uploadFile: VideoService,\r\n        private fb: FormBuilder,\r\n        private postsStore: PostsStoreService,\r\n        private dialog: MatDialog,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Post Form  Placeholder DATA');\r\n        });\r\n    }\r\n\r\n    addPhotoVideoPosts(fd, type) {\r\n        this.uploadFile.uploadFile(fd, type).subscribe((res) => {\r\n            if (res) {\r\n                this.postForm = this.fb.group({\r\n                    description: [''],\r\n                    username: [this.userStore.authUser.username],\r\n                    author_id: [this.userStore.authUser?.id],\r\n                    group_id: [''],\r\n                    cover_img: [res.path],\r\n                    votes: 1\r\n                });\r\n                this.postsServices.add(this.postForm.value).subscribe((post) => {\r\n                    console.log(post);\r\n                    this.postsStore.setAllPosts(post);\r\n                    this.postForm.reset();\r\n                });\r\n            }\r\n            this.finishVideoUpload = false;\r\n            this.fd = new FormData();\r\n        });\r\n    }\r\n\r\n    uploadDialog() {\r\n        this.dialog.open(UploadFileComponent, {\r\n            maxWidth: '591px',\r\n            maxHeight: '479px',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {countUploadFile: 'oneFile'}\r\n        }).afterClosed().subscribe(dt => {\r\n            console.log(dt);\r\n            if (dt) {\r\n                const fd = new FormData();\r\n                let type = '';\r\n                dt.forEach((elem) => {\r\n                    if (elem.type.includes('image')) {\r\n                        console.log(elem);\r\n                        type = 'image';\r\n                        console.log(type);\r\n                        fd.append('image', elem.file);\r\n                        fd.append('belonging', 'post_image');\r\n                        fd.append('duration', '');\r\n                    }\r\n                    if (elem.type.includes('video')) {\r\n                        type = 'video';\r\n                        console.log(type);\r\n                        fd.append('video', elem.file);\r\n                        fd.append('belonging', 'post_video');\r\n                        fd.append('duration', elem.duration);\r\n                    }\r\n                });\r\n                if (type === 'image' || type === 'video') {\r\n                    this.addPhotoVideoPosts(fd, type);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div id=\"post-form-container\">\r\n    <form>\r\n        <div class=\"user-avatar\" *ngIf=\"(userStore.authUser$|async) as authUser\">\r\n            <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'images'\">\r\n        </div>\r\n\r\n        <div class=\"form-controls\">\r\n            <textarea placeholder=\"Create a public post...\" routerLink=\"/posts/create\"\r\n                      [queryParams]=\"{group_id: selectedGroup?.id}\"></textarea>\r\n            <div class=\"action-btn-wrap\">\r\n                <button (click)=\"uploadDialog()\" >\r\n                    <img src=\"assets/img/photo-green-small.svg\" alt=\"\">\r\n                    <span>Add photo/video</span>\r\n                </button>\r\n                <p>{{videoName}}</p>\r\n                <mat-spinner *ngIf=\"videoUploadSpinner\" [diameter]=\"24\"></mat-spinner>\r\n                <mat-icon *ngIf=\"finishVideoUpload\" style=\"background-color: #0aa06e; color: #ffffff\">done</mat-icon>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n"]}