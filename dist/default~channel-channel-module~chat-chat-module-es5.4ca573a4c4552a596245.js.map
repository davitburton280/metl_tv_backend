{"version":3,"sources":["webpack:///src/app/shared/components/chat/group-chat/left-side/group-chat-left-side-holder.component.ts","webpack:///src/app/shared/components/chat/group-chat/left-side/group-chat-left-side-holder.component.html","webpack:///src/app/core/components/modals/show-chat-group-members/show-chat-group-members.component.html","webpack:///src/app/core/components/modals/show-chat-group-members/show-chat-group-members.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/members-list/members-list.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/members-list/members-list.component.ts","webpack:///src/app/core/constants/chat.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/members-add-form/members-add-form.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/members-add-form/members-add-form.component.html","webpack:///src/app/shared/components/user-tags/user-tags.component.ts","webpack:///src/app/shared/components/user-tags/user-tags.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-avatar-handler/group-avatar-handler.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-avatar-handler/group-avatar-handler.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-actions/group-chat-actions.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-actions/group-chat-actions.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/group-chat-members.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-members/group-chat-members.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-top.component.html","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-top/group-chat-top.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-right-side-holder.component.ts","webpack:///src/app/shared/components/chat/group-chat/right-side/group-chat-right-side-holder.component.html","webpack:///src/app/shared/components/chat/group-chat/left-side/group-form/group-form.component.ts","webpack:///src/app/shared/components/chat/group-chat/left-side/group-form/group-form.component.html"],"names":["GroupChatLeftSideHolderComponent","mobileHelper","provide","useClass","ShowChatGroupMembersComponent","groupsMessagesStore","_userInfoService","activeTab","this","_getAuthInfo","getGroupMembers","_userInfo","subscribe","data","authUser","console","log","selectedGroup","selectedGroupMessages","chat_group_members","filter","m","chat_groups_members","confirmed","tab","MembersListComponent","dialog","chatService","socketService","notificationsStore","isEmptyObj","modalMode","onlineMembers","subscriptions","trackGroupChanges","getOnlineMembers","getAcceptedJoinGroup","getDeclinedJoinChatGroup","getRemovedSavedMember","getLeftGroup","getMembersCountDelimiter","onLogout","push","selectedGroupsMessages$","sGroup","length","member","open","afterClosed","removeGroupMember","group_id","id","member_id","dt","changeGroup","removeFromChatGroup","from_user","group","msg","first_name","last_name","name","removeFromChatGroupNotify","leftGroups","setGroupsMessages","selectGroup","getConnectedGroupMembers","group_name","username","membersOnlineFeedback","members","getAcceptedJoinChatGroup","notification","rest","updateNotifications","leaveChatGroupNotify","user","u","groupMember","groupName","groupsMessages","find","gm","width","height","creator_id","forEach","s","unsubscribe","MembersAddFormComponent","usersService","fb","userContacts","filteredContacts","inputGroupMembers","groupMembers","memberCtrl","separatorKeysCodes","initForm","getUserContacts","getContactsFilteredBySearch","groupChatDetailsForm","member_ids","required","accepted","patchValue","user_id","blocked","valueChanges","search","fc","fullNameLowerCased","toLowerCase","includes","e","value","option","map","chipsInput","nativeElement","setValue","inviteMembers","inviteToNewChatGroup","invited_members","group_type","showMembersForm","index","indexOf","splice","autoCompleteMemberSelected","UserTagsComponent","videoService","auth","tags","tagSelected","loggedIn","getUserTags","emit","GroupAvatarHandlerComponent","removeAvatarShown","groupsMessages$","file","target","files","formData","FormData","append","avatarInput","changeGroupAvatar","d","changeAvatar","GroupChatActionsComponent","GroupChatMembersComponent","removeGroup","initiator","leaveGroup","leaveChatGroup","groupChatMessagesStore","GroupChatTopComponent","GroupChatRightSideHolderComponent","groupMessagesStore","transform","showResponsiveChatBox","getSelectedGroup","GroupFormComponent","showGroupChatForm","groupForm","valid","setAddGroupFormValue","shown","addGroup","toggleForm"],"mappings":"meACA,sFAQO,iBAAMA,EAAN,WAGH,WACWC,2BAAA,KAAAA,eAJR,kE,6CAAMD,GAAgC,Y,uBAAhCA,EAAgC,4FAF9B,CAAC,CAACE,QAAS,IAAwBC,SAAU,QAAwB,gICPpF,gBAEI,gBACI,2BACJ,OACA,4BACJ,Q,MALK,6DAEmB,oCAEH,sC,kLDId,I,mMEHC,eACI,cACG,uFAEqB,QAAO,OACnC,O,mCAJwB,uCAAmC,uBAG/B,iB,yBAMxB,aACI,gBACI,gB,qBACA,eAAM,QAA8C,OACxD,OAEA,iBACI,oBACI,eACJ,OAEA,2BAEI,qBACI,gBACA,gBAAM,wBAAY,OACtB,OACA,qBACI,gBACA,gBAAM,sBAAU,OACpB,OACJ,OACJ,OACJ,Q,kCArB4B,qDACd,2CAIE,qC,ICbfC,E,6CAAN,IAAMA,EAAN,WAMH,WACYC,EAEAC,2BAFA,KAAAD,sBAEA,KAAAC,mBALZ,KAAAC,UAAY,cAORC,KAAKC,eAXN,wDAgBCD,KAAKE,oBAhBN,qCAmBmB,WAClBF,KAAKF,iBAAiBK,UAAUC,WAAWC,YACvCL,EAAKM,SAAWD,EAChBE,QAAQC,IAAIR,EAAKM,SAAU,+CAtBhC,wCA2BCN,KAAKS,cAAgBT,KAAKH,oBAAoBa,wBA3B/C,6CA+BC,OAAOV,KAAKS,cAAcE,mBAAmBC,QAAOC,YAACA,OAAIA,EAAEC,oBAAoBC,eA/BhF,sCAkCaC,GACZhB,KAAKD,UAAYiB,MAnClB,M,oCAAMpB,GAA6B,sB,uBAA7BA,EAA6B,4oBDV1C,gBACI,aACI,iBAAyB,QAAsB,OAAQ,oBAC3D,OAEA,eACI,qBAMJ,OAEA,gBACI,aACI,sBAwBJ,OAGJ,OACJ,Q,MA1CiC,mCAIJ,kCAUb,mD,iwFENA,sBAAyC,+FAA+B,iBAAM,Q,qCAS1E,eACG,gGAA+B,Q,yBAN1C,QACI,iBACI,eAAM,QAAoC,OAC9C,OACA,iBACI,qBAEJ,OACJ,Q,sCANc,2CAGe,qF,yBAjBjC,eAKI,gBACI,gB,qBAEA,2BACA,gBACJ,OAEA,+BASJ,Q,iCAnBI,+BAA8B,2CAIN,wDAA4C,wCAEtD,8CACU,qEAGV,kC,qCAWtB,oBAA+B,yEAC3B,eACJ,O,sBAF+D,mC,yBAzBnE,gBACI,aACI,sB,gBAsBJ,OACA,yBAGJ,Q,kBAzBY,oGAsBmF,mCCPxF,IAAMqB,EAAN,IAAMA,EAAN,WAWH,WACYC,EACAC,EACAC,EACAvB,EACAwB,EACAC,2BALA,KAAAJ,SACA,KAAAC,cACA,KAAAC,gBACA,KAAAvB,sBACA,KAAAwB,qBACA,KAAAC,aAdH,KAAAC,aAET,KAAAC,cAAgB,GAChB,KAAAC,cAAgC,GAN7B,wDAsBCzB,KAAK0B,oBACL1B,KAAK2B,mBACL3B,KAAK4B,uBACL5B,KAAK6B,2BACL7B,KAAK8B,wBACL9B,KAAK+B,eACL/B,KAAKgC,2BACLhC,KAAKiC,aA7BN,0CAgCgB,WACfjC,KAAKyB,cAAcS,KAAKlC,KAAKH,oBAAoBsC,wBAAwB/B,WAAWgC,YAChFpC,EAAKS,cAAgB2B,EAErBpC,EAAK2B,yBApCV,iDAyCC,OAAO3B,KAAKuB,UAAYvB,KAAKS,cAAcE,mBAAmB0B,OC3DpB,IDkB3C,wCA4CeC,GAAOA,WACrBtC,KAAKyB,cAAcS,KAAKlC,KAAKkB,OAAOqB,KAAK,KAA6BC,cAAcpC,WAAUW,YACtFA,GACAf,EAAKmB,YAAYsB,kBAAkB,CAC/BC,SAAU1C,EAAKS,cAAckC,GAC7BC,UAAWN,EAAOK,KACnBvC,WAAUyC,YACT7C,EAAKS,cAAgBoC,EACrB7C,EAAKH,oBAAoBiD,YAAY9C,EAAKS,eAC1CT,EAAKoB,cAAc2B,oBAAoB,CACnCT,SACAU,UAAWhD,EAAKM,SAChB2C,MAAOjD,EAAKS,cACZyC,IAAIA,WAADA,OAAalD,EAAKM,SAAS6C,WAAa,IAAMnD,EAAKM,SAAS8C,UAA5DF,sCAAmGZ,EAAOa,WAAa,IAAMb,EAAOc,UAApIF,0DACWlD,EAAKS,cAAc4C,KAD9BH,8BAzDpB,8CAiEoB,WACnBlD,KAAKyB,cAAcS,KAAKlC,KAAKoB,cAAckC,4BAA4BlD,WAAWC,gBACvE4C,EAA6B5C,EAA9B,MAAQiC,EAAsBjC,EAAxB,OAAUkD,EAAclD,EAAhB,WAGhBiC,EAAOK,KAAO3C,EAAKM,SAASqC,IAC5B3C,EAAKH,oBAAoB2D,kBAAkBD,GAC3CvD,EAAKH,oBAAoB4D,YAAY,KAGrCzD,EAAKH,oBAAoBiD,YAAYG,SA3E9C,yCAkFe,WAEdjD,KAAKoB,cAAcsC,yBAAyB,CACxCC,WAAY3D,KAAKS,cAAc4C,KAC/BO,SAAU5D,KAAKM,SAASsD,WAG5B5D,KAAKyB,cAAcS,KAAKlC,KAAKoB,cAAcyC,wBAAwBzD,WAAWyC,gBACnEI,EAAkBJ,EAAnB,MAAQiB,EAAWjB,EAAb,QAIRI,IAAUjD,EAAKS,cAAc4C,OAC7BrD,EAAKwB,cAAgBsC,SA/F9B,6CAoGmB,WAClB9D,KAAKyB,cAAcS,KAAKlC,KAAKoB,cAAc2C,2BAA2B3D,WAAWC,gBACtE2D,EAAsB3D,EAAvB,aAAe4D,EAAQ5D,EAAV,KACnBE,QAAQC,IAAI,2BAA4BH,GAEpC2D,EAAahB,UAAUL,KAAO3C,EAAKM,SAASqC,IAC5C3C,EAAKqB,mBAAmB6C,oBAAoBF,GAGhDhE,EAAKH,oBAAoBiD,YAAYmB,EAAKhB,aA7G/C,iDAiHuB,WACtBjD,KAAKyB,cAAcS,KAAKlC,KAAKoB,cAAcS,2BAA2BzB,WAAWC,gBACtE4C,EAAuB5C,EAAxB,MAAQ2D,EAAgB3D,EAAlB,aACZE,QAAQC,IAAI,WAAYH,GACpBA,EAAK2C,UAAUL,KAAO3C,EAAKM,SAASqC,GACpC3C,EAAKH,oBAAoB4D,YAAY,KAErCzD,EAAKqB,mBAAmB6C,oBAAoBF,GAC5ChE,EAAKH,oBAAoBiD,YAAYG,UAzH9C,qCA8HW,WACVjD,KAAKyB,cAAcS,KAAKlC,KAAKoB,cAAc+C,uBAAuB/D,WAAWC,gBAClE4C,EAAS5C,EAAV,MACNE,QAAQC,IAAIH,GACRA,EAAK2C,UAAUL,KAAO3C,EAAKM,SAASqC,GACpC3C,EAAKH,oBAAoB4D,YAAY,KAErCzD,EAAKqB,mBAAmB6C,oBAAoB7D,GAC5CL,EAAKH,oBAAoBiD,YAAYG,UAtI9C,iCA2IO,WACNjD,KAAKoB,cAAca,WAAW7B,WAAWgE,YACrCpE,EAAKwB,cAAgBxB,EAAKwB,cAAcZ,QAAOyD,YAACA,OAAIA,IAAMD,EAAKR,iBA7IpE,2CAkJkBU,G,QACXC,EAAoH,QAA3G,EAAGvE,KAAKH,oBAAoB2E,eAAeC,MAAKC,YAAK,MAAC,OAAAA,EAAG/B,MAAuC,QAArC,EAAK2B,iBAAaxD,+BAAmB,WAAE4B,wBAAS,WAAEW,KAC5H,SAAIrD,KAAKwB,eAAiB+C,KAAgC,QAAvB,EAAKvE,KAAKS,yBAAa,WAAE4C,QAC/CrD,KAAKwB,cAAciD,MAAK5D,YAACA,OAAIyD,EAAYV,WAAa/C,QArJpE,4CA2JCb,KAAKyB,cAAcS,KAAKlC,KAAKkB,OAAOqB,KAAK,EAA+B,CACpEoC,MAAO,QACPC,OAAQ,UACTpC,cAAcpC,WAAUyC,mBA9J5B,0CAmKiBhC,G,QAChB,OAAOb,KAAKM,SAASqC,MAAyB,QAAvB,EAAK3C,KAAKS,yBAAa,WAAEoE,aACzChE,EAAE8B,MAAyB,QAAvB,EAAK3C,KAAKS,yBAAa,WAAEoE,cAAe7E,KAAKuB,YArKzD,oCAyKCvB,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBAzKnC,M,oCAAM/D,GAAoB,8D,uBAApBA,EAAoB,opBDlBjC,sB,KAA0B,0G,omFGI1B,0N,sDCAgB,sBACU,2FACN,QACA,sBAAwB,iBAAM,OAClC,O,0BAFI,oD,yBAiBJ,wBACI,QACJ,Q,uBAFqD,gBACjD,oDDRb,qBAAMgE,EAAN,WAmBH,WACY/D,EACAC,EACA+D,EACA9D,EACAvB,EACAsF,2BALA,KAAAjE,SACA,KAAAC,cACA,KAAA+D,eACA,KAAA9D,gBACA,KAAAvB,sBACA,KAAAsF,KAxBZ,KAAAC,aAAe,GACf,KAAAC,iBAAmB,GAEnB,KAAAC,kBAAoB,GACpB,KAAAC,aAAe,GAEf,KAAA9D,cAAgC,GAEhC,KAAA+D,WAAa,IAAI,IACR,KAAAC,mBAA+B,CAAC,IAAO,KAIvC,KAAAlE,aAdN,wDAgCCvB,KAAK0F,WAEL1F,KAAK2F,kBACL3F,KAAKE,kBACLF,KAAK4F,gCApCN,iCAwCC5F,KAAK6F,qBAAuB7F,KAAKmF,GAAGlC,MAAM,CACtCP,SAAU,CAAC1C,KAAKS,cAAckC,IAC9BmD,WAAY,CAAC,GAAI,IAAWC,UAC5BC,SAAU,CAAC,OA3ChB,wCA+Cc,WACbzF,QAAQC,IAAIR,KAAKS,eACjBT,KAAKuF,aAAevF,KAAKS,cAAcE,mBACvCX,KAAKH,oBAAoBsC,wBAAwB/B,WAAWyC,YACxD7C,EAAKS,cAAgBoC,EACjB7C,EAAKS,gBACLT,EAAKuF,aAAevF,EAAKS,cAAcE,mBACvCX,EAAK6F,qBAAqBI,WAAW,CAACvD,SAAU1C,EAAKS,cAAckC,WAtD5E,wCA2Dc,WACb3C,KAAKyB,cAAcS,KAAKlC,KAAKkF,aAAaS,gBAAgB,CACtDO,QAASlG,KAAKM,SAASqC,GACvBwD,QAAS,IACV/F,WAAUyC,YACT7C,EAAKoF,aAAevC,QAhEzB,oDAoE0B,WACzB7C,KAAKyB,cAAcS,KAAKlC,KAAKwF,WAAWY,aAAahG,WAAUiG,YACvDA,IACA9F,QAAQC,IAAIR,EAAKoF,aAAcpF,EAAKuF,cACpCvF,EAAKqF,iBAAmBrF,EAAKoF,aAAaxE,QAAO0F,YAC7C,IAAMC,GAAsBD,EAAGnD,WAAa,IAAMmD,EAAGlD,WAAWoD,cAChE,QAAID,EAAmBE,SAASJ,KACpBrG,EAAKuF,aAAad,MAAKC,YAAEA,OAAKA,EAAGvB,WAAa,IAAMuB,EAAGtB,WAAWoD,gBAAkBD,eA3E7G,iDAmFwBG,GACvB,IAAMC,EAAQD,EAAEE,OAAOD,MAElB3G,KAAKsF,kBAAkBb,MAAKC,YAAEA,OAAIA,EAAG/B,KAAOgE,OAC7C3G,KAAKsF,kBAAkBpD,KAAKwE,EAAEE,OAAOD,OACrC3G,KAAK6F,qBAAqBI,WAAW,CAACH,WAAY9F,KAAKsF,kBAAkBuB,KAAInC,YAAEA,OAAIA,EAAG/B,SAK1F3C,KAAK8G,WAAWC,cAAcJ,MAAQ,GACtC3G,KAAKwF,WAAWwB,SAAS,MA9F1B,sCAiGY,WAEXhH,KAAK8G,WAAWC,cAAcJ,MAAQ,GACtC3G,KAAKwF,WAAWwB,SAAS,IACzBhH,KAAKyB,cAAcS,KAAKlC,KAAKmB,YAAY8F,cAAcjH,KAAK6F,qBAAqBc,OAAOvG,WAAUyC,YAC9F7C,EAAKuF,aAAe1C,iBAAIlC,mBACxBX,EAAKS,cAAgBoC,EACrB7C,EAAKoB,cAAc8F,qBAAqB,CACpCC,gBAAiBnH,EAAKsF,kBACtBtC,UAAWhD,EAAKM,SAChB2C,MAAOjD,EAAKS,cACZ2G,WAAY,OACZlE,IAAIA,WAADA,OAAalD,EAAKM,SAAS6C,WAAa,IAAMnD,EAAKM,SAAS8C,UAA5DF,gEAA6HlD,EAAKS,cAAc4C,KAAhJH,qBAEPlD,EAAKH,oBAAoBiD,YAAY9C,EAAKS,eAC1CF,QAAQC,IAAIR,EAAKH,oBAAoB2E,gBACrCjE,QAAQC,IAAIR,EAAKH,oBAAoBa,uBACrCV,EAAKH,oBAAoBwH,mBACzBrH,EAAKsF,kBAAoB,SAnH9B,wCAuHehD,GACd,IAAMgF,EAAQtH,KAAKsF,kBAAkBiC,QAAQjF,GAEzCgF,GAAS,IACTtH,KAAKsF,kBAAkBkC,OAAOF,EAAO,GACrCtH,KAAK6F,qBAAqBI,WAAW,CAACH,WAAY9F,KAAKsF,kBAAkBuB,KAAInC,YAAEA,OAAIA,EAAG/B,WA5H3F,oCAiIC3C,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBAjInC,K,6CAAMC,GAAuB,8D,uBAAvBA,EAAuB,6D,MAAA,K,mrBChBpC,iBACI,gBACI,yBACI,4BACI,2BAMA,oBAQJ,OACA,+BACkB,0CAAkB,EAAAwC,2BAAA,MAGhC,8BAMJ,OAEA,uBAAsB,+CAAmC,OAE7D,OACA,qBAAQ,gCAAS,EAAAR,mBAAiB,eAAG,OACzC,OACJ,Q,6BApCyC,+BAAnC,yCAIoB,4CAUH,yCAA0B,oBAA1B,CAA0B,qDAA1B,CAA0B,qBASrB,6C,g4BDPrB,I,kCEhBP,kG,qCCGQ,aACI,cAAG,uGAA0C,QAAwB,OACzE,O,+BADiD,kC,yBAHrD,QAEI,qBAGJ,Q,uBAHQ,oCDQL,qBAAMS,EAAN,WAMH,WACYC,EACDC,EACC9H,2BAFA,KAAA6H,eACD,KAAAC,OACC,KAAA9H,mBARZ,KAAA+H,KAAO,GAGgB,KAAAC,YAAc,IAAI,IAQrC9H,KAAKC,eAZN,wDAiBKD,KAAK4H,KAAKG,YACV/H,KAAKgI,gBAlBV,qCAsBmB,WAClBhI,KAAKF,iBAAiBK,UAAUC,WAAWC,YACvCL,EAAKM,SAAWD,EAChBE,QAAQC,IAAIR,EAAKM,SAAU,uCAzBhC,oCA6BU,I,EAAA,OACTN,KAAK2H,aAAaK,YAAY,CAAC9B,QAAsB,QAAf,EAAElG,KAAKM,oBAAQ,WAAEqC,KAAKvC,WAAWyC,YACnE7C,EAAK6H,KAAOhF,OA/BjB,gCAmCOQ,GACNrD,KAAK8H,YAAYG,KAAK5E,OApCvB,K,6CAAMqE,GAAiB,gC,uBAAjBA,EAAiB,qLCX9B,eACI,+BAMJ,Q,MANkB,iC,q1BDUX,I,wEEDMQ,E,8HAAN,IAAMA,EAAN,WASH,WACY/G,EACAtB,2BADA,KAAAsB,cACA,KAAAtB,sBAPZ,KAAA4B,cAAgC,GAChC,KAAA0G,qBALG,wDAgBCnI,KAAKH,oBAAoBuI,gBAAgBhI,WAAUyC,kBAhBpD,qCAuBmB,WAAT6D,EAAS,uDAAL,KACP2B,EAAO3B,iBAAG4B,OAAOC,MAAM,GAEvBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,UAAUL,iBAAMhF,OAAQ,IACxCmF,EAASE,OAAO,WAAY1I,KAAKS,cAAckC,IAC/C6F,EAASE,OAAO,YAAa1I,KAAKM,SAASqC,IAEvC0F,EACAG,EAASE,OAAO,oBAAqBL,GAErCrI,KAAK2I,YAAY5B,cAAcJ,MAAQ,GAG3C3G,KAAKyB,cAAcS,KAAKlC,KAAKmB,YAAYyH,kBAAkBJ,GAAUpI,WAAUyC,YAG3E7C,EAAKH,oBAAoB2D,kBAAkBX,GAE3C7C,EAAKS,cAAgBoC,EAAG4B,MAAKoE,YAACA,OAAI7I,EAAKS,cAAckC,KAAOkG,EAAElG,YA1CnE,oCAiDC3C,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBAjDnC,M,oCAAMkD,GAA2B,sB,uBAA3BA,EAA2B,iE,MAAA,K,ybCVxC,gBACI,gBAA+B,+DAAuC,0DAGlE,kBACI,gB,qBACJ,OACA,qBAAmC,gCAAS,EAAAY,kBACsB,kBAClE,OACJ,OACA,oBAAwE,kCAAU,EAAAA,aAAA,MAAlF,OACA,gBAAwB,SAAuB,OACnD,Q,MAR0C,qGAGxB,8FAG0C,0BAChC,gE,ivCCXxB,mBAA+C,sEAE3C,cACJ,O,KAHwB,yB,qCAIxB,gBAAoB,gEAChB,YAAG,cAA4B,OACnC,Q,qCAEA,gBAEI,mBACI,eACJ,OACA,2BAII,oBAAsB,+DAClB,wBACJ,OACJ,OACJ,O,sBAX4B,oCAA0B,qBCEnD,IAAMC,ECLAC,EDKN,IAAMD,EAAN,WAMH,WACY5H,EACAC,EACAvB,EACAqB,2BAHA,KAAAC,cACA,KAAAC,gBACA,KAAAvB,sBACA,KAAAqB,SANZ,KAAAO,cAAgC,GAJ7B,qGAmBCzB,KAAKH,oBAAoBwH,iBAAmBrH,KAAKH,oBAAoBwH,kBAnBtE,oCAsBU,WACTrH,KAAKyB,cAAcS,KAAKlC,KAAKkB,OAAOqB,KAAK,KAA6BC,cAAcpC,WAAUW,YACtFA,GACAf,EAAKmB,YAAY8H,YAAY,CAACvG,SAAU1C,EAAKS,cAAckC,KAAKvC,WAAUyC,YACtEtC,QAAQC,IAAIqC,GACZ7C,EAAKoB,cAAc6H,YAAY,CAAChG,MAAOjD,EAAKS,cAAeyI,UAAWlJ,EAAKM,WAC3EN,EAAKH,oBAAoB2D,kBAAkBX,GAC3C7C,EAAKS,cAAgB,cA7BlC,mCAmCS,WACRT,KAAKyB,cAAcS,KAAKlC,KAAKkB,OAAOqB,KAAK,KAA6BC,cAAcpC,WAAUW,YACtFA,GAAaf,EAAKS,eAClBT,EAAKmB,YAAYgI,WAAW,CACxBvG,UAAW5C,EAAKM,SAASqC,GACzBD,SAAU1C,EAAKS,cAAckC,KAC9BvC,WAAUyC,YACTtC,QAAQC,IAAI,cAAeqC,EAAI7C,EAAKS,eACpCT,EAAKH,oBAAoB2D,kBAAkBX,GAC3C7C,EAAKoB,cAAcgI,eAAe,CAC9BnG,MAAOjD,EAAKS,cACZuC,UAAWhD,EAAKM,SAChB8G,WAAY,OACZlE,IAAIA,WAADA,OAAalD,EAAKM,SAAS6C,WAAa,IAAMnD,EAAKM,SAAS8C,UAA5DF,0CAAuGlD,EAAKS,cAAc4C,KAA1HH,qBAEPlD,EAAKS,cAAgB,cAlDlC,oCAyDCT,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBAzDnC,M,oCAAM+D,GAAyB,0C,uBAAzBA,EAAyB,ikBDbtC,gBACI,yBAIA,sBAIA,sBAcJ,Q,MArBY,6FAGoC,6FAIlB,+F,oaEDvB,IAAMC,EAAN,WAIH,WACWK,2BAAA,KAAAA,yBALR,mE,oCAAML,GAAyB,Y,uBAAzBA,EAAyB,+LCRtC,6BACA,kC,MADkB,sCAA+B,sBAA/B,CAA+B,mDAC3B,8CAA+B,sBAA/B,CAA+B,sD,2ECC7C,mBAAmE,iEAC/D,mBAAU,qBAAU,OACxB,Q,wBAGA,mC,mBAAwB,sCAA+B,wB,yBAN3D,gBACI,yBAGA,qCAEA,yCAEA,mCACJ,Q,kBAR4B,0DAGE,8CAA+B,uBAGjC,gCACA,8CAA+B,wBCKxD,IAAMM,ECLAC,EDKN,IAAMD,EAAN,WAMH,WACYnI,EACAC,EACAoI,EACAlI,EACD7B,2BAJC,KAAA0B,cACA,KAAAC,gBACA,KAAAoI,qBACA,KAAAlI,aACD,KAAA7B,eAPX,KAAAgC,cAAgC,GAJ7B,kGAqBC,OAAOzB,KAAKsB,WAAWmI,UAAUzJ,KAAKS,iBArBvC,oCA0BCT,KAAKwJ,mBAAmBE,2BA1BzB,oCA8BC1J,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBA9BnC,M,oCAAMsE,GAAqB,oD,uBAArBA,EAAqB,6GAFnB,CAAC,CAAC5J,QAAS,IAAwBC,SAAU,QAAwB,kRDZpF,gBACI,sBAUJ,Q,MAXsB,kCACM,uC,giBEQrB,IAAM4J,EAAN,WAOH,WAAoB1J,2BAAA,KAAAA,sBAJpB,KAAA4B,cAAgC,GAH7B,wDAWCzB,KAAK2J,qBAXN,yCAce,WACd3J,KAAKyB,cAAcS,KAAKlC,KAAKH,oBAAoBsC,wBAAwB/B,WAAWyC,YAChF7C,EAAKU,sBAAwBmC,QAhBlC,oCAqBC7C,KAAKyB,cAAcqD,SAAQC,YAACA,OAAIA,EAAEC,qBArBnC,M,oCAAMuE,GAAiC,Y,uBAAjCA,EAAiC,oOCT9C,gBACI,+BAEA,oCACJ,Q,MAHwB,sDAAuC,uBAElC,oCAAqB,mD,oKCFlD,kGAQO,iBAAMK,EAAN,WAMH,WACYzE,EACAtF,2BADA,KAAAsF,KACA,KAAAtF,sBANZ,KAAAgK,qBAFG,wDAaC7J,KAAK0F,aAbN,iCAiBC1F,KAAK8J,UAAY9J,KAAKmF,GAAGlC,MAAM,CAC3B4B,WAAY,CAAC7E,KAAKM,SAASqC,IAC3BU,KAAM,CAAC,GAAI,IAAW0C,UACtBnC,SAAU,CAAC5D,KAAKM,SAASsD,cApB9B,iCAyBK5D,KAAK8J,UAAUC,QACf/J,KAAKH,oBAAoBmK,qBAAqBhK,KAAK8J,UAAUnD,OAC7D3G,KAAK8J,UAAU7D,WAAW,CAAC5C,KAAM,QA3BtC,iCA+BQ4G,GACPjK,KAAK6J,kBAAoBI,MAhC1B,K,6CAAML,GAAkB,sB,uBAAlBA,EAAkB,gWCT/B,iBACI,kBACA,mBAAwB,gCAAS,EAAAM,cAC7B,mBAAU,eAAI,OAClB,OACA,mBAAwB,gCAAS,EAAAC,YAAWA,MACxC,mBAAU,gBAAK,OACnB,OACJ,OACA,mBAA+D,gCAAS,EAAAA,YAAWA,MAC/E,gBAAiE,+BACrE,Q,MAXM,8BAAuB,+BASK,6C,0rBDA3B","file":"x","sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\r\nimport {MobileResponsiveHelper} from '@core/helpers/mobile-responsive-helper';\r\n\r\n@Component({\r\n    selector: 'app-group-chat-left-side-holder',\r\n    templateUrl: './group-chat-left-side-holder.component.html',\r\n    styleUrls: ['./group-chat-left-side-holder.component.scss'],\r\n    providers: [{provide: MobileResponsiveHelper, useClass: MobileResponsiveHelper}]\r\n})\r\nexport class GroupChatLeftSideHolderComponent implements OnInit {\r\n    @Input() authUser;\r\n\r\n    constructor(\r\n        public mobileHelper: MobileResponsiveHelper,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","<div class=\"people-groups-container\"\r\n     [class.responsive-list]=\"mobileHelper.isChatUsersListSize()\">\r\n    <div id=\"group-form-container\">\r\n        <app-group-form [authUser]=\"authUser\"></app-group-form>\r\n    </div>\r\n    <app-groups-list [authUser]=\"authUser\"></app-groups-list>\r\n</div>\r\n","<div class=\"group-members-wrap\">\r\n    <h1>\r\n        <span class=\"group-name\">{{selectedGroup.name}}</span> members\r\n    </h1>\r\n\r\n    <ul class=\"nav nav-tabs\" id=\"member-tabs-list\" role=\"tablist\">\r\n        <li class=\"nav-item\" *ngFor=\"let tab of ['All members','Admins'];\">\r\n            <a class=\"nav-link\" [class.active]=\"tab === activeTab\" id=\"{{tab}}-tab\"\r\n               (click)=\"changeActiveTab(tab)\" data-toggle=\"tab\" role=\"tab\"\r\n               aria-controls=\"pWatch\"\r\n               aria-selected=\"true\">{{tab}}</a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div class=\"members\">\r\n        <ul>\r\n            <li *ngFor=\"let member of getOnlyJoinedMembers()\">\r\n                <div class=\"details\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n                    <span>{{member.first_name + ' ' + member.last_name}}</span>\r\n                </div>\r\n\r\n                <div class=\"actions\">\r\n                    <button [matMenuTriggerFor]=\"menu\" class=\"more-actions-btn\">\r\n                        <i class=\"fas fa-ellipsis-h\"></i>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n\r\n                        <button mat-menu-item id=\"view-profile\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>View profile</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"make-admin\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Make admin</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n        <!--            <app-group-members-list [selectedGroup]=\"selectedGroup\" [modalMode]=\"true\"-->\r\n        <!--                              [authUser]=\"authUser\"></app-group-members-list>-->\r\n    </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-show-chat-group-members',\r\n    templateUrl: './show-chat-group-members.component.html',\r\n    styleUrls: ['./show-chat-group-members.component.scss']\r\n})\r\nexport class ShowChatGroupMembersComponent implements OnInit {\r\n    selectedGroup;\r\n    authUser: CurrentUserData;\r\n\r\n    activeTab = 'All members';\r\n\r\n    constructor(\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        // private getAuthUser: GetAuthUserPipe\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.authUser = this.getAuthUser.transform();\r\n        this.getGroupMembers();\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Show Chat Group members  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getGroupMembers() {\r\n        this.selectedGroup = this.groupsMessagesStore.selectedGroupMessages;\r\n    }\r\n\r\n    getOnlyJoinedMembers() {\r\n        return this.selectedGroup.chat_group_members.filter(m => m.chat_groups_members.confirmed);\r\n    }\r\n\r\n    changeActiveTab(tab) {\r\n        this.activeTab = tab;\r\n    }\r\n\r\n}\r\n","<div class=\"members-list\" *ngIf=\"selectedGroup.chat_group_members?.length > 0\">\r\n    <ul>\r\n        <li class=\"group-member\"\r\n            *ngFor=\"let m of selectedGroup.chat_group_members| slice:0: getMembersCountDelimiter(); let i=index\"\r\n            [class.modal-mode]=\"modalMode\"\r\n            [class.pending]=\"!m.chat_groups_members.accepted\">\r\n\r\n            <div class=\"avatar-status-wrap\">\r\n                <img class=\"avatar\" [matTooltip]=\"m.first_name+ ' '+m.last_name\"\r\n                     [src]=\"m.avatar|getImgPath: 'images'\">\r\n                <mat-icon *ngIf=\"ifRemoveMemberShown(m)\" (click)=\"removeSavedMember(m)\">cancel</mat-icon>\r\n                <div class=\"status\" [ngClass]=\"getUserCurrentStatus(m) ? 'online':'offline'\"></div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"modalMode\">\r\n                <div class=\"member-name\">\r\n                    <span>{{m.first_name + ' ' + m.last_name}}</span>\r\n                </div>\r\n                <div class=\"actions\">\r\n                    <i class=\"fa fa-ban\" *ngIf=\"m.id !== selectedGroup?.creator_id\"\r\n                       (click)=\"removeSavedMember(m)\"></i>\r\n                </div>\r\n            </ng-container>\r\n        </li>\r\n    </ul>\r\n    <button id=\"show-more-members\" (click)=\"openAllMembersModal()\" [name]=\"selectedGroup.name\" *ngIf=\"!modalMode\">\r\n        <i class=\"fas fa-ellipsis-h\"></i>\r\n    </button>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {ShowChatGroupMembersComponent} from '@core/components/modals/show-chat-group-members/show-chat-group-members.component';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {ALLOWED_GROUP_MEMBERS_COUNT_ON_TOP} from '@core/constants/chat';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {User} from '@shared/models/user';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\n\r\n@Component({\r\n    selector: 'app-members-list',\r\n    templateUrl: './members-list.component.html',\r\n    styleUrls: ['./members-list.component.scss'],\r\n})\r\nexport class MembersListComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() authUser;\r\n    @Input() modalMode = false;\r\n\r\n    onlineMembers = [];\r\n    subscriptions: Subscription[] = [];\r\n\r\n    membersCountLimit;\r\n\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private chatService: ChatService,\r\n        private socketService: SocketIoService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroupChanges();\r\n        this.getOnlineMembers();\r\n        this.getAcceptedJoinGroup();\r\n        this.getDeclinedJoinChatGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n        this.getMembersCountDelimiter();\r\n        this.onLogout();\r\n    }\r\n\r\n    trackGroupChanges() {\r\n        this.subscriptions.push(this.groupsMessagesStore.selectedGroupsMessages$.subscribe((sGroup: any) => {\r\n            this.selectedGroup = sGroup;\r\n            // console.log(sGroup)\r\n            this.getOnlineMembers();\r\n        }));\r\n    }\r\n\r\n    getMembersCountDelimiter() {\r\n        return this.modalMode ? this.selectedGroup.chat_group_members.length : ALLOWED_GROUP_MEMBERS_COUNT_ON_TOP;\r\n    }\r\n\r\n    removeSavedMember(member) {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.chatService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsMessagesStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromChatGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromChatGroupNotify().subscribe((data: any) => {\r\n            const {group, member, leftGroups} = data;\r\n            // console.log('removed from group', data)\r\n            // this.notificationsStore.updateNotifications(data);\r\n            if (member.id === this.authUser.id) {\r\n                this.groupsMessagesStore.setGroupsMessages(leftGroups);\r\n                this.groupsMessagesStore.selectGroup({});\r\n            } else {\r\n                // console.log(group)\r\n                this.groupsMessagesStore.changeGroup(group);\r\n                // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n                // console.log(this.groupsMessagesStore.groupsMessages)\r\n            }\r\n        }));\r\n    }\r\n\r\n    getOnlineMembers() {\r\n        // console.log(this.selectedGroup.name)\r\n        this.socketService.getConnectedGroupMembers({\r\n            group_name: this.selectedGroup.name,\r\n            username: this.authUser.username\r\n        });\r\n\r\n        this.subscriptions.push(this.socketService.membersOnlineFeedback().subscribe((dt: any) => {\r\n            const {group, members} = dt;\r\n            // console.log('online members', dt)\r\n            // console.log('selected group', this.selectedGroup.name)\r\n            // console.log('group', group)\r\n            if (group === this.selectedGroup.name) {\r\n                this.onlineMembers = members;\r\n            }\r\n        }));\r\n    }\r\n\r\n    getAcceptedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinChatGroup().subscribe((data: any) => {\r\n            const {notification, rest} = data;\r\n            console.log('accepted in members list', data)\r\n            // console.log(this.notificationsStore.allNotifications)\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            // console.log(this.notificationsStore.allNotifications)\r\n            this.groupsMessagesStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getDeclinedJoinChatGroup() {\r\n        this.subscriptions.push(this.socketService.getDeclinedJoinChatGroup().subscribe((data: any) => {\r\n            const {group, notification} = data;\r\n            console.log('declined', data);\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.groupsMessagesStore.selectGroup({});\r\n            } else {\r\n                this.notificationsStore.updateNotifications(notification);\r\n                this.groupsMessagesStore.changeGroup(group);\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leaveChatGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n            console.log(data)\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.groupsMessagesStore.selectGroup({});\r\n            } else {\r\n                this.notificationsStore.updateNotifications(data);\r\n                this.groupsMessagesStore.changeGroup(group);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onLogout() {\r\n        this.socketService.onLogout().subscribe((user: User) => {\r\n            this.onlineMembers = this.onlineMembers.filter(u => u !== user.username);\r\n            // console.log('logout', this.onlineMembers)\r\n        });\r\n    }\r\n\r\n    getUserCurrentStatus(groupMember) {\r\n        const groupName = this.groupsMessagesStore.groupsMessages.find(gm => gm.id === groupMember?.chat_groups_members?.group_id)?.name;\r\n        if (this.onlineMembers && groupName === this.selectedGroup?.name) {\r\n            return !!this.onlineMembers.find(m => groupMember.username === m);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    openAllMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(ShowChatGroupMembersComponent, {\r\n            width: '500px',\r\n            height: '600px',\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ifRemoveMemberShown(m) {\r\n        return this.authUser.id === this.selectedGroup?.creator_id\r\n            && m.id !== this.selectedGroup?.creator_id && !this.modalMode;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","export const ALLOWED_GROUP_MEMBERS_COUNT_ON_TOP = 5;\r\n","import {Component, ElementRef, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n\r\n@Component({\r\n    selector: 'app-members-add-form',\r\n    templateUrl: './members-add-form.component.html',\r\n    styleUrls: ['./members-add-form.component.scss']\r\n})\r\nexport class MembersAddFormComponent implements OnInit, OnDestroy {\r\n    userContacts = [];\r\n    filteredContacts = [];\r\n\r\n    inputGroupMembers = [];\r\n    groupMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    memberCtrl = new FormControl();\r\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n    @Input() selectedGroup;\r\n    @Input() authUser;\r\n    @Input() modalMode = false;\r\n    @ViewChild('chipsInput') chipsInput: ElementRef<HTMLInputElement>;\r\n\r\n    groupChatDetailsForm: FormGroup;\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private chatService: ChatService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        private fb: FormBuilder\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n        this.initForm();\r\n\r\n        this.getUserContacts();\r\n        this.getGroupMembers();\r\n        this.getContactsFilteredBySearch();\r\n    }\r\n\r\n    initForm() {\r\n        this.groupChatDetailsForm = this.fb.group({\r\n            group_id: [this.selectedGroup.id],\r\n            member_ids: ['', Validators.required],\r\n            accepted: [0]\r\n        });\r\n    }\r\n\r\n    getGroupMembers() {\r\n        console.log(this.selectedGroup)\r\n        this.groupMembers = this.selectedGroup.chat_group_members;\r\n        this.groupsMessagesStore.selectedGroupsMessages$.subscribe((dt: any) => {\r\n            this.selectedGroup = dt;\r\n            if (this.selectedGroup) {\r\n                this.groupMembers = this.selectedGroup.chat_group_members;\r\n                this.groupChatDetailsForm.patchValue({group_id: this.selectedGroup.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    getUserContacts() {\r\n        this.subscriptions.push(this.usersService.getUserContacts({\r\n            user_id: this.authUser.id,\r\n            blocked: 0\r\n        }).subscribe(dt => {\r\n            this.userContacts = dt;\r\n        }));\r\n    }\r\n\r\n    getContactsFilteredBySearch() {\r\n        this.subscriptions.push(this.memberCtrl.valueChanges.subscribe(search => {\r\n            if (search) {\r\n                console.log(this.userContacts, this.groupMembers)\r\n                this.filteredContacts = this.userContacts.filter(fc => {\r\n                    const fullNameLowerCased = (fc.first_name + ' ' + fc.last_name).toLowerCase();\r\n                    if (fullNameLowerCased.includes(search)) {\r\n                        return !this.groupMembers.find(gm => (gm.first_name + ' ' + gm.last_name).toLowerCase() === fullNameLowerCased);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    autoCompleteMemberSelected(e) {\r\n        const value = e.option.value;\r\n\r\n        if (!this.inputGroupMembers.find(gm => gm.id === value)) {\r\n            this.inputGroupMembers.push(e.option.value);\r\n            this.groupChatDetailsForm.patchValue({member_ids: this.inputGroupMembers.map(gm => gm.id)});\r\n        }\r\n\r\n        // console.log(this.)\r\n\r\n        this.chipsInput.nativeElement.value = '';\r\n        this.memberCtrl.setValue('');\r\n    }\r\n\r\n    inviteMembers() {\r\n\r\n        this.chipsInput.nativeElement.value = '';\r\n        this.memberCtrl.setValue('');\r\n        this.subscriptions.push(this.chatService.inviteMembers(this.groupChatDetailsForm.value).subscribe(dt => {\r\n            this.groupMembers = dt?.chat_group_members;\r\n            this.selectedGroup = dt;\r\n            this.socketService.inviteToNewChatGroup({\r\n                invited_members: this.inputGroupMembers,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                group_type: 'chat',\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsMessagesStore.changeGroup(this.selectedGroup);\r\n            console.log(this.groupsMessagesStore.groupsMessages)\r\n            console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n            this.groupsMessagesStore.showMembersForm = false;\r\n            this.inputGroupMembers = [];\r\n        }));\r\n    }\r\n\r\n    removeInputMember(member) {\r\n        const index = this.inputGroupMembers.indexOf(member);\r\n\r\n        if (index >= 0) {\r\n            this.inputGroupMembers.splice(index, 1);\r\n            this.groupChatDetailsForm.patchValue({member_ids: this.inputGroupMembers.map(gm => gm.id)});\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"groupChatDetailsForm\" [class.modal-mode]=\"modalMode\">\r\n    <div class=\"member-add\">\r\n        <mat-form-field>\r\n            <mat-chip-list #tagList aria-label=\"Fruit selection\" formControlName=\"member_ids\">\r\n                <mat-chip *ngFor=\"let member of inputGroupMembers\"\r\n                          (removed)=\"removeInputMember(member)\">\r\n                    {{member.first_name + ' ' + member.last_name}}\r\n                    <mat-icon matChipRemove>cancel</mat-icon>\r\n                </mat-chip>\r\n\r\n                <input type=\"text\" #chipsInput\r\n                       placeholder=\"Member name from your contacts\"\r\n                       matInput\r\n                       maxlength=\"10\"\r\n                       [formControl]=\"memberCtrl\"\r\n                       [matChipInputFor]=\"tagList\"\r\n                       [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                       [matAutocomplete]=\"auto\">\r\n            </mat-chip-list>\r\n            <mat-autocomplete #auto=\"matAutocomplete\"\r\n                              (optionSelected)=\"autoCompleteMemberSelected($event)\">\r\n\r\n                <!--                            <mat-optgroup *ngFor=\"let contact of userContacts\" [label]=\"group.name\">-->\r\n                <mat-option *ngFor=\"let contact of filteredContacts\" [value]=\"contact\">\r\n                    {{contact.first_name + ' ' + contact.last_name}}\r\n                </mat-option>\r\n                <!--                            </mat-optgroup>-->\r\n\r\n\r\n            </mat-autocomplete>\r\n\r\n            <mat-hint align=\"end\">Please press 'Enter' after the name</mat-hint>\r\n\r\n        </mat-form-field>\r\n        <button (click)=\"inviteMembers()\">Add</button>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-user-tags',\r\n    templateUrl: './user-tags.component.html',\r\n    styleUrls: ['./user-tags.component.scss']\r\n})\r\nexport class UserTagsComponent implements OnInit {\r\n    tags = [];\r\n    authUser: CurrentUserData;\r\n\r\n    @Output('tagSelected') tagSelected = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public auth: AuthService,\r\n        private _userInfoService: UserInfoService\r\n        // private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.authUser = this.getAuthUser.transform();\r\n        if (this.auth.loggedIn()) {\r\n            this.getUserTags();\r\n        }\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'WALLET SAVE CARD AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    getUserTags() {\r\n        this.videoService.getUserTags({user_id: this.authUser?.id}).subscribe((dt: any) => {\r\n            this.tags = dt;\r\n        });\r\n    }\r\n\r\n    selectTag(name) {\r\n        this.tagSelected.emit(name);\r\n    }\r\n\r\n}\r\n","<ul class=\"categories\">\r\n    <ng-container *ngFor=\"let tag of tags\">\r\n\r\n        <li *ngIf=\"tag.tag_details\">\r\n            <a (click)=\"selectTag(tag.tag_details.name)\">{{tag.tag_details.name}}</a>\r\n        </li>\r\n    </ng-container>\r\n</ul>\r\n","import {Component, ElementRef, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-group-avatar-handler',\r\n    templateUrl: './group-avatar-handler.component.html',\r\n    styleUrls: ['./group-avatar-handler.component.scss']\r\n})\r\nexport class GroupAvatarHandlerComponent implements OnInit, OnDestroy {\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    removeAvatarShown = false;\r\n\r\n    @ViewChild('avatarInput') avatarInput: ElementRef;\r\n\r\n    constructor(\r\n        private chatService: ChatService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.groupsMessagesStore.groupsMessages$.subscribe(dt => {\r\n            // console.log('groups changed', dt)\r\n            // this.selectedGroup = this.groupsMessagesStore.selectedGroupMessages || dt[0];\r\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n        });\r\n    }\r\n\r\n    changeAvatar(e = null) {\r\n        const file = e?.target.files[0];\r\n\r\n        const formData = new FormData();\r\n        formData.append('avatar', file?.name || '');\r\n        formData.append('group_id', this.selectedGroup.id);\r\n        formData.append('member_id', this.authUser.id);\r\n\r\n        if (file) {\r\n            formData.append('group_avatar_file', file);\r\n        } else {\r\n            this.avatarInput.nativeElement.value = '';\r\n        }\r\n\r\n        this.subscriptions.push(this.chatService.changeGroupAvatar(formData).subscribe(dt => {\r\n            // console.log(dt.find(d => this.selectedGroup.id === d.id))\r\n            // this.groupsMessagesStore.changeGroup(dt.find(d => this.selectedGroup.id === d.id));\r\n            this.groupsMessagesStore.setGroupsMessages(dt);\r\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n            this.selectedGroup = dt.find(d => this.selectedGroup.id === d.id)\r\n            // console.log(this.selectedGroup)\r\n            // this.groupsMessagesStore.selectGroup(this.selectedGroup);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"left\">\r\n    <div class=\"group-avatar-wrap\" (mouseenter)=\"removeAvatarShown = true\"\r\n         (mouseleave)=\"removeAvatarShown = false\">\r\n\r\n        <label for=\"group-avatar-input\">\r\n            <img class=\"img group-avatar\" [src]=\"selectedGroup?.avatar|getImgPath:'group_avatars'\">\r\n        </label>\r\n        <mat-icon id=\"remove-group-avatar\" (click)=\"changeAvatar()\"\r\n                  [hidden]=\"!removeAvatarShown || !selectedGroup?.avatar\">cancel\r\n        </mat-icon>\r\n    </div>\r\n    <input id=\"group-avatar-input\" type=\"file\" #avatarInput [hidden]=\"true\" (change)=\"changeAvatar($event)\">\r\n    <div class=\"group-name\">{{selectedGroup?.name}}</div>\r\n</div>\r\n","<div class=\"right\">\r\n    <button mat-icon-button [disableRipple]=\"true\" (click)=\"toggleMembersForm()\"\r\n            *ngIf=\"authUser.id === selectedGroup?.creator_id\">\r\n        <i class=\"fas fa-user-plus\"></i>\r\n    </button>\r\n    <div class=\"remove\" (click)=\"removeGroup()\" *ngIf=\"authUser.id === selectedGroup?.creator_id\">\r\n        <a><i class=\"fas fa-trash\"></i></a>\r\n    </div>\r\n\r\n    <div class=\"more-actions\" *ngIf=\"authUser.id !== selectedGroup?.creator_id\">\r\n\r\n        <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"dotes\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-ellipsis-v\"></i>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <!--        <button mat-menu-item (click)=\"showMembersInput = !showMembersInput\">-->\r\n            <!--            Add members-->\r\n            <!--        </button>-->\r\n            <button mat-menu-item (click)=\"leaveGroup()\">\r\n                Leave group\r\n            </button>\r\n        </mat-menu>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {Subscription} from 'rxjs';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-group-chat-actions',\r\n    templateUrl: './group-chat-actions.component.html',\r\n    styleUrls: ['./group-chat-actions.component.scss']\r\n})\r\nexport class GroupChatActionsComponent implements OnInit, OnDestroy {\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private chatService: ChatService,\r\n        private socketService: SocketIoService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        private dialog: MatDialog\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    toggleMembersForm() {\r\n        this.groupsMessagesStore.showMembersForm = !this.groupsMessagesStore.showMembersForm;\r\n    }\r\n\r\n    removeGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.chatService.removeGroup({group_id: this.selectedGroup.id}).subscribe(dt => {\r\n                    console.log(dt)\r\n                    this.socketService.removeGroup({group: this.selectedGroup, initiator: this.authUser});\r\n                    this.groupsMessagesStore.setGroupsMessages(dt);\r\n                    this.selectedGroup = null;\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed && this.selectedGroup) {\r\n                this.chatService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    console.log('leave group', dt, this.selectedGroup)\r\n                    this.groupsMessagesStore.setGroupsMessages(dt);\r\n                    this.socketService.leaveChatGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'chat',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                    this.selectedGroup = null;\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-group-chat-members',\r\n    templateUrl: './group-chat-members.component.html',\r\n    styleUrls: ['./group-chat-members.component.scss']\r\n})\r\nexport class GroupChatMembersComponent implements OnInit {\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n\r\n    constructor(\r\n        public groupChatMessagesStore: GroupsMessagesSubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","<app-members-list [selectedGroup]=\"selectedGroup\" [authUser]=\"authUser\" [hidden]=\"groupChatMessagesStore.showMembersForm\"></app-members-list>\r\n<app-members-add-form [selectedGroup]=\"selectedGroup\" [authUser]=\"authUser\" [hidden]=\"!groupChatMessagesStore.showMembersForm\"></app-members-add-form>\r\n","<div class=\"chat-top\" [hidden]=\"isChatTopShown()\">\r\n    <div class=\"chat-about\" *ngIf=\"selectedGroup\">\r\n        <button mat-icon-button *ngIf=\"mobileHelper.isChatUsersListSize()\" (click)=\"backToUsers()\">\r\n            <mat-icon>arrow_back</mat-icon>\r\n        </button>\r\n        <app-group-avatar-handler [selectedGroup]=\"selectedGroup\"\r\n                                  [authUser]=\"authUser\"></app-group-avatar-handler>\r\n        <app-group-chat-members [selectedGroup]=\"selectedGroup\" [authUser]=\"authUser\"\r\n                                *ngIf=\"authUser\"></app-group-chat-members>\r\n        <app-group-chat-actions [selectedGroup]=\"selectedGroup\" [authUser]=\"authUser\"></app-group-chat-actions>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {MobileResponsiveHelper} from '@core/helpers/mobile-responsive-helper';\r\n\r\n@Component({\r\n    selector: 'app-group-chat-top',\r\n    templateUrl: './group-chat-top.component.html',\r\n    styleUrls: ['./group-chat-top.component.scss'],\r\n    providers: [{provide: MobileResponsiveHelper, useClass: MobileResponsiveHelper}]\r\n})\r\nexport class GroupChatTopComponent implements OnInit, OnDestroy {\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private chatService: ChatService,\r\n        private socketService: SocketIoService,\r\n        private groupMessagesStore: GroupsMessagesSubjectService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        public mobileHelper: MobileResponsiveHelper,\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    isChatTopShown() {\r\n        return this.isEmptyObj.transform(this.selectedGroup);\r\n    }\r\n\r\n    backToUsers() {\r\n        // this.groupMessagesStore.changeGroup({});\r\n        this.groupMessagesStore.showResponsiveChatBox = false;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-group-chat-right-side-holder',\r\n    templateUrl: './group-chat-right-side-holder.component.html',\r\n    styleUrls: ['./group-chat-right-side-holder.component.scss']\r\n})\r\nexport class GroupChatRightSideHolderComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    selectedGroupMessages;\r\n\r\n    constructor(private groupsMessagesStore: GroupsMessagesSubjectService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getSelectedGroup();\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.subscriptions.push(this.groupsMessagesStore.selectedGroupsMessages$.subscribe((dt: any) => {\r\n            this.selectedGroupMessages = dt;\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n\r\n","<div class=\"chat-wrap\" [hidden]=\"\">\r\n    <app-group-chat-top [selectedGroup]=\"selectedGroupMessages\"\r\n                        [authUser]=\"authUser\"></app-group-chat-top>\r\n    <app-group-chat-messages [authUser]=\"authUser\" [selectedGroupMessages]=\"selectedGroupMessages\"></app-group-chat-messages>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-group-form',\r\n    templateUrl: './group-form.component.html',\r\n    styleUrls: ['./group-form.component.scss']\r\n})\r\nexport class GroupFormComponent implements OnInit {\r\n    groupForm: FormGroup;\r\n    showGroupChatForm = false;\r\n\r\n    @Input() authUser;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.groupForm = this.fb.group({\r\n            creator_id: [this.authUser.id],\r\n            name: ['', Validators.required],\r\n            username: [this.authUser.username]\r\n        });\r\n    }\r\n\r\n    addGroup() {\r\n        if (this.groupForm.valid) {\r\n            this.groupsMessagesStore.setAddGroupFormValue(this.groupForm.value);\r\n            this.groupForm.patchValue({name: ''});\r\n        }\r\n    }\r\n\r\n    toggleForm(shown: boolean) {\r\n        this.showGroupChatForm = shown;\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"groupForm\" id=\"group-form\" [hidden]=\"!showGroupChatForm\">\r\n    <input formControlName=\"name\" placeholder=\"Group name\">\r\n    <button mat-icon-button (click)=\"addGroup()\">\r\n        <mat-icon>done</mat-icon>\r\n    </button>\r\n    <button mat-icon-button (click)=\"toggleForm(false)\">\r\n        <mat-icon>close</mat-icon>\r\n    </button>\r\n</form>\r\n<button class=\"create-group-chat\" [hidden]=\"showGroupChatForm\" (click)=\"toggleForm(true)\">\r\n    <img src=\"assets/img/noun_create.png\" alt=\"show-group-form-btn\"> Create new group\r\n</button>\r\n"]}