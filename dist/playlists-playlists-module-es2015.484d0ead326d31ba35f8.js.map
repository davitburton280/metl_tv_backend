{"version":3,"sources":["webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.html","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.ts","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.html","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.html","webpack:///src/app/playlists/playlists-routing.module.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.ts","webpack:///src/app/playlists/playlists.module.ts"],"names":["PlaylistInfoFormComponent","fb","playlistsService","dialog","toastr","router","getAuthUser","apiUrl","editMode","refreshPlaylist","this","playlistInfoForm","group","id","name","required","description","privacy","authUser","transform","open","data","playlist","afterClosed","subscribe","dt","emit","value","console","log","patchValue","updatePrivacy","success","valid","updatePlaylistInfo","params","videos","playlist_id","navigate","queryParams","tab","username","backToPlaylists","PlaylistVideosComponent","route","videoService","trackByElement","video","e","previousIndex","currentIndex","sendData","rows","JSON","stringify","updateVideoPosition","playlistId","thumbnail","changePlaylistThumbnail","videoId","confirmed","removeVideoFromPlaylist","video_id","get","channel_id","channel","width","playlists","result","tag","routes","path","component","SinglePlaylistComponent","getPlaylistDetails","snapshot","getById","user_id","title","PlaylistsRoutingModule","forChild","PlaylistsModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"playlist\">\r\n    <img [src]=\"playlist.thumbnail|getImgPath\">\r\n    <button class=\"btn play-all\" *ngIf=\"playlist.videos?.length!==0\" (click)=\"openPlaylistPage(playlist)\">\r\n        <span class=\"material-icons\">play_arrow</span>\r\n        Play All\r\n    </button>\r\n\r\n    <div class=\"info\">\r\n        <ng-container *ngIf=\"!editMode\">\r\n            <h3>\r\n                <span>{{playlist.name}}</span>\r\n                <span class=\"material-icons\" (click)=\"editPlaylistInfo(playlist)\">create</span>\r\n            </h3>\r\n            <p>{{playlist.description}}</p>\r\n            <h3>{{playlist.videos?.length}} videos</h3>\r\n            <h3 *ngIf=\"!editMode\">Last updated on {{playlist.updated_at|date: 'd MMM, yyyy'}}</h3>\r\n            <div class=\"select\" id=\"privacy-select\">\r\n                <mat-icon>visibility_{{+playlist.privacy ? 'off' : 'on'}}</mat-icon>\r\n                <select (change)=\"updatePrivacy($event.target.value, playlist)\">\r\n                    <option [value]=\"1\" [selected]=\"playlist.privacy\">Private</option>\r\n                    <option [value]=\"0\" [selected]=\"!playlist.privacy\">Public</option>\r\n                </select>\r\n            </div>\r\n        </ng-container>\r\n        <form [formGroup]=\"playlistInfoForm\" id=\"playlist-info-form\" *ngIf=\"editMode\">\r\n            <input formControlName=\"name\">\r\n            <span class=\"error\" *ngIf=\"playlistInfoForm.get('name').hasError('required')\">\r\n                Playlist name is required\r\n            </span>\r\n            <textarea formControlName=\"description\"></textarea>\r\n            <button class=\"btn cancel\" (click)=\"editMode=!editMode\">Cancel</button>\r\n            <button class=\"btn save-playlist-changes\" (click)=\"savePlaylistInfoChanges()\">Save\r\n            </button>\r\n        </form>\r\n    </div>\r\n\r\n    <button class=\"btn back\" (click)=\"backToPlaylists()\">Back</button>\r\n    <button class=\"btn add-video\" *ngIf=\"!editMode\" (click)=\"openVideosModal()\">Add Video</button>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {Router} from '@angular/router';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-playlist-info-form',\r\n    templateUrl: './playlist-info-form.component.html',\r\n    styleUrls: ['./playlist-info-form.component.scss']\r\n})\r\nexport class PlaylistInfoFormComponent implements OnInit {\r\n    playlistInfoForm: FormGroup;\r\n    apiUrl = API_URL;\r\n    editMode = false;\r\n    authUser;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n        public router: Router,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.playlistInfoForm = this.fb.group({\r\n            id: [''],\r\n            name: ['', Validators.required],\r\n            description: [''],\r\n            privacy: ['']\r\n        });\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    openVideosModal() {\r\n        this.dialog.open(AddVideoToPlaylistDialogComponent, {data: {playlist: this.playlist}}).afterClosed().subscribe(dt => {\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    updatePrivacy(value, playlist) {\r\n        console.log(+value)\r\n        playlist.privacy = +value;\r\n        this.playlistInfoForm.patchValue({privacy: +value});\r\n        this.playlistsService.updatePrivacy({privacy: value, id: playlist.id}).subscribe(dt => {\r\n            this.toastr.success('Playlist privacy is updated successfully');\r\n        });\r\n\r\n    }\r\n\r\n    editPlaylistInfo(playlist) {\r\n        this.editMode = true;\r\n        this.playlistInfoForm.patchValue(playlist);\r\n    }\r\n\r\n    savePlaylistInfoChanges() {\r\n        if (this.playlistInfoForm.valid) {\r\n            this.playlistsService.updatePlaylistInfo(this.playlistInfoForm.value).subscribe((dt) => {\r\n                this.editMode = false;\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n    openPlaylistPage(playlist) {\r\n        const route = 'videos/play';\r\n        const params = {id: playlist.videos?.[0]?.id, playlist_id: playlist.id};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n    backToPlaylists() {\r\n        const route = 'channels/show';\r\n        const params = {tab: 'playlists', username: this.authUser.username};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\" cdkDropList>\r\n    <div class=\"playlist-item\" cdkDrag [cdkDragPreviewClass]=\"'video-container'\"\r\n         (cdkDragDropped)=\"dragDropped($event, video)\"\r\n         *ngFor=\"let video of playlist.videos; trackBy:trackByElement\">\r\n        <div class=\"video-container\">\r\n            <div class=\"img\">\r\n                <img [src]=\"video.thumbnail|getImgPath\"\r\n                     (click)=\"openPlaylistPage(video, playlist)\">\r\n                <div class=\"update-privacy\" (click)=\"updatePrivacy(video, video.privacy.name)\"\r\n                     [ngClass]=\"video.privacy.name !== 'Public'  ? 'red':'green'\">\r\n                    <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'off' : 'on'}}</mat-icon>\r\n                </div>\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n\r\n            <div class=\"details\">\r\n                <div class=\"title\">\r\n                    <h4 class=\"\">{{video.name}}</h4>\r\n                    <div class=\"dotes\">\r\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\"\r\n                                aria-label=\"Example icon-button with a menu\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                        </button>\r\n                        <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"addToAnotherPlaylist(video)\">\r\n                                <mat-icon>playlist_add</mat-icon>\r\n                                <span>Add to another playlist</span>\r\n                            </button>\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_top</mat-icon>-->\r\n                            <!--                                            <span>Move to top</span>-->\r\n                            <!--                                        </button>-->\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_bottom</mat-icon>-->\r\n                            <!--                                            <span>Move to bottom</span>-->\r\n                            <!--                                        </button>-->\r\n                            <button mat-menu-item\r\n                                    (click)=\"changePlaylistThumbnail(playlist.id, video.thumbnail)\">\r\n                                <mat-icon>insert_photo</mat-icon>\r\n                                <span>Set as playlist thumbnail</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"updatePrivacy(video, video.privacy.name)\">\r\n                                <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'on' : 'off'}}</mat-icon>\r\n                                <span>Make {{video.privacy.name !== 'Private' ? 'private' : 'public'}}</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"removeVideoFromPlaylist(playlist.id, video.id)\">\r\n                                <mat-icon>delete</mat-icon>\r\n                                <span>Remove from playlist</span>\r\n                            </button>\r\n\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                </div>\r\n                <div class=\"video-details-2nd-row\">\r\n                    <p class=\"shortened-description\">{{video.description}}</p>\r\n                    <div class=\"tags\">\r\n                        <ul>\r\n                            <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                <span>{{tag.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-playlist-videos',\r\n    templateUrl: './playlist-videos.component.html',\r\n    styleUrls: ['./playlist-videos.component.scss']\r\n})\r\nexport class PlaylistVideosComponent implements OnInit {\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private dialog: MatDialog,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    openPlaylistPage(video, playlist) {\r\n        this.router.navigate(['videos/play'], {queryParams: {id: video.id, playlist_id: playlist.id}});\r\n    }\r\n\r\n    dragDropped(e, video) {\r\n        // console.log(e)\r\n        // console.log(channel)\r\n        this.playlist.videos = moveItemInArray(this.playlist.videos, e.previousIndex, e.currentIndex);\r\n        // console.log(this.playlist)\r\n        const sendData = {\r\n            rows: JSON.stringify(this.playlist),\r\n            playlist_id: this.playlist.id,\r\n            // user_id: this.authUser.id\r\n        };\r\n        this.playlistsService.updateVideoPosition(sendData).subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    changePlaylistThumbnail(playlistId, thumbnail) {\r\n        const params = {playlist_id: playlistId, ...{thumbnail}};\r\n        this.playlistsService.changePlaylistThumbnail(params).subscribe(dt => {\r\n            this.playlist = dt;\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    removeVideoFromPlaylist(playlistId, videoId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: videoId\r\n                }).subscribe(dt => {\r\n                    this.playlist = dt;\r\n                    this.refreshPlaylist.emit();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    addToAnotherPlaylist(video) {\r\n        this.playlistsService.get({channel_id: this.authUser?.channel?.id}).subscribe(dt => {\r\n            this.dialog.open(AddVideoToAnotherPlaylistComponent, {\r\n                width: '500px',\r\n                data: {video_id: video.id, playlists: dt}\r\n            }).afterClosed().subscribe(result => {\r\n                this.refreshPlaylist.emit();\r\n            });\r\n        });\r\n    }\r\n\r\n    updatePrivacy(video, privacy) {\r\n        this.videoService.updatePrivacy({\r\n            video_id: video.id,\r\n            privacy: privacy === 'Public' ? 'Private' : 'Public'\r\n        }).subscribe(dt => {\r\n            video.privacy = dt;\r\n        });\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","<div class=\"single-playlist\" *ngIf=\"playlist\">\r\n    <h2>Edit Playlist</h2>\r\n\r\n    <div class=\"inner-wrap\">\r\n        <div class=\"left\">\r\n            <app-playlist-info-form [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\">\r\n            </app-playlist-info-form>\r\n        </div>\r\n\r\n        <div class=\"right\">\r\n            <app-playlist-videos [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\"></app-playlist-videos>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SinglePlaylistComponent} from '@app/playlists/single-playlist/single-playlist.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'single/:id',\r\n        component: SinglePlaylistComponent,\r\n        data: {\r\n            title: 'Edit Playlist'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PlaylistsRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-single-playlist',\r\n    templateUrl: './single-playlist.component.html',\r\n    styleUrls: ['./single-playlist.component.scss']\r\n})\r\nexport class SinglePlaylistComponent implements OnInit {\r\n    playlist;\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getPlaylistDetails();\r\n    }\r\n\r\n\r\n\r\n\r\n    getPlaylistDetails() {\r\n\r\n        const playlistId = this.route.snapshot?.params?.id;\r\n\r\n        if (playlistId) {\r\n            this.playlistsService.getById({playlist_id: playlistId, user_id: this.authUser}).subscribe(dt => {\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {PlaylistsRoutingModule} from './playlists-routing.module';\r\nimport {SinglePlaylistComponent} from './single-playlist/single-playlist.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { PlaylistInfoFormComponent } from './single-playlist/playlist-info-form/playlist-info-form.component';\r\nimport { PlaylistVideosComponent } from './single-playlist/playlist-videos/playlist-videos.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [SinglePlaylistComponent, PlaylistInfoFormComponent, PlaylistVideosComponent],\r\n    imports: [\r\n        CommonModule,\r\n        PlaylistsRoutingModule,\r\n        DragDropModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class PlaylistsModule {\r\n}\r\n"]}