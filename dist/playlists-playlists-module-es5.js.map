{"version":3,"sources":["webpack:///src/app/playlists/playlists-routing.module.ts","webpack:///src/app/playlists/playlists.module.ts","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.ts","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.html","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.html","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.html"],"names":["routes","path","component","data","title","PlaylistsRoutingModule","forChild","imports","exports","PlaylistsModule","declarations","PlaylistInfoFormComponent","fb","playlistsService","dialog","toastr","router","getAuthUser","apiUrl","editMode","refreshPlaylist","playlistInfoForm","group","id","name","required","description","privacy","authUser","transform","open","playlist","afterClosed","subscribe","dt","emit","value","console","log","patchValue","updatePrivacy","success","valid","updatePlaylistInfo","route","params","videos","playlist_id","navigate","queryParams","tab","username","backToPlaylists","selector","templateUrl","styleUrls","PlaylistVideosComponent","videoService","trackByElement","video","e","previousIndex","currentIndex","sendData","rows","JSON","stringify","updateVideoPosition","playlistId","thumbnail","changePlaylistThumbnail","videoId","confirmed","removeVideoFromPlaylist","video_id","get","channel_id","channel","width","playlists","result","tag","SinglePlaylistComponent","getPlaylistDetails","snapshot","getById","user_id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMA,MAAM,GAAW,CACnB;AACIC,UAAI,EAAE,YADV;AAEIC,eAAS,EAAE,gHAFf;AAGIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAHV,KADmB,CAAvB;;QAcaC,sB;;;;;YAAAA;;;;yBAAAA,sB;AAAsB,O;AAAA,gBAHxB,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAGwB,EAFvB,4DAEuB;;;;0HAAtBK,sB,EAAsB;AAAA;AAAA,kBAFvB,4DAEuB;AAAA,O;AAFX,K;;;;;sEAEXA,sB,EAAsB;cAJlC,sDAIkC;eAJzB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBN,MAAtB,CAAD,CADD;AAERQ,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIyB,Q;;;;;;;;;;;;;;;;;;ACnBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAoBaC,e;;;;;YAAAA;;;;yBAAAA,e;AAAe,O;AAAA,gBAPf,CACL,4DADK,EAEL,gFAFK,EAGL,qEAHK,EAIL,kEAJK,CAOe;;;;0HAAfA,e,EAAe;AAAA,uBART,kGAQS,EARgB,0HAQhB,EAR2C,kHAQ3C;AARkE,kBAEtF,4DAFsF,EAGtF,gFAHsF,EAItF,qEAJsF,EAKtF,kEALsF;AAQlE,O;AAHR,K;;;;;sEAGPA,e,EAAe;cAT3B,sDAS2B;eATlB;AACNC,sBAAY,EAAE,CAAC,kGAAD,EAA0B,0HAA1B,EAAqD,kHAArD,CADR;AAENH,iBAAO,EAAE,CACL,4DADK,EAEL,gFAFK,EAGL,qEAHK,EAIL,kEAJK;AAFH,S;AASkB,Q;;;;;;;;;;;;;;;;;;ACpB5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACEI;;AAAiE;AAAA;;AAAA;;AAAA;AAAA;;AAC7D;;AAA6B;;AAAU;;AACvC;;AACJ;;;;;;AAUQ;;AAAsB;;;;AAA2D;;;;;;AAA3D;;AAAA;;;;;;;;AAP1B;;AACI;;AACI;;AAAM;;AAAiB;;AACvB;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAAqC;;AAAM;;AAC5E;;AACA;;AAAG;;AAAwB;;AAC3B;;AAAI;;AAAkC;;AACtC;;AACA;;AACI;;AAAU;;AAA+C;;AACzD;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AAAkD;;AAAO;;AACzD;;AAAmD;;AAAM;;AAC7D;;AACJ;;AACJ;;;;;;AAbc;;AAAA;;AAGP;;AAAA;;AACC;;AAAA;;AACA;;AAAA;;AAEU;;AAAA;;AAEE;;AAAA,6EAAW,UAAX,EAAW,uBAAX;;AACA;;AAAA,6EAAW,UAAX,EAAW,wBAAX;;;;;;AAMhB;;AACI;;AACJ;;;;;;;;AAJJ;;AACI;;AACA;;AAGA;;AACA;;AAA2B;AAAA;;AAAA;;AAAA;AAAA;;AAA6B;;AAAM;;AAC9D;;AAA0C;AAAA;;AAAA;;AAAA;AAAA;;AAAoC;;AAC9E;;AACJ;;;;;;AATM;;AAEkB;;AAAA;;;;;;;;AAW5B;;AAAgD;AAAA;;AAAA;;AAAA;AAAA;;AAA4B;;AAAS;;;;QDtB5EI,yB;AAST,yCACYC,EADZ,EAEYC,gBAFZ,EAGYC,MAHZ,EAIYC,MAJZ,EAKWC,MALX,EAMYC,WANZ,EAMwC;AAAA;;AAL5B,aAAAL,EAAA,GAAAA,EAAA;AACA,aAAAC,gBAAA,GAAAA,gBAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AACC,aAAAC,WAAA,GAAAA,WAAA;AAbZ,aAAAC,MAAA,GAAS,8DAAT;AACA,aAAAC,QAAA,GAAW,KAAX;AAI2B,aAAAC,eAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAUvB,aAAKC,gBAAL,GAAwB,KAAKT,EAAL,CAAQU,KAAR,CAAc;AAClCC,YAAE,EAAE,CAAC,EAAD,CAD8B;AAElCC,cAAI,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAF4B;AAGlCC,qBAAW,EAAE,CAAC,EAAD,CAHqB;AAIlCC,iBAAO,EAAE,CAAC,EAAD;AAJyB,SAAd,CAAxB;AAMA,aAAKC,QAAL,GAAgB,KAAKX,WAAL,CAAiBY,SAAjB,EAAhB;AACH;;;;mCAEO,CACP;;;0CAEiB;AAAA;;AACd,eAAKf,MAAL,CAAYgB,IAAZ,CAAiB,6JAAjB,EAAoD;AAAC3B,gBAAI,EAAE;AAAC4B,sBAAQ,EAAE,KAAKA;AAAhB;AAAP,WAApD,EAAuFC,WAAvF,GAAqGC,SAArG,CAA+G,UAAAC,EAAE,EAAI;AACjH,iBAAI,CAACd,eAAL,CAAqBe,IAArB;AACH,WAFD;AAGH;;;sCAEaC,K,EAAOL,Q,EAAU;AAAA;;AAC3BM,iBAAO,CAACC,GAAR,CAAY,CAACF,KAAb;AACAL,kBAAQ,CAACJ,OAAT,GAAmB,CAACS,KAApB;AACA,eAAKf,gBAAL,CAAsBkB,UAAtB,CAAiC;AAACZ,mBAAO,EAAE,CAACS;AAAX,WAAjC;AACA,eAAKvB,gBAAL,CAAsB2B,aAAtB,CAAoC;AAACb,mBAAO,EAAES,KAAV;AAAiBb,cAAE,EAAEQ,QAAQ,CAACR;AAA9B,WAApC,EAAuEU,SAAvE,CAAiF,UAAAC,EAAE,EAAI;AACnF,kBAAI,CAACnB,MAAL,CAAY0B,OAAZ,CAAoB,0CAApB;AACH,WAFD;AAIH;;;yCAEgBV,Q,EAAU;AACvB,eAAKZ,QAAL,GAAgB,IAAhB;AACA,eAAKE,gBAAL,CAAsBkB,UAAtB,CAAiCR,QAAjC;AACH;;;kDAEyB;AAAA;;AACtB,cAAI,KAAKV,gBAAL,CAAsBqB,KAA1B,EAAiC;AAC7B,iBAAK7B,gBAAL,CAAsB8B,kBAAtB,CAAyC,KAAKtB,gBAAL,CAAsBe,KAA/D,EAAsEH,SAAtE,CAAgF,UAACC,EAAD,EAAQ;AACpF,oBAAI,CAACf,QAAL,GAAgB,KAAhB;AACA,oBAAI,CAACY,QAAL,GAAgBG,EAAhB;AACH,aAHD;AAIH;AACJ;;;yCAEgBH,Q,EAAU;;;AACvB,cAAMa,KAAK,GAAG,aAAd;AACA,cAAMC,MAAM,GAAG;AAACtB,cAAE,EAAE,CAAF,WAAEQ,QAAQ,CAACe,MAAX,MAAiB,IAAjB,IAAiB,aAAjB,GAAiB,MAAjB,GAAiB,GAAG,CAAH,CAAf,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,MAAnB,GAAmB,GAAGvB,EAA3B;AAA+BwB,uBAAW,EAAEhB,QAAQ,CAACR;AAArD,WAAf;AACA,eAAKP,MAAL,CAAYgC,QAAZ,CAAqB,CAACJ,KAAD,CAArB,EAA8B;AAACK,uBAAW,EAAEJ;AAAd,WAA9B;AACH;;;0CAEiB;AACd,cAAMD,KAAK,GAAG,eAAd;AACA,cAAMC,MAAM,GAAG;AAACK,eAAG,EAAE,WAAN;AAAmBC,oBAAQ,EAAE,KAAKvB,QAAL,CAAcuB;AAA3C,WAAf;AACA,eAAKnC,MAAL,CAAYgC,QAAZ,CAAqB,CAACJ,KAAD,CAArB,EAA8B;AAACK,uBAAW,EAAEJ;AAAd,WAA9B;AACH;;;;;;;uBArEQlC,yB,EAAyB,2H,EAAA,kJ,EAAA,mI,EAAA,yH,EAAA,uH,EAAA,iJ;AAAA,K;;;YAAzBA,yB;AAAyB,6C;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,qsB;AAAA;AAAA;ACftC;;AACI;;;;AACA;;AAKA;;AACI;;AAgBA;;AAUJ;;AAEA;;AAAyB;AAAA,mBAAS,IAAAyC,eAAA,EAAT;AAA0B,WAA1B;;AAA4B;;AAAI;;AACzD;;AACJ;;;;AArCS;;AAAA;;AACwB;;AAAA;;AAMX;;AAAA;;AAgB+C;;AAAA;;AAanC;;AAAA;;;;;;;;;;sEDtBrBzC,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACP0C,kBAAQ,EAAE,wBADH;AAEPC,qBAAW,EAAE,qCAFN;AAGPC,mBAAS,EAAE,CAAC,qCAAD;AAHJ,S;AAK2B,Q;;;;;;;;;;;;;;;;gBAMjC,mD;iBAAM,U;;;gBACN,oD;iBAAO,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE4CgB;;AAAoC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAChC;;AAAM;;AAAY;;AACtB;;;;;;AADU;;AAAA;;;;;;;;AAlElC;;AACK;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAED;;AACI;;AACI;;AACK;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AADL;;AAEA;;AAA4B;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAExB;;AAAU;;AAA6D;;AAC3E;;AACA;;AAAuB;;AAAkB;;AAC7C;;AAEA;;AACI;;AACI;;AAAa;;AAAc;;AAC3B;;AACI;;AAEI;;AAAU;;AAAS;;AACvB;;AACA;;AACI;;AAAsB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAClB;;AAAU;;AAAY;;AACtB;;AAAM;;AAAuB;;AACjC;;AASA;;AACQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AAAU;;AAAY;;AACtB;;AAAM;;AAAyB;;AACnC;;AACA;;AAAsB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAClB;;AAAU;;AAA6D;;AACvE;;AAAM;;AAAgE;;AAC1E;;AACA;;AAAsB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAClB;;AAAU;;AAAM;;AAChB;;AAAM;;AAAoB;;AAC9B;;AAEJ;;AACJ;;AACJ;;AACA;;AACI;;AAA2B;;AAAsB;;AACjD;;AAAkB;;AAAQ;;AAC1B;;AACI;;AACJ;;AACA;;AAAkB;;AAAQ;;AAC1B;;AAA0B;;;;AAAgC;;AAC9D;;AACA;;AACI;;AAAiC;;AAAqB;;AACtD;;AACI;;AACI;;AAGJ;;AACJ;;AAEJ;;AACJ;;AACJ;;AACJ;;;;;;;;AA1EmC;;AAKlB;;AAAA;;AAGA;;AAAA;;AACS;;AAAA;;AAES;;AAAA;;AAKN;;AAAA;;AAEe;;AAAA;;AAuBN;;AAAA;;AACJ;;AAAA;;AAWS;;AAAA;;AAGvB;;AAAA;;AAGsB;;AAAA;;AAGO;;AAAA;;AAGrB;;AAAA;;;;QCjDnBC,uB;AAST,uCACWxC,MADX,EAEY4B,KAFZ,EAGY/B,gBAHZ,EAIY4C,YAJZ,EAKY3C,MALZ,EAMYG,WANZ,EAMwC;AAAA;;AAL7B,aAAAD,MAAA,GAAAA,MAAA;AACC,aAAA4B,KAAA,GAAAA,KAAA;AACA,aAAA/B,gBAAA,GAAAA,gBAAA;AACA,aAAA4C,YAAA,GAAAA,YAAA;AACA,aAAA3C,MAAA,GAAAA,MAAA;AACA,aAAAG,WAAA,GAAAA,WAAA;AAbZ,aAAAC,MAAA,GAAS,8DAAT;AAEA,aAAAwC,cAAA,GAAiB,sEAAjB;AAG2B,aAAAtC,eAAA,GAAkB,IAAI,0DAAJ,EAAlB;AAU1B;;;;mCAEO;AACJ,eAAKQ,QAAL,GAAgB,KAAKX,WAAL,CAAiBY,SAAjB,EAAhB;AACH;;;yCAEgB8B,K,EAAO5B,Q,EAAU;AAC9B,eAAKf,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAsC;AAACC,uBAAW,EAAE;AAAC1B,gBAAE,EAAEoC,KAAK,CAACpC,EAAX;AAAewB,yBAAW,EAAEhB,QAAQ,CAACR;AAArC;AAAd,WAAtC;AACH;;;oCAEWqC,C,EAAGD,K,EAAO;AAClB;AACA;AACA,eAAK5B,QAAL,CAAce,MAAd,GAAuB,yFAAgB,KAAKf,QAAL,CAAce,MAA9B,EAAsCc,CAAC,CAACC,aAAxC,EAAuDD,CAAC,CAACE,YAAzD,CAAvB,CAHkB,CAIlB;;AACA,cAAMC,QAAQ,GAAG;AACbC,gBAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKnC,QAApB,CADO;AAEbgB,uBAAW,EAAE,KAAKhB,QAAL,CAAcR;AAFd,WAAjB;AAKA,eAAKV,gBAAL,CAAsBsD,mBAAtB,CAA0CJ,QAA1C,EAAoD9B,SAApD,CAA8D,UAAAC,EAAE,EAAI,CACnE,CADD;AAEH;;;gDAEuBkC,U,EAAYC,S,EAAW;AAAA;;AAC3C,cAAMxB,MAAM,GAAG,MAAH,OAAG,CAAH;AAAIE,uBAAW,EAAEqB;AAAjB,WAAG,EAA6B;AAACC,qBAAS,EAATA;AAAD,WAA7B,CAAf;AACA,eAAKxD,gBAAL,CAAsByD,uBAAtB,CAA8CzB,MAA9C,EAAsDZ,SAAtD,CAAgE,UAAAC,EAAE,EAAI;AAClE,kBAAI,CAACH,QAAL,GAAgBG,EAAhB;;AACA,kBAAI,CAACd,eAAL,CAAqBe,IAArB;AACH,WAHD;AAIH;;;gDAEuBiC,U,EAAYG,O,EAAS;AAAA;;AACzC,eAAKzD,MAAL,CAAYgB,IAAZ,CAAiB,qIAAjB,EAA8CE,WAA9C,GAA4DC,SAA5D,CAAsE,UAAAuC,SAAS,EAAI;AAC/E,gBAAIA,SAAJ,EAAe;AACX,oBAAI,CAAC3D,gBAAL,CAAsB4D,uBAAtB,CAA8C;AAC1C1B,2BAAW,EAAEqB,UAD6B;AAE1CM,wBAAQ,EAAEH;AAFgC,eAA9C,EAGGtC,SAHH,CAGa,UAAAC,EAAE,EAAI;AACf,sBAAI,CAACH,QAAL,GAAgBG,EAAhB;;AACA,sBAAI,CAACd,eAAL,CAAqBe,IAArB;AACH,eAND;AAOH;AACJ,WAVD;AAWH;;;6CAGoBwB,K,EAAO;AAAA;;;;AACxB,eAAK9C,gBAAL,CAAsB8D,GAAtB,CAA0B;AAACC,sBAAU,EAAE,CAAF,WAAE,KAAKhD,QAAP,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEiD,OAAf,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEtD;AAArC,WAA1B,EAAoEU,SAApE,CAA8E,UAAAC,EAAE,EAAI;AAChF,kBAAI,CAACpB,MAAL,CAAYgB,IAAZ,CAAiB,gKAAjB,EAAqD;AACjDgD,mBAAK,EAAE,OAD0C;AAEjD3E,kBAAI,EAAE;AAACuE,wBAAQ,EAAEf,KAAK,CAACpC,EAAjB;AAAqBwD,yBAAS,EAAE7C;AAAhC;AAF2C,aAArD,EAGGF,WAHH,GAGiBC,SAHjB,CAG2B,UAAA+C,MAAM,EAAI;AACjC,oBAAI,CAAC5D,eAAL,CAAqBe,IAArB;AACH,aALD;AAMH,WAPD;AAQH;;;sCAEawB,K,EAAOhC,O,EAAS;AAC1B,eAAK8B,YAAL,CAAkBjB,aAAlB,CAAgC;AAC5BkC,oBAAQ,EAAEf,KAAK,CAACpC,EADY;AAE5BI,mBAAO,EAAEA,OAAO,KAAK,QAAZ,GAAuB,SAAvB,GAAmC;AAFhB,WAAhC,EAGGM,SAHH,CAGa,UAAAC,EAAE,EAAI;AACfyB,iBAAK,CAAChC,OAAN,GAAgBO,EAAhB;AACH,WALD;AAMH;;;uCAEoBV,I,EAAM;;;;;;;AACvB,2BAAM,KAAKR,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,QAAD,CAArB,EAAiC;AAACC,iCAAW,EAAE;AAACgC,2BAAG,EAAEzD;AAAN;AAAd,qBAAjC,CAAN;;;;;;;;;AACH;;;;;;;uBAtFQgC,uB,EAAuB,uH,EAAA,+H,EAAA,kJ,EAAA,0I,EAAA,oI,EAAA,kJ;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,0yB;AAAA;AAAA;ADjBpC;;AACI;;AA2EJ;;;;AAzES;;AAAA,mGAA6D,cAA7D,EAA6D,kBAA7D;;;;;;;;;;sECcIA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACPH,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKyB,Q;;;;;;;;;;;;;;;;gBAM/B,mD;iBAAM,U;;;gBACN,oD;iBAAO,iB;;;;;;;;;;;;;;;;;;;;ACxBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACAA;;AACI;;AAAI;;AAAa;;AAEjB;;AACI;;AACI;;AAA8C;AAAA;;AAAA;;AAAA;AAAA;;AAC9C;;AACJ;;AAEA;;AACI;;AAA2C;AAAA;;AAAA;;AAAA;AAAA;;AAAyC;;AACxF;;AACJ;;AACJ;;;;;;AARoC;;AAAA;;AAKH;;AAAA;;;;QDOpB2B,uB;AAKT,uCACWlE,MADX,EAEY4B,KAFZ,EAGY/B,gBAHZ,EAIYC,MAJZ,EAKYG,WALZ,EAKwC;AAAA;;AAJ7B,aAAAD,MAAA,GAAAA,MAAA;AACC,aAAA4B,KAAA,GAAAA,KAAA;AACA,aAAA/B,gBAAA,GAAAA,gBAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAG,WAAA,GAAAA,WAAA;AARZ,aAAAC,MAAA,GAAS,8DAAT;AAUI,aAAKU,QAAL,GAAgB,KAAKX,WAAL,CAAiBY,SAAjB,EAAhB;AACH;;;;mCAEO;AACJ,eAAKsD,kBAAL;AACH;;;6CAKoB;AAAA;;;;AAEjB,cAAMf,UAAU,GAAG,CAAH,WAAG,KAAKxB,KAAL,CAAWwC,QAAd,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEvC,MAArB,MAA2B,IAA3B,IAA2B,aAA3B,GAA2B,MAA3B,GAA2B,GAAEtB,EAAhD;;AAEA,cAAI6C,UAAJ,EAAgB;AACZ,iBAAKvD,gBAAL,CAAsBwE,OAAtB,CAA8B;AAACtC,yBAAW,EAAEqB,UAAd;AAA0BkB,qBAAO,EAAE,KAAK1D;AAAxC,aAA9B,EAAiFK,SAAjF,CAA2F,UAAAC,EAAE,EAAI;AAC7F,oBAAI,CAACH,QAAL,GAAgBG,EAAhB;AACH,aAFD;AAGH;AACJ;;;;;;;uBA/BQgD,uB,EAAuB,uH,EAAA,+H,EAAA,kJ,EAAA,mI,EAAA,iJ;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,c;AAAA,a;AAAA,iK;AAAA;AAAA;ACjBpC;;;;AAA6B;;;;;;;;;sEDiBhBA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACP7B,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKyB,Q","file":"playlists-playlists-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SinglePlaylistComponent} from '@app/playlists/single-playlist/single-playlist.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'single/:id',\r\n        component: SinglePlaylistComponent,\r\n        data: {\r\n            title: 'Edit Playlist'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PlaylistsRoutingModule { }\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {PlaylistsRoutingModule} from './playlists-routing.module';\r\nimport {SinglePlaylistComponent} from './single-playlist/single-playlist.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { PlaylistInfoFormComponent } from './single-playlist/playlist-info-form/playlist-info-form.component';\r\nimport { PlaylistVideosComponent } from './single-playlist/playlist-videos/playlist-videos.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [SinglePlaylistComponent, PlaylistInfoFormComponent, PlaylistVideosComponent],\r\n    imports: [\r\n        CommonModule,\r\n        PlaylistsRoutingModule,\r\n        DragDropModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class PlaylistsModule {\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {Router} from '@angular/router';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-playlist-info-form',\r\n    templateUrl: './playlist-info-form.component.html',\r\n    styleUrls: ['./playlist-info-form.component.scss']\r\n})\r\nexport class PlaylistInfoFormComponent implements OnInit {\r\n    playlistInfoForm: FormGroup;\r\n    apiUrl = API_URL;\r\n    editMode = false;\r\n    authUser;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n        public router: Router,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.playlistInfoForm = this.fb.group({\r\n            id: [''],\r\n            name: ['', Validators.required],\r\n            description: [''],\r\n            privacy: ['']\r\n        });\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    openVideosModal() {\r\n        this.dialog.open(AddVideoToPlaylistDialogComponent, {data: {playlist: this.playlist}}).afterClosed().subscribe(dt => {\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    updatePrivacy(value, playlist) {\r\n        console.log(+value)\r\n        playlist.privacy = +value;\r\n        this.playlistInfoForm.patchValue({privacy: +value});\r\n        this.playlistsService.updatePrivacy({privacy: value, id: playlist.id}).subscribe(dt => {\r\n            this.toastr.success('Playlist privacy is updated successfully');\r\n        });\r\n\r\n    }\r\n\r\n    editPlaylistInfo(playlist) {\r\n        this.editMode = true;\r\n        this.playlistInfoForm.patchValue(playlist);\r\n    }\r\n\r\n    savePlaylistInfoChanges() {\r\n        if (this.playlistInfoForm.valid) {\r\n            this.playlistsService.updatePlaylistInfo(this.playlistInfoForm.value).subscribe((dt) => {\r\n                this.editMode = false;\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n    openPlaylistPage(playlist) {\r\n        const route = 'videos/play';\r\n        const params = {id: playlist.videos?.[0]?.id, playlist_id: playlist.id};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n    backToPlaylists() {\r\n        const route = 'channels/show';\r\n        const params = {tab: 'playlists', username: this.authUser.username};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\">\r\n    <img [src]=\"playlist.thumbnail|getImgPath\">\r\n    <button class=\"btn play-all\" *ngIf=\"playlist.videos?.length!==0\" (click)=\"openPlaylistPage(playlist)\">\r\n        <span class=\"material-icons\">play_arrow</span>\r\n        Play All\r\n    </button>\r\n\r\n    <div class=\"info\">\r\n        <ng-container *ngIf=\"!editMode\">\r\n            <h3>\r\n                <span>{{playlist.name}}</span>\r\n                <span class=\"material-icons\" (click)=\"editPlaylistInfo(playlist)\">create</span>\r\n            </h3>\r\n            <p>{{playlist.description}}</p>\r\n            <h3>{{playlist.videos?.length}} videos</h3>\r\n            <h3 *ngIf=\"!editMode\">Last updated on {{playlist.updated_at|date: 'd MMM, yyyy'}}</h3>\r\n            <div class=\"select\" id=\"privacy-select\">\r\n                <mat-icon>visibility_{{+playlist.privacy ? 'off' : 'on'}}</mat-icon>\r\n                <select (change)=\"updatePrivacy($event.target.value, playlist)\">\r\n                    <option [value]=\"1\" [selected]=\"playlist.privacy\">Private</option>\r\n                    <option [value]=\"0\" [selected]=\"!playlist.privacy\">Public</option>\r\n                </select>\r\n            </div>\r\n        </ng-container>\r\n        <form [formGroup]=\"playlistInfoForm\" id=\"playlist-info-form\" *ngIf=\"editMode\">\r\n            <input formControlName=\"name\">\r\n            <span class=\"error\" *ngIf=\"playlistInfoForm.get('name').hasError('required')\">\r\n                Playlist name is required\r\n            </span>\r\n            <textarea formControlName=\"description\"></textarea>\r\n            <button class=\"btn cancel\" (click)=\"editMode=!editMode\">Cancel</button>\r\n            <button class=\"btn save-playlist-changes\" (click)=\"savePlaylistInfoChanges()\">Save\r\n            </button>\r\n        </form>\r\n    </div>\r\n\r\n    <button class=\"btn back\" (click)=\"backToPlaylists()\">Back</button>\r\n    <button class=\"btn add-video\" *ngIf=\"!editMode\" (click)=\"openVideosModal()\">Add Video</button>\r\n</div>\r\n","<div class=\"playlist\" cdkDropList>\r\n    <div class=\"playlist-item\" cdkDrag [cdkDragPreviewClass]=\"'video-container'\"\r\n         (cdkDragDropped)=\"dragDropped($event, video)\"\r\n         *ngFor=\"let video of playlist.videos; trackBy:trackByElement\">\r\n        <div class=\"video-container\">\r\n            <div class=\"img\">\r\n                <img [src]=\"video.thumbnail|getImgPath\"\r\n                     (click)=\"openPlaylistPage(video, playlist)\">\r\n                <div class=\"update-privacy\" (click)=\"updatePrivacy(video, video.privacy.name)\"\r\n                     [ngClass]=\"video.privacy.name !== 'Public'  ? 'red':'green'\">\r\n                    <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'off' : 'on'}}</mat-icon>\r\n                </div>\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n\r\n            <div class=\"details\">\r\n                <div class=\"title\">\r\n                    <h4 class=\"\">{{video.name}}</h4>\r\n                    <div class=\"dotes\">\r\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\"\r\n                                aria-label=\"Example icon-button with a menu\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                        </button>\r\n                        <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"addToAnotherPlaylist(video)\">\r\n                                <mat-icon>playlist_add</mat-icon>\r\n                                <span>Add to another playlist</span>\r\n                            </button>\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_top</mat-icon>-->\r\n                            <!--                                            <span>Move to top</span>-->\r\n                            <!--                                        </button>-->\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_bottom</mat-icon>-->\r\n                            <!--                                            <span>Move to bottom</span>-->\r\n                            <!--                                        </button>-->\r\n                            <button mat-menu-item\r\n                                    (click)=\"changePlaylistThumbnail(playlist.id, video.thumbnail)\">\r\n                                <mat-icon>insert_photo</mat-icon>\r\n                                <span>Set as playlist thumbnail</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"updatePrivacy(video, video.privacy.name)\">\r\n                                <mat-icon>visibility_{{video.privacy.name !== 'Public' ? 'on' : 'off'}}</mat-icon>\r\n                                <span>Make {{video.privacy.name !== 'Private' ? 'private' : 'public'}}</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"removeVideoFromPlaylist(playlist.id, video.id)\">\r\n                                <mat-icon>delete</mat-icon>\r\n                                <span>Remove from playlist</span>\r\n                            </button>\r\n\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                </div>\r\n                <div class=\"video-details-2nd-row\">\r\n                    <p class=\"shortened-description\">{{video.description}}</p>\r\n                    <div class=\"tags\">\r\n                        <ul>\r\n                            <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                                <span>{{tag.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-playlist-videos',\r\n    templateUrl: './playlist-videos.component.html',\r\n    styleUrls: ['./playlist-videos.component.scss']\r\n})\r\nexport class PlaylistVideosComponent implements OnInit {\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private dialog: MatDialog,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    openPlaylistPage(video, playlist) {\r\n        this.router.navigate(['videos/play'], {queryParams: {id: video.id, playlist_id: playlist.id}});\r\n    }\r\n\r\n    dragDropped(e, video) {\r\n        // console.log(e)\r\n        // console.log(channel)\r\n        this.playlist.videos = moveItemInArray(this.playlist.videos, e.previousIndex, e.currentIndex);\r\n        // console.log(this.playlist)\r\n        const sendData = {\r\n            rows: JSON.stringify(this.playlist),\r\n            playlist_id: this.playlist.id,\r\n            // user_id: this.authUser.id\r\n        };\r\n        this.playlistsService.updateVideoPosition(sendData).subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    changePlaylistThumbnail(playlistId, thumbnail) {\r\n        const params = {playlist_id: playlistId, ...{thumbnail}};\r\n        this.playlistsService.changePlaylistThumbnail(params).subscribe(dt => {\r\n            this.playlist = dt;\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    removeVideoFromPlaylist(playlistId, videoId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: videoId\r\n                }).subscribe(dt => {\r\n                    this.playlist = dt;\r\n                    this.refreshPlaylist.emit();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    addToAnotherPlaylist(video) {\r\n        this.playlistsService.get({channel_id: this.authUser?.channel?.id}).subscribe(dt => {\r\n            this.dialog.open(AddVideoToAnotherPlaylistComponent, {\r\n                width: '500px',\r\n                data: {video_id: video.id, playlists: dt}\r\n            }).afterClosed().subscribe(result => {\r\n                this.refreshPlaylist.emit();\r\n            });\r\n        });\r\n    }\r\n\r\n    updatePrivacy(video, privacy) {\r\n        this.videoService.updatePrivacy({\r\n            video_id: video.id,\r\n            privacy: privacy === 'Public' ? 'Private' : 'Public'\r\n        }).subscribe(dt => {\r\n            video.privacy = dt;\r\n        });\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-single-playlist',\r\n    templateUrl: './single-playlist.component.html',\r\n    styleUrls: ['./single-playlist.component.scss']\r\n})\r\nexport class SinglePlaylistComponent implements OnInit {\r\n    playlist;\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getPlaylistDetails();\r\n    }\r\n\r\n\r\n\r\n\r\n    getPlaylistDetails() {\r\n\r\n        const playlistId = this.route.snapshot?.params?.id;\r\n\r\n        if (playlistId) {\r\n            this.playlistsService.getById({playlist_id: playlistId, user_id: this.authUser}).subscribe(dt => {\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n","<div class=\"single-playlist\" *ngIf=\"playlist\">\r\n    <h2>Edit Playlist</h2>\r\n\r\n    <div class=\"inner-wrap\">\r\n        <div class=\"left\">\r\n            <app-playlist-info-form [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\">\r\n            </app-playlist-info-form>\r\n        </div>\r\n\r\n        <div class=\"right\">\r\n            <app-playlist-videos [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\"></app-playlist-videos>\r\n        </div>\r\n    </div>\r\n</div>\r\n"]}