{"version":3,"sources":["webpack:///src/app/playlists/playlists-routing.module.ts","webpack:///src/app/playlists/playlists.module.ts","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.ts","webpack:///src/app/playlists/single-playlist/playlist-info-form/playlist-info-form.component.html","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.ts","webpack:///src/app/playlists/single-playlist/playlist-videos/playlist-videos.component.html","webpack:///src/app/playlists/single-playlist/single-playlist.component.ts","webpack:///src/app/playlists/single-playlist/single-playlist.component.html"],"names":["routes","path","component","PlaylistsRoutingModule","forChild","imports","exports","PlaylistsModule","declarations","PlaylistInfoFormComponent","fb","playlistsService","dialog","apiUrl","editMode","refreshPlaylist","playlistInfoForm","group","id","name","required","description","open","data","playlist","afterClosed","subscribe","dt","emit","value","updatePrivacy","privacy","patchValue","updatePlaylistInfo","console","log","selector","templateUrl","styleUrls","PlaylistVideosComponent","router","route","getAuthUser","authUser","transform","video","navigate","queryParams","playlist_id","e","videos","previousIndex","currentIndex","sendData","rows","JSON","stringify","updateVideoPosition","playlistId","thumbnail","params","changePlaylistThumbnail","videoId","confirmed","removeVideoFromPlaylist","video_id","get","channel_id","channel","width","playlists","result","SinglePlaylistComponent","getPlaylistDetails","snapshot","getById"],"mappings":"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","file":"playlists-playlists-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SinglePlaylistComponent} from '@app/playlists/single-playlist/single-playlist.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'single/:id',\r\n        component: SinglePlaylistComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PlaylistsRoutingModule { }\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {PlaylistsRoutingModule} from './playlists-routing.module';\r\nimport {SinglePlaylistComponent} from './single-playlist/single-playlist.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport { PlaylistInfoFormComponent } from './single-playlist/playlist-info-form/playlist-info-form.component';\r\nimport { PlaylistVideosComponent } from './single-playlist/playlist-videos/playlist-videos.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [SinglePlaylistComponent, PlaylistInfoFormComponent, PlaylistVideosComponent],\r\n    imports: [\r\n        CommonModule,\r\n        PlaylistsRoutingModule,\r\n        DragDropModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class PlaylistsModule {\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-playlist-info-form',\r\n    templateUrl: './playlist-info-form.component.html',\r\n    styleUrls: ['./playlist-info-form.component.scss']\r\n})\r\nexport class PlaylistInfoFormComponent implements OnInit {\r\n    playlistInfoForm: FormGroup;\r\n    apiUrl = API_URL;\r\n    editMode = false;\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.playlistInfoForm = this.fb.group({\r\n            id: [''],\r\n            name: ['', Validators.required],\r\n            description: ['']\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    openVideosModal() {\r\n        this.dialog.open(AddVideoToPlaylistDialogComponent, {data: {playlist: this.playlist}}).afterClosed().subscribe(dt => {\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    updatePrivacy(value, playlist) {\r\n        this.playlistsService.updatePrivacy({privacy: value, id: playlist.id}).subscribe(dt => {\r\n\r\n        });\r\n\r\n    }\r\n\r\n    editPlaylistInfo(playlist) {\r\n        this.editMode = true;\r\n        this.playlistInfoForm.patchValue(playlist);\r\n    }\r\n\r\n    savePlaylistInfoChanges() {\r\n        this.playlistsService.updatePlaylistInfo(this.playlistInfoForm.value).subscribe((dt) => {\r\n            this.editMode = false;\r\n            this.playlist = dt;\r\n        });\r\n        console.log(this.playlistInfoForm.value)\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\">\r\n    <img *ngIf=\"playlist.thumbnail\" [src]=\"apiUrl+'uploads/thumbnails/'+playlist.thumbnail\">\r\n    <img *ngIf=\"!playlist.thumbnail\" [src]=\"'assets/img/video-thumbnail-default.png'\">\r\n    <button class=\"btn play-all\">\r\n        <span class=\"material-icons\">play_arrow</span>\r\n        Play All\r\n    </button>\r\n\r\n    <div class=\"info\">\r\n        <form [formGroup]=\"playlistInfoForm\" id=\"playlist-info-form\">\r\n            <ng-container *ngIf=\"!editMode\">\r\n\r\n                <h3>\r\n                    {{playlist.name}}\r\n                    <span class=\"material-icons\" (click)=\"editPlaylistInfo(playlist)\">create</span>\r\n                </h3>\r\n                <p>{{playlist.description}}</p>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"editMode\">\r\n                <input formControlName=\"name\">\r\n                <span class=\"error\" *ngIf=\"playlistInfoForm.get('name').hasError('required')\">Playlist name is required</span>\r\n                <textarea formControlName=\"description\"></textarea>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!editMode\">\r\n                <h3>{{playlist.videos?.length}} videos</h3>\r\n                <h3 *ngIf=\"!editMode\">Last updated on {{playlist.updated_at|date: 'd MMM, yyyy'}}</h3>\r\n                <div class=\"select\" id=\"privacy-select\">\r\n                    <mat-icon *ngIf=\"!playlist.privacy\">visibility_off</mat-icon>\r\n                    <mat-icon class=\"material-icons\" *ngIf=\"playlist.privacy\">visibility_on</mat-icon>\r\n                    <select (change)=\"updatePrivacy($event.target.value, playlist)\">\r\n                        <option [value]=\"0\" [selected]=\"!playlist.privacy\">Private</option>\r\n                        <option [value]=\"1\" [selected]=\"playlist.privacy\">Public</option>\r\n                    </select>\r\n                </div>\r\n            </ng-container>\r\n        </form>\r\n    </div>\r\n\r\n    <button class=\"btn cancel\" *ngIf=\"editMode\" (click)=\"editMode=!editMode\">Cancel</button>\r\n    <button class=\"btn save-playlist-changes\" *ngIf=\"editMode\" (click)=\"savePlaylistInfoChanges()\">Save\r\n    </button>\r\n\r\n\r\n    <button class=\"btn add-video\" *ngIf=\"!editMode\" (click)=\"openVideosModal()\">Add Video</button>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-playlist-videos',\r\n    templateUrl: './playlist-videos.component.html',\r\n    styleUrls: ['./playlist-videos.component.scss']\r\n})\r\nexport class PlaylistVideosComponent implements OnInit {\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n\r\n    @Input('playlist') playlist;\r\n    @Output('refreshPlaylist') refreshPlaylist = new EventEmitter();\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    openPlaylistPage(video, playlist) {\r\n        this.router.navigate(['videos/play'], {queryParams: {id: video.id, playlist_id: playlist.id}});\r\n    }\r\n\r\n    dragDropped(e, video) {\r\n        console.log(e)\r\n        // console.log(channel)\r\n        this.playlist.videos = moveItemInArray(this.playlist.videos, e.previousIndex, e.currentIndex);\r\n        // console.log(this.playlist)\r\n        const sendData = {\r\n            rows: JSON.stringify(this.playlist),\r\n            playlist_id: this.playlist.id,\r\n            // user_id: this.authUser.id\r\n        };\r\n        this.playlistsService.updateVideoPosition(sendData).subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    changePlaylistThumbnail(playlistId, thumbnail) {\r\n        const params = {playlist_id: playlistId, ...{thumbnail}};\r\n        this.playlistsService.changePlaylistThumbnail(params).subscribe(dt => {\r\n            this.playlist = dt;\r\n            this.refreshPlaylist.emit();\r\n        });\r\n    }\r\n\r\n    removeVideoFromPlaylist(playlistId, videoId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: videoId\r\n                }).subscribe(dt => {\r\n                    this.playlist = dt;\r\n                    this.refreshPlaylist.emit();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    addToAnotherPlaylist(video) {\r\n        this.playlistsService.get({channel_id: this.authUser?.channel?.id}).subscribe(dt => {\r\n            this.dialog.open(AddVideoToAnotherPlaylistComponent, {\r\n                width: '500px',\r\n                data: {video_id: video.id, playlists: dt}\r\n            }).afterClosed().subscribe(result => {\r\n                this.refreshPlaylist.emit();\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","<div class=\"playlist\" cdkDropList>\r\n    <div class=\"playlist-item\" cdkDrag [cdkDragPreviewClass]=\"'video-container'\"\r\n         (cdkDragDropped)=\"dragDropped($event, video)\"\r\n         *ngFor=\"let video of playlist.videos\">\r\n        <div class=\"video-container\">\r\n            <div class=\"img\">\r\n                <div class=\"thumbnail\">\r\n                    <img class=\"thumbnail\" [src]=\"video.thumbnail|getImgPath\"\r\n                         (click)=\"openPlaylistPage(video, playlist)\">\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"details\">\r\n                <div class=\"title\">\r\n                    <h4 class=\"\">{{video.name}}</h4>\r\n                    <div class=\"dotes\">\r\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\"\r\n                                aria-label=\"Example icon-button with a menu\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                        </button>\r\n                        <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"addToAnotherPlaylist(video)\">\r\n                                <mat-icon>playlist_add</mat-icon>\r\n                                <span>Add to another playlist</span>\r\n                            </button>\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_top</mat-icon>-->\r\n                            <!--                                            <span>Move to top</span>-->\r\n                            <!--                                        </button>-->\r\n                            <!--                                        <button mat-menu-item>-->\r\n                            <!--                                            <mat-icon>vertical_align_bottom</mat-icon>-->\r\n                            <!--                                            <span>Move to bottom</span>-->\r\n                            <!--                                        </button>-->\r\n                            <button mat-menu-item\r\n                                    (click)=\"changePlaylistThumbnail(playlist.id, video.thumbnail)\">\r\n                                <mat-icon>insert_photo</mat-icon>\r\n                                <span>Set as playlist thumbnail</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"removeVideoFromPlaylist(playlist.id, video.id)\">\r\n                                <mat-icon>delete</mat-icon>\r\n                                <span>Remove from playlist</span>\r\n                            </button>\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\">{{video.description}}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {AddVideoToPlaylistDialogComponent} from '@core/components/modals/add-video-to-playlist-dialog/add-video-to-playlist-dialog.component';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {moveItemInArray} from '@core/helpers/move-item-in-array';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AddVideoToAnotherPlaylistComponent} from '@core/components/modals/add-video-to-another-playlist/add-video-to-another-playlist.component';\r\n\r\n@Component({\r\n    selector: 'app-single-playlist',\r\n    templateUrl: './single-playlist.component.html',\r\n    styleUrls: ['./single-playlist.component.scss']\r\n})\r\nexport class SinglePlaylistComponent implements OnInit {\r\n    playlist;\r\n    apiUrl = API_URL;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private dialog: MatDialog,\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getPlaylistDetails();\r\n    }\r\n\r\n\r\n\r\n\r\n    getPlaylistDetails() {\r\n\r\n        const playlistId = this.route.snapshot?.params?.id;\r\n\r\n        if (playlistId) {\r\n            this.playlistsService.getById({playlist_id: playlistId}).subscribe(dt => {\r\n                this.playlist = dt;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n","<div class=\"single-playlist\" *ngIf=\"playlist\">\r\n    <h2>Edit Playlist</h2>\r\n\r\n    <div class=\"inner-wrap\">\r\n        <div class=\"left\">\r\n            <app-playlist-info-form [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\">\r\n            </app-playlist-info-form>\r\n        </div>\r\n\r\n        <div class=\"right\">\r\n            <app-playlist-videos [playlist]=\"playlist\" (refreshPlaylist)=\"getPlaylistDetails()\"></app-playlist-videos>\r\n        </div>\r\n    </div>\r\n</div>\r\n"]}