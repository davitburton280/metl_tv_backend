{"version":3,"sources":["webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.html","webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.ts","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.html","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.ts","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.html","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.ts","webpack:///src/app/videos/show-videos/show-videos.component.html","webpack:///src/app/videos/show-videos/show-videos.component.ts","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.ts","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.ts","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.html","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.ts","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.html","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.ts","webpack:///src/app/videos/play-video/play-video.component.html","webpack:///src/app/videos/play-video/play-video.component.ts","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.html","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.ts","webpack:///src/app/videos/videos-routing.module.ts","webpack:///src/app/videos/videos.module.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.html"],"names":["ShowRegularListComponent","router","trackByElement","video","username","r","this","navigate","route","queryParams","params","channel","users_vids","find","v","authUser","users_videos","saved","duration","moment","diff","created_at","Math","floor","asDays","name","tag","id","ShowPlaylistsListComponent","playlist","firstVideoId","playlist_id","ShowSearchResultsComponent","subject","channelsService","subscribeToChannel","user_id","channel_id","subscribe","dt","getUserChannelSubscriptions","d","setUserSubscriptions","checkIfSubscribed","subscribers","filter","s","push","replace","ShowVideosComponent","VideoCommentsFormComponent","videoService","getAuthUser","getExactParams","items","videos","playlists","channelsVideos","apiUrl","showTrending","showFilters","filters","filterStatus","subscriptions","loadingVideos","transform","search","snapshot","url","includes","selectedTag","searchChannelsVideos","getVideosList","get","withPlaylists","trending","searchWithVideos","length","forEach","unsubscribe","fb","cdr","fixLineBreaks","inputFocused","isSubmitted","originalFormattedComment","editComment","selectedComment","selectedReply","reply","isReplyComment","reply2Reply","parentComment","commentAdded","commentUpdated","cancelled","placeholderText","getPlaceholderText","videoCommentsForm","group","from_id","comment","required","video_id","videoData","to_user_id","to_comment_id","to_reply_id","is_reply","replyUsername","user","patchValue","valid","commentCtrl","value","updateVideoComment","emit","reset","addVideoComment","substring","lastIndexOf","detectChanges","onCancel","saveComment","SingleCommentComponent","CommentActionsComponent","toggleReplies","selectComment","likeDislikeComment","c","author_id","len","replies","e","liked","foundInReactors","reactors","users_comments","reaction","data","first_name","last_name","navigateByUrl","skipLocationChange","then","openChannelPage","likeDislikeCommentFn","selectCommentFn","commentSelected","remove","removeComment","VideoCommentsListComponent","dialog","showReplyForm","showReplyToReplyForm","showReplies","editReply","videoComments","cm","replyBtnClicked","replyCommentSelected","open","afterClosed","confirmed","removeVideoComment","buildParams","updateCommentLikes","comm","comment_id","disliked","likes","dislikes","conn","checkUserCommentConnection","max","VideoDetailsFormComponent","toastr","formReady","separatorKeysCodes","dropzoneConfig","videoDetailsForm","maxLength","tags","thumbnail","event","input","trim","error","index","indexOf","splice","thumbnailFile","target","files","formData","FormData","field","append","JSON","stringify","removeImage","onAddedFile","changeThumbnail","add","saveDetails","VideoSuggestionsComponent","playlistsService","playlistOpened","videoSuggestions","isProduction","environment","production","urlParams","videoId","playlistId","getById","playlistData","limit","removeVideoFromPlaylist","oldVideoIndex","nextVideo","openVideoPage","PlayVideoComponent","auth","loader","titleService","userVideoConnection","viewed","videoJSPlayerOptions","showTagsForm","isSmallScreen","commentsRefreshed","commentsLoading","getVideoById","setTitle","loggedIn","checkUserVideoConnection","updateViewsCount","indexUserTags","getComments","u","updateViews","action","getLikesState","updateLikes","saveVideo","saveVideoDetails","getVideoComments","count","subscribers_count","ShowSavedVideosComponent","VideojsTestComponent","VideosRoutingModule","VideosModule","getUserSavedVideos","userVideos","routes","path","component","config","controls","bigPlayButton","width","height","fluid","plugins","record","audio","debug","player","document","getElementById","msg","VERSION","getPluginVersion","RecordRTC","log","on","console","recordedData","pathMatch","title","canActivate","forChild"],"mappings":"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","file":"x","sourcesContent":["<div id=\"regular-video-list-container\">\r\n    <div class=\"video-container flex-wrap\" *ngFor=\"let video of items.videos; trackBy: trackByElement\">\r\n        <div class=\"thumbnail\">\r\n            <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, video.user.username)\">\r\n            <span class=\"live-now\" *ngIf=\"video.status==='live'\">Live now</span>\r\n            <span class=\"duration\">{{video.duration}}</span>\r\n        </div>\r\n        <div class=\"details\">\r\n            <h4 class=\"title\">{{video.name}}</h4>\r\n            <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\" (click)=\"openChannelPage(video.user.channel, video.user.username)\">\r\n                        {{video.user.channel.name}}\r\n                    </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n            </div>\r\n            <p class=\"shortened-description\">\r\n                {{video.description}}\r\n            </p>\r\n\r\n            <div class=\"saved-video\" *ngIf=\"checkIfSavedByCurrentUser(video)\">\r\n                <mat-icon>turned_in</mat-icon>\r\n                <span>Saved</span>\r\n            </div>\r\n\r\n            <div class=\"tags\">\r\n                <ul>\r\n                    <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                        <span>{{tag.name}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"is-new-video\" *ngIf=\"checkIfNewVideo(video)\">\r\n                <span class=\"new\">New</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {Router} from '@angular/router';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'app-show-regular-list',\r\n    templateUrl: './show-regular-list.component.html',\r\n    styleUrls: ['./show-regular-list.component.scss']\r\n})\r\nexport class ShowRegularListComponent implements OnInit {\r\n\r\n    @Input('items') items;\r\n    @Input('authUser') authUser;\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    async openChannelPage(channel, username) {\r\n        await this.router.navigate(['channels/show'], {queryParams: {username}});\r\n    }\r\n\r\n    checkIfSavedByCurrentUser(video) {\r\n        return video.users_vids.find(v => v.username === this.authUser?.username && v.users_videos.saved);\r\n    }\r\n\r\n    checkIfNewVideo(video) {\r\n        const duration = moment.duration(moment().diff(video.created_at));\r\n        return Math.floor(duration.asDays()) < 7;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-container\" *ngFor=\"let playlist of items.playlists\">\r\n    <ng-container *ngIf=\"playlist.videos.length > 0\">\r\n        <div class=\"thumbnail-container\" (click)=\"openPlaylistPage(playlist, playlist.videos[0].id)\">\r\n            <div class=\"thumbnail\">\r\n                <div class=\"short-details\">\r\n                    <mat-icon>playlist_add_check</mat-icon>\r\n                    <p class=\"name\">{{playlist.name}}</p>\r\n                    <p class=\"video-count\">{{playlist.videos.length + (playlist.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                </div>\r\n                <img [src]=\"playlist.thumbnail|getImgPath\">\r\n            </div>\r\n            <div class=\"fake-bg thumbnail\"></div>\r\n        </div>\r\n        <div class=\"details\">\r\n\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-show-playlists-list',\r\n    templateUrl: './show-playlists-list.component.html',\r\n    styleUrls: ['./show-playlists-list.component.scss']\r\n})\r\nexport class ShowPlaylistsListComponent implements OnInit {\r\n\r\n    @Input('items') items;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openPlaylistPage(playlist, firstVideoId) {\r\n        const route = 'videos/play';\r\n        const params = {id: firstVideoId, playlist_id: playlist.id};\r\n        await this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div id=\"search-results-container\">\r\n    <ng-container *ngFor=\"let channel of channelsVideos\">\r\n        <div class=\"channel-item\">\r\n            <div class=\"thumbnail\">\r\n                <img class=\"avatar\" [src]=\"channel.avatar|getImgPath:'avatars'\"\r\n                     (click)=\"openChannelPage(channel,channel.user?.username)\">\r\n            </div>\r\n            <div class=\"info\">\r\n                <p class=\"name\" (click)=\"openChannelPage(channel, channel?.user?.username)\">{{channel.name}}</p>\r\n                <div class=\"shortened-details\">\r\n                    <p class=\"video-count\">{{channel.videos.length + (channel.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                </div>\r\n                <p>{{getDesc(channel.description)}}</p>\r\n                <button class=\"btn subscribe-to-channel-btn\" *ngIf=\"channel?.user?.username !== authUser?.username\"\r\n                        [class.subscribed]=\"checkIfSubscribed(channel)\"\r\n                        (click)=\"subscribeToChannel(channel)\">{{checkIfSubscribed(channel) ? 'Subscribed' : 'Subscribe'}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"video-container\" *ngFor=\"let video of channel.videos\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, channel.user.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\">{{channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\">\r\n                    {{video.description}}\r\n                </p>\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-search-results',\r\n    templateUrl: './show-search-results.component.html',\r\n    styleUrls: ['./show-search-results.component.scss']\r\n})\r\nexport class ShowSearchResultsComponent implements OnInit {\r\n\r\n    @Input('channelsVideos') channelsVideos;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openChannelPage(channel, username) {\r\n        await this.router.navigate(['channels/show'], {queryParams: {username}});\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    subscribeToChannel(channel) {\r\n        this.channelsService.subscribeToChannel({user_id: this.authUser.id, channel_id: channel.id}).subscribe(dt => {\r\n            this.channelsService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n                if (this.checkIfSubscribed(channel)) {\r\n                    channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id);\r\n                } else {\r\n                    channel.subscribers.push(this.authUser);\r\n                }\r\n                // console.log(channel.subscribers)\r\n                // channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id).concat([this.authUser]);\r\n                // console.log(channel.subscribers)\r\n\r\n                // this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n            });\r\n        });\r\n    }\r\n\r\n    checkIfSubscribed(channel) {\r\n        return channel.subscribers.find(s => s.id === this.authUser?.id);\r\n    }\r\n\r\n    getDesc(d) {\r\n        return d?.replace(/<br\\s*[\\/]?>/gi, '\\n');\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"all-videos\">\r\n    <button class=\"filter-toggle-btn\" *ngIf=\"isFiltersShown()\" (click)=\"showFilters = !showFilters\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Filters</span>\r\n    </button>\r\n    <app-video-filters (filter)=\"getFilteredList($event)\" *ngIf=\"showFilters\"></app-video-filters>\r\n    <div id=\"videos-list\">\r\n        <mat-spinner [diameter]=\"20\" *ngIf=\"loadingVideos\"></mat-spinner>\r\n        <ng-container *ngIf=\"!search && !loadingVideos\">\r\n            <app-show-regular-list [items]=\"items\" [authUser]=\"authUser\"></app-show-regular-list>\r\n            <app-show-playlists-list [items]=\"items\" [authUser]=\"authUser\"></app-show-playlists-list>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"search && !loadingVideos\">\r\n            <app-show-search-results [channelsVideos]=\"channelsVideos\" [authUser]=\"authUser\"></app-show-search-results>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"search && channelsVideos?.length === 0\">\r\n        <span class=\"error\">No results found</span>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport * as moment from 'moment';\r\nimport {ActivatedRoute, ActivationEnd, Data, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {filter, map, tap} from 'rxjs/operators';\r\nimport {checkIfObjectEmpty} from '@core/helpers/check-if-object-empty';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-videos',\r\n    templateUrl: './show-videos.component.html',\r\n    styleUrls: ['./show-videos.component.scss']\r\n})\r\nexport class ShowVideosComponent implements OnInit, OnDestroy {\r\n    items = {videos: [], playlists: []};\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    selectedTag;\r\n    authUser;\r\n    showTrending = false;\r\n    showFilters = false;\r\n    filters = {};\r\n    filterStatus = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n    loadingVideos = false;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n\r\n        this.subscriptions.push(\r\n            this.route.queryParams.subscribe(d => {\r\n                this.search = this.route.snapshot.queryParams?.search;\r\n                this.showTrending = this.router.url.includes('trending');\r\n                this.selectedTag = this.route.snapshot.queryParams?.tag;\r\n                if (this.search) {\r\n                    this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n                } else {\r\n                    this.getVideosList({search: this.search, filters: this.filters, tag: this.selectedTag});\r\n                }\r\n            }));\r\n\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n    }\r\n\r\n    getFilteredList(filters = {}) {\r\n        this.filters = filters;\r\n        this.filterStatus = 'applied';\r\n        if (this.search) {\r\n            this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n        } else {\r\n            this.getVideosList({filters: this.filters});\r\n        }\r\n    }\r\n\r\n    getVideosList(params) {\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.videoService.get({\r\n            withPlaylists: !this.showTrending ? 1 : 0,\r\n            trending: this.showTrending ? 1 : 0,\r\n            ...params\r\n        }).subscribe(dt => {\r\n            this.items = dt;\r\n        });\r\n    }\r\n\r\n    searchChannelsVideos(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n        this.loadingVideos = true;\r\n\r\n        this.channelsService.searchWithVideos({user_id: this.authUser?.id, ...params}).subscribe(dt => {\r\n            this.loadingVideos = false;\r\n            this.channelsVideos = dt;\r\n        });\r\n    }\r\n\r\n\r\n    isFiltersShown() {\r\n        return this.items.videos?.length > 0 ||\r\n            (this.search && this.channelsVideos.find(v => v.videos.length > 0))\r\n            || this.filterStatus === 'applied' && !this.loadingVideos;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FixTextLineBreaksPipe} from '@shared/pipes/fix-text-line-breaks.pipe';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-form',\r\n    templateUrl: './video-comments-form.component.html',\r\n    styleUrls: ['./video-comments-form.component.scss']\r\n})\r\nexport class VideoCommentsFormComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    videoCommentsForm: FormGroup;\r\n    inputFocused = false;\r\n    authUser;\r\n    isSubmitted = false;\r\n    replyUsername;\r\n    originalFormattedComment = '';\r\n\r\n\r\n    @Input() editComment = false;\r\n    @Input() selectedComment = null;\r\n    @Input() selectedReply = null;\r\n    @Input() reply = false;\r\n    @Input() isReplyComment = false;\r\n    @Input() reply2Reply = false;\r\n    @Input() parentComment = null;\r\n    @ViewChild('cEditable') cEditable;\r\n    @Output('added') commentAdded = new EventEmitter();\r\n    @Output('updated') commentUpdated = new EventEmitter();\r\n    @Output('cancelled') cancelled = new EventEmitter();\r\n\r\n    placeholderText;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n        private fixLineBreaks: FixTextLineBreaksPipe\r\n    ) {\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.placeholderText = this.getPlaceholderText();\r\n\r\n        this.videoCommentsForm = this.fb.group({\r\n            id: [''],\r\n            from_id: [this.authUser.id],\r\n            comment: ['', Validators.required],\r\n            video_id: [this.videoData.id],\r\n            to_user_id: [0],\r\n            to_comment_id: [0],\r\n            to_reply_id: [0],\r\n            is_reply: [0]\r\n        });\r\n\r\n        if (this.reply2Reply) {\r\n            this.replyUsername = '@' + this.selectedReply?.user.username + ' ';\r\n            this.videoCommentsForm.patchValue({comment: this.replyUsername});\r\n        }\r\n\r\n    }\r\n\r\n    saveComment() {\r\n        this.isSubmitted = true;\r\n        if (this.videoCommentsForm.valid) {\r\n            // Reply add\r\n            if (this.reply) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n                // Reply edit\r\n            } else if (this.isReplyComment) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.parentComment.id,\r\n                    to_user_id: this.parentComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n            } else if (this.reply2Reply) {\r\n                const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_reply_id: this.selectedReply.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    comment: reply2Reply,\r\n                    is_reply: 1\r\n                });\r\n            }\r\n\r\n            // Comment & reply actions\r\n            if (this.editComment) {\r\n\r\n                if (this.parentComment) {\r\n                    const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                    const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                    this.videoCommentsForm.patchValue({comment: reply2Reply});\r\n                }\r\n\r\n\r\n                this.videoService.updateVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.commentUpdated.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            } else {\r\n\r\n                this.videoService.addVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.inputFocused = false;\r\n                    this.commentAdded.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.inputFocused = false;\r\n        this.videoCommentsForm.get('comment').reset();\r\n        if (this.editComment || this.reply || this.reply2Reply) {\r\n            this.cancelled.emit();\r\n        }\r\n    }\r\n\r\n\r\n    getPlaceholderText() {\r\n        return 'Add a public ' + (this.reply ? 'reply' : 'comment') + '...';\r\n    }\r\n\r\n    get commentCtrl() {\r\n        return this.videoCommentsForm.get('comment');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.editComment) {\r\n            const comment = this.selectedComment.comment;\r\n            if (this.parentComment) {\r\n                this.replyUsername = comment.substring(\r\n                    comment.lastIndexOf('@'),\r\n                    comment.lastIndexOf(' ')\r\n                );\r\n            }\r\n            this.videoCommentsForm.patchValue({\r\n                comment: this.fixLineBreaks.transform(comment.replace(/<[^>]*>?/gm, '')),\r\n                id: this.selectedComment.id\r\n            });\r\n            this.inputFocused = true;\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"videoCommentsForm\" class=\"w-100\">\r\n    <div class=\"d-flex mt-3 comment-input-container\">\r\n        <img class=\"avatar\" [src]=\"authUser.channel.avatar|getImgPath:'avatars'\">\r\n        <input type=\"hidden\" formControlName=\"comment\">\r\n        <mat-form-field floatLabel=\"never\">\r\n            <textarea matInput cdkTextareaAutosize [placeholder]=\"placeholderText\" class=\"comment-input\" #cEditable\r\n                      (focus)=\"inputFocused = true\"\r\n                      formControlName=\"comment\"></textarea>\r\n        </mat-form-field>\r\n    </div>\r\n    <div class=\"d-flex justify-content-end\">\r\n        <div [ngClass]=\"inputFocused ? 'd-flex':'d-none'\">\r\n            <button class=\"btn text-btn\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n            <button (click)=\"saveComment()\" type=\"button\" [class.green-bg]=\"videoCommentsForm.valid\"\r\n                    class=\"ml-3 px-2 btn enter\">{{reply ? 'Reply' : 'Comment'}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","<div class=\"d-flex\">\r\n    <img class=\"avatar\" [src]=\"comment.user?.channel.avatar|getImgPath:'avatars'\">\r\n    <div class=\"details\">\r\n        <div class=\"d-flex align-items-center mb-2\">\r\n            <div class=\"mr-3 user-name\" [class.author.px-2]=\"isAuthor(comment)\"\r\n                 (click)=\"openChannelPage(comment?.user?.username)\">\r\n                {{getFullName(comment?.user)}} <i class=\"fas fa-check-circle ml-1\" *ngIf=\"isAuthor(comment)\"></i>\r\n            </div>\r\n            <div class=\"comment-date\">{{comment.created_at | dateFromNow}}</div>\r\n        </div>\r\n\r\n        <div class=\"comment-text mb-2\" [innerHTML]=\"comment.comment\">\r\n        </div>\r\n        <div class=\"likes-reply\">\r\n            <div class=\"comments-like mb-2\">\r\n                <i class=\"fa fa-thumbs-up mr-1\" (click)=\"likeDislikeCommentFn(comment)\"\r\n                   [class.liked]=\"checkUserCommentConnection(comment)?.liked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'liked') }} </span>\r\n                <i class=\"fa fa-thumbs-down ml-3 mr-1\" (click)=\"likeDislikeCommentFn(comment, false)\"\r\n                   [class.disliked]=\"checkUserCommentConnection(comment)?.disliked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'disliked') }} </span>\r\n            </div>\r\n            <div class=\"reply-container\">\r\n                <span class=\"reply\" (click)=\"selectCommentFn(comment)\">Reply</span>\r\n                <app-video-comments-form [videoData]=\"videoData\" [reply]=\"reply\"\r\n                                         *ngIf=\"showReplyForm && (comment.id===selectedComment?.id ||comment.id == selectedReply?.id)\"\r\n                                         [selectedComment]=\"selectedComment\" [reply2Reply]=\"reply2Reply\"\r\n                                         [selectedReply]=\"selectedReply\"\r\n                                         (added)=\"commentAddedFn($event)\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n            </div>\r\n        </div>\r\n        <p class=\"replies-toggler mt-3\" *ngIf=\"comment?.replies?.length > 0\"\r\n           (click)=\"toggleRepliesFn(comment)\">\r\n            <mat-icon>expand_{{showReplies && selectedComment === comment ? 'more' : 'less'}}</mat-icon>\r\n            <span>{{getRepliesTogglerText(comment)}}</span>\r\n        </p>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-single-comment',\r\n    templateUrl: './single-comment.component.html',\r\n    styleUrls: ['./single-comment.component.scss']\r\n})\r\nexport class SingleCommentComponent implements OnInit {\r\n\r\n    @Input() comment;\r\n    @Input() videoData;\r\n    @Input() showReplyForm;\r\n    @Input() selectedComment;\r\n    @Input() selectedReply;\r\n    @Input() showReplies;\r\n    @Input() reply;\r\n    @Input() reply2Reply;\r\n\r\n    @Output() toggleReplies = new EventEmitter();\r\n    @Output() commentAdded = new EventEmitter();\r\n    @Output() selectComment = new EventEmitter();\r\n    @Output() likeDislikeComment = new EventEmitter();\r\n\r\n    authUser;\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    getRepliesTogglerText(c) {\r\n        const len = c.replies.length;\r\n        return `View ${len + (len > 1 ? ' replies' : ' reply')}`;\r\n    }\r\n\r\n    selectCommentFn(c) {\r\n        this.selectComment.emit(c);\r\n    }\r\n\r\n    commentAddedFn(e) {\r\n        this.commentAdded.emit(e);\r\n    }\r\n\r\n    toggleRepliesFn(c) {\r\n        this.toggleReplies.emit(c);\r\n    }\r\n\r\n    likeDislikeCommentFn(c, liked = true) {\r\n        this.likeDislikeComment.emit({c, liked});\r\n    }\r\n\r\n    checkUserCommentConnection(c) {\r\n        const foundInReactors = c.reactors.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n    getFullName(data) {\r\n        return data.first_name + ' ' + data.last_name;\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate(['channels/show'], {queryParams: {username}})\r\n        );\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-comment-actions',\r\n    templateUrl: './comment-actions.component.html',\r\n    styleUrls: ['./comment-actions.component.scss']\r\n})\r\nexport class CommentActionsComponent implements OnInit {\r\n    authUser;\r\n\r\n    @Input() comment;\r\n    @Output() commentSelected = new EventEmitter();\r\n    @Output() remove = new EventEmitter();\r\n\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n\r\n\r\n    selectComment(c) {\r\n        this.commentSelected.emit(c);\r\n    }\r\n\r\n    removeComment(c) {\r\n        this.remove.emit(c);\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"more-actions\">\r\n\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"selectComment(comment)\">\r\n            <mat-icon>edit</mat-icon>\r\n            <span>Edit</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"removeComment(comment)\">\r\n            <mat-icon>delete</mat-icon>\r\n            <span>Delete</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","<div class=\"comments-container\" [hidden]=\"videoComments.length === 0\">\r\n    <ng-container *ngFor=\"let c of videoComments\">\r\n        <div class=\"comment d-flex mt-4\" *ngIf=\"isCommentShown(c)\">\r\n            <div class=\"left-group\" [class.w-100]=\"editComment\">\r\n                <app-single-comment [comment]=\"c\" [videoData]=\"videoData\" [showReplyForm]=\"showReplyForm\"\r\n                                    [showReplies]=\"showReplies\" [selectedComment]=\"selectedComment\"\r\n                                    class=\"w-100\" [reply]=\"true\" (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                    (commentAdded)=\"commentAdded($event)\" (toggleReplies)=\"toggleReplies($event)\"\r\n                                    (selectComment)=\"selectComment($event, true)\"></app-single-comment>\r\n                <div class=\"replies\" [hidden]=\"!isReplyShown(c)\">\r\n                    <ng-container *ngFor=\"let reply of c.replies\">\r\n                        <div class=\"d-flex reply mt-4\" *ngIf=\"reply.id!==selectedReply?.id || !editReply\">\r\n                            <div class=\"left-group\">\r\n                                <app-single-comment [comment]=\"reply\" [videoData]=\"videoData\"\r\n                                                    [showReplyForm]=\"showReplyToReplyForm\"\r\n                                                    [showReplies]=\"showReplies\"\r\n                                                    [selectedComment]=\"selectedComment\"\r\n                                                    [selectedReply]=\"selectedReply\" [reply2Reply]=\"true\"\r\n                                                    (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                                    (commentAdded)=\"commentAdded($event)\" class=\"w-100\"\r\n                                                    (selectComment)=\"replyToReply(c, reply)\"></app-single-comment>\r\n                            </div>\r\n                            <div class=\"right-group\">\r\n                                <app-comment-actions [comment]=\"reply\"\r\n                                                     *ngIf=\"isMyComment(reply) && !editReply\"\r\n                                                     (remove)=\"removeComment($event)\"\r\n                                                     (commentSelected)=\"selectComment($event, false,true)\">\r\n                                </app-comment-actions>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedReply\"\r\n                                                 class=\"w-100\" [isReplyComment]=\"true\" [parentComment]=\"c\"\r\n                                                 *ngIf=\"editReply && reply.id===selectedReply.id\"\r\n                                                 (updated)=\"getUpdatedComments($event)\"\r\n                                                 (cancelled)=\"editReply = false\"\r\n                                                 [videoData]=\"videoData\">\r\n                        </app-video-comments-form>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-group\">\r\n                <app-comment-actions [comment]=\"c\" *ngIf=\"isMyComment(c) && !editComment\"\r\n                                     (remove)=\"removeComment($event)\"\r\n                                     (commentSelected)=\"selectComment($event)\">\r\n                </app-comment-actions>\r\n            </div>\r\n        </div>\r\n        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedComment\"\r\n                                 class=\"edit-comment-form w-100\"\r\n                                 *ngIf=\"editComment && c.id===selectedComment.id\"\r\n                                 (updated)=\"getUpdatedComments($event)\" (cancelled)=\"editComment = false\"\r\n                                 [videoData]=\"videoData\">\r\n        </app-video-comments-form>\r\n    </ng-container>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {Subscription} from 'rxjs';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-list',\r\n    templateUrl: './video-comments-list.component.html',\r\n    styleUrls: ['./video-comments-list.component.scss'],\r\n    // changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VideoCommentsListComponent implements OnInit, OnDestroy {\r\n\r\n    authUser;\r\n    selectedComment;\r\n    subscriptions: Subscription[] = [];\r\n    showReplyForm = false;\r\n    showReplyToReplyForm = false;\r\n    showReplies = false;\r\n    editReply = false;\r\n    selectedReply;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input() videoData;\r\n    @Input() videoComments = [];\r\n    @Input() editComment = false;\r\n\r\n    constructor(\r\n        private subject: SubjectService,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    isMyComment(c) {\r\n        return c.user.id === this.authUser.id;\r\n    }\r\n\r\n    getUpdatedComments(e) {\r\n        this.videoComments = e;\r\n        this.editComment = false;\r\n        this.editReply = false;\r\n        this.selectedComment = e.find(cm => cm.id === this.selectedComment?.id);\r\n        this.selectedReply = e.find(c => c.id === this.selectedReply?.id);\r\n    }\r\n\r\n    selectComment(c, replyBtnClicked = false, replyCommentSelected = false) {\r\n        if (!replyBtnClicked && !replyCommentSelected) {\r\n            this.editComment = !this.editComment;\r\n            this.showReplyForm = !this.editComment;\r\n            this.selectedComment = c;\r\n        } else if (replyCommentSelected) {\r\n            this.editReply = true;\r\n            this.selectedReply = c;\r\n        } else {\r\n            this.showReplyForm = this.selectedComment !== c || !this.showReplyForm;\r\n            this.selectedComment = c;\r\n        }\r\n    }\r\n\r\n    replyToReply(c, r) {\r\n        this.showReplyToReplyForm = this.selectedReply !== r || !this.showReplyToReplyForm;\r\n        this.selectedComment = c;\r\n        this.selectedReply = r;\r\n    }\r\n\r\n\r\n    removeComment(c) {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.videoService.removeVideoComment({\r\n                    user_id: this.authUser.id,\r\n                    id: c.id,\r\n                    video_id: c.video_id\r\n                }).subscribe(dt => {\r\n                    this.videoComments = dt;\r\n                    this.selectedComment = dt.find(cm => cm.id === this.selectedComment?.id);\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.videoComments = e;\r\n        this.showReplyForm = false;\r\n        this.showReplyToReplyForm = false;\r\n        this.showReplies = true;\r\n        this.selectedComment = e.find(c => c.id === this.selectedComment.id);\r\n    }\r\n\r\n    toggleReplies(c) {\r\n        this.showReplies = !this.showReplies;\r\n        this.selectedComment = c;\r\n    }\r\n\r\n    likeDislikeComment(e) {\r\n        const params = this.buildParams(e.c, e.liked);\r\n\r\n\r\n        this.subscriptions.push(this.videoService.updateCommentLikes(params).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.showReplies = true;\r\n            this.selectedComment = this.videoComments.find(comm => comm.id === this.selectedComment?.id);\r\n        }));\r\n    }\r\n\r\n    buildParams(c, liked) {\r\n        const params = {\r\n            video_id: c.video_id,\r\n            comment_id: c.id,\r\n            user_id: this.authUser.id,\r\n            liked: 0,\r\n            disliked: 0,\r\n            likes: c.likes,\r\n            dislikes: c.dislikes\r\n        };\r\n        const conn = this.checkUserCommentConnection(c);\r\n\r\n        // Avoiding negative values here\r\n        params.likes = Math.max(0, conn?.liked ? --c.likes : +c.likes);\r\n        params.dislikes = Math.max(0, conn?.disliked ? --c.dislikes : +c.dislikes);\r\n\r\n\r\n        if (liked) {\r\n            params.liked = +!conn?.liked;\r\n        } else {\r\n            params.disliked = +!conn?.disliked;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n\r\n    checkUserCommentConnection(comment) {\r\n        const foundInReactors = comment.reactors?.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    isCommentShown(c) {\r\n        return (c.id !== this.selectedComment?.id && !this.showReplyForm) || this.showReplyForm || !this.editComment;\r\n    }\r\n\r\n    isReplyShown(c) {\r\n        return this.showReplies && this.selectedComment === c;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"videoDetailsForm\" id=\"tags-form\">\r\n    <div class=\"left-group\">\r\n\r\n        <div id=\"video-name\">\r\n            <mat-form-field>\r\n                <input matInput formControlName=\"name\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"isSubmitted && videoDetailsForm.get('name').hasError('required')\">\r\n                The video name is required\r\n            </mat-error>\r\n            <mat-error *ngIf=\"videoDetailsForm.get('name').hasError('maxlength')\">\r\n                Not more than 12 characters please\r\n            </mat-error>\r\n        </div>\r\n    </div>\r\n    <div class=\"center-group\">\r\n        <div class=\"image-container\" *ngIf=\"videoData.thumbnail\">\r\n            <img class=\"saved-thumbnail\" [src]=\"apiUrl+ 'uploads/thumbnails/'+videoData.thumbnail\">\r\n        </div>\r\n        <div class=\"actions-container\">\r\n            <button id=\"change-thumbnail\" *ngIf=\"videoData.thumbnail\" (click)=\"removeThumbnail()\">Change thumbnail\r\n            </button>\r\n            <dropzone [config]=\"dropzoneConfig\" [hidden]=\"videoData.thumbnail\" (removedFile)=\"removeImage()\"\r\n                      id=\"video-thumbnail-dropzone\" class=\"single\" #dropzone (thumbnail)=\"onAddedFile($event)\"\r\n                      [message]=\"'Click or drag an image to upload'\">\r\n            </dropzone>\r\n            <input type=\"file\" (change)=\"changeThumbnail($event)\" [hidden]=\"true\">\r\n        </div>\r\n    </div>\r\n    <div class=\"right-group\">\r\n\r\n        <div id=\"video-tags\">\r\n            <mat-form-field class=\"example-chip-list\">\r\n                <mat-chip-list #tagList formControlName=\"tags\">\r\n                    <mat-chip *ngFor=\"let tag of videoData.tags\" (removed)=\"remove(tag)\">\r\n                        {{tag.name}}\r\n                        <mat-icon matChipRemove>cancel</mat-icon>\r\n                    </mat-chip>\r\n                    <input placeholder=\"Tags...\" #chipsInput\r\n                           [matChipInputFor]=\"tagList\"\r\n                           [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                           (matChipInputTokenEnd)=\"add($event)\">\r\n                </mat-chip-list>\r\n                <mat-hint align=\"end\">Please press 'Enter' after the tag name</mat-hint>\r\n\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"videoData.tags.length ===0 && isSubmitted\">Please provide some tags describing your live\r\n                video\r\n            </mat-error>\r\n        </div>\r\n\r\n        <div class=\"actions\">\r\n            <button id=\"save-tags\" (click)=\"saveDetails()\">\r\n                <mat-icon>checked</mat-icon>\r\n                <span>Save changes</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {MatChipInputEvent} from '@angular/material/chips';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {API_URL, TAG_CHARACTERS_LIMIT} from '@core/constants/global';\r\nimport {DROPZONE_CONFIG} from 'ngx-dropzone-wrapper';\r\n\r\n@Component({\r\n    selector: 'app-video-details-form',\r\n    templateUrl: './video-details-form.component.html',\r\n    styleUrls: ['./video-details-form.component.scss']\r\n})\r\nexport class VideoDetailsFormComponent implements OnInit {\r\n    @Input('videoData') videoData;\r\n    @Output('formReady') formReady = new EventEmitter();\r\n    videoDetailsForm: FormGroup;\r\n\r\n    isSubmitted = false;\r\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n    apiUrl = API_URL;\r\n\r\n    thumbnailFile;\r\n\r\n    dropzoneConfig = DROPZONE_CONFIG;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private toastr: ToastrService\r\n    ) {\r\n        this.videoDetailsForm = this.fb.group({\r\n            name: ['', [Validators.required, Validators.maxLength(TAG_CHARACTERS_LIMIT)]],\r\n            tags: [[], Validators.required],\r\n            thumbnail: [''],\r\n            video_id: []\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.videoDetailsForm.patchValue({\r\n            video_id: this.videoData.id,\r\n            ...this.videoData\r\n        });\r\n    }\r\n\r\n    add(event: MatChipInputEvent): void {\r\n        const input = event.input;\r\n        const value = event.value;\r\n\r\n        if ((value || '').trim()) {\r\n            if (this.videoData.tags.length === 3) {\r\n                this.toastr.error('We don\\'t support more than 3 tags per video');\r\n            } else {\r\n                this.videoData.tags.push({name: value.trim()});\r\n                this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n            }\r\n\r\n            // this.saveTags();\r\n        }\r\n\r\n        // Reset the input value\r\n        if (input) {\r\n            input.value = '';\r\n        }\r\n    }\r\n\r\n    remove(tag): void {\r\n        const index = this.videoData.tags.indexOf(tag);\r\n\r\n        if (index >= 0) {\r\n            this.videoData.tags.splice(index, 1);\r\n            this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        }\r\n    }\r\n\r\n    removeThumbnail() {\r\n        this.videoDetailsForm.patchValue({thumbnail: ''});\r\n        this.videoData.thumbnail = '';\r\n    }\r\n\r\n    changeThumbnail(e) {\r\n        this.thumbnailFile = e.target.files[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n    saveDetails() {\r\n        this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        this.isSubmitted = true;\r\n        if (this.videoDetailsForm.valid) {\r\n            const formData = new FormData();\r\n            for (const field in this.videoDetailsForm.value) {\r\n                if (field !== 'tags') {\r\n                    formData.append(field, this.videoDetailsForm.value[field]);\r\n                } else {\r\n                    formData.append(field, JSON.stringify(this.videoDetailsForm.value[field]));\r\n                }\r\n            }\r\n            if (this.thumbnailFile) {\r\n                formData.append('video_thumbnail_file', this.thumbnailFile, this.thumbnailFile.name);\r\n            }\r\n            this.formReady.emit(formData);\r\n        }\r\n    }\r\n\r\n    removeImage() {\r\n\r\n    }\r\n\r\n    onAddedFile(e) {\r\n        this.thumbnailFile = e[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-wrap\" *ngIf=\"playlistOpened && playlistData && playlistData.videos.length > 0\">\r\n    <h2>{{playlistData.name}}</h2>\r\n    <div class=\"list-wrap\">\r\n        <ng-container *ngFor=\"let video of playlistData.videos\">\r\n\r\n            <div class=\"playlist-video\" [class.selected]=\"videoId === video.id\"\r\n                 (click)=\"openVideoPage(video, playlistData?.id)\">\r\n\r\n                <div class=\"thumbnail-container\">\r\n                    <img [src]=\"video.thumbnail|getImgPath\">\r\n                </div>\r\n\r\n                <div class=\"details-container\">\r\n                    <p class=\"video-name\" (click)=\"openVideoPage(video, playlistData?.id)\">{{video.name}}</p>\r\n                    <p class=\"main-text-3\">{{video.channel.name}}</p>\r\n                </div>\r\n\r\n                <div class=\"remove-btn-container\" *ngIf=\"authUser.id === playlistData.channel.id\"\r\n                     (click)=\"removeVideoFromPlaylist(video,playlistId)\">\r\n                    <span class=\"material-icons\">delete</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"suggested-videos\" *ngFor=\"let video of videoSuggestions;let ind = index\">\r\n    <div class=\"suggested-video\" *ngIf=\"ind < 5\">\r\n\r\n        <div class=\"thumbnail-container\">\r\n            <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video)\">\r\n        </div>\r\n\r\n        <div class=\"details-container\">\r\n            <p class=\"video-name\">{{video.name}}</p>\r\n            <p class=\"channel-sub-name\">{{video.channel.name}}</p>\r\n            <div class=\"details-row\">\r\n                <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<!--<div [hidden]=\"isProduction\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--</div>-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL, DEFAULT_VIDEO_SUGGESTIONS_COUNT} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {environment} from '@env';\r\n\r\n@Component({\r\n    selector: 'app-video-suggestions',\r\n    templateUrl: './video-suggestions.component.html',\r\n    styleUrls: ['./video-suggestions.component.scss']\r\n})\r\nexport class VideoSuggestionsComponent implements OnInit {\r\n\r\n    urlParams;\r\n    videoId;\r\n    playlistId;\r\n    playlistData;\r\n\r\n    playlistOpened = false;\r\n    videoSuggestions = [];\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n    isProduction = environment.production;\r\n\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.urlParams = this.route.snapshot.queryParams;\r\n        this.videoId = +this.urlParams?.id;\r\n        this.playlistId = this.urlParams?.playlist_id;\r\n        this.playlistOpened = !!this.playlistId;\r\n\r\n        if (this.playlistOpened) {\r\n            this.playlistsService.getById({playlist_id: this.playlistId}).subscribe(dt => {\r\n                this.playlistData = dt;\r\n            });\r\n        }\r\n\r\n        this.videoService.get({limit: DEFAULT_VIDEO_SUGGESTIONS_COUNT}).subscribe(dt => {\r\n            this.videoSuggestions = dt.videos;\r\n        });\r\n\r\n    }\r\n\r\n    openVideoPage(video, playlistId = null) {\r\n        const route = '/videos/play';\r\n        const params = {id: video.id, playlist_id: playlistId};\r\n\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate([route], {queryParams: params})\r\n        );\r\n\r\n    }\r\n\r\n    removeVideoFromPlaylist(video, playlistId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: video.id\r\n                }).subscribe(dt => {\r\n                    const oldVideoIndex = this.playlistData.videos.indexOf(video);\r\n                    this.playlistData.videos = dt.videos;\r\n                    const nextVideo = this.playlistData.videos[oldVideoIndex];\r\n                    if (nextVideo) {\r\n                        this.openVideoPage(nextVideo);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","<app-user-tags *ngIf=\"auth.loggedIn()\" (tagSelected)=\"getVideosByTag($event)\"></app-user-tags>\r\n<div class=\"ads-block\">\r\n    <div class=\"ads-block-left\">\r\n        <ng-container *ngIf=\"videoData\">\r\n            <div class=\"videoWrap\">\r\n                <app-video-js-player [videoData]=\"videoData\"\r\n                                     [videoUrl]=\"apiUrl + 'uploads/videos/' + videoData.filename\"></app-video-js-player>\r\n                <!--                                <app-video-regular-player [videoData]=\"videoData\"></app-video-regular-player>-->\r\n                <!--                                <app-vjs-player [videoData]=\"videoData\" [options]=\"videoJSPlayerOptions\"></app-vjs-player>-->\r\n            </div>\r\n\r\n            <div class=\"main-tags\">\r\n                <div class=\"main-tags-text\">\r\n                    <span *ngIf=\"videoData.tags?.length === 0\">No tags defined for this video</span>\r\n                    <ng-container *ngIf=\"videoData.tags?.length > 0\">\r\n                        <p *ngFor=\"let tag of videoData.tags\" class=\"tag\" (click)=\"openVideoByTag(tag.name)\">\r\n                            #{{tag.name}}</p>\r\n                    </ng-container>\r\n                </div>\r\n\r\n                <div class=\"main-tags-like\">\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'like')\">\r\n                        <i class=\"fas fa-thumbs-up\" [class.liked]=\"userVideoConnection?.liked\"></i>\r\n                        <p>{{videoData.likes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'dislike')\">\r\n                        <i class=\"fas fa-thumbs-down\"\r\n                           [class.disliked]=\"userVideoConnection?.disliked\"></i>\r\n                        <p>{{videoData.dislikes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\">\r\n                        <i class=\"fas fa-share-alt\"></i>\r\n                        <p>Share</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"saveVideo(videoData)\"\r\n                         [class.saved]=\"userVideoConnection?.saved === 'saved'\">\r\n                        <i class=\"fas fa-plus-square\"></i>\r\n                        <p>{{userVideoConnection?.saved === 'saved' ? 'Saved' : 'Save'}}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div class=\"tags-container\">\r\n                <div class=\"editable-details\" *ngIf=\"!showTagsForm\">\r\n                    <p class=\"video-title\">{{videoData?.name}}</p>\r\n                    <button id=\"add-tags\"\r\n                            *ngIf=\"auth.loggedIn() && !showTagsForm && authUser?.id === videoData.author_id\"\r\n                            (click)=\"showTagsForm = !showTagsForm\">\r\n                        <mat-icon>edit</mat-icon>\r\n                        <span>Edit details</span>\r\n                    </button>\r\n                </div>\r\n                <app-video-details-form [videoData]=\"videoData\" *ngIf=\"showTagsForm\"\r\n                                        (formReady)=\"saveVideoDetails($event)\"></app-video-details-form>\r\n            </div>\r\n            <div class=\"details-row\">\r\n                <span class=\"views-count\">{{videoData?.views + ' view' + (videoData?.views === 1 ? '' : 's')}}</span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"date\">{{videoData.created_at|dateFromNow}}</span>\r\n            </div>\r\n            <div class=\"channel-block\" (click)=\"openChannelPage(videoData)\" *ngIf=\"videoData?.channel\">\r\n                <img alt=\"avatar\" class=\"avatar\" [src]=\"videoData.channel.avatar|getImgPath:'avatars'\">\r\n                <div>\r\n                    <p class=\"channel-name\">{{videoData.channel.name}}</p>\r\n                    <p class=\"subscribers-count\">{{buildSubscribersCountText(videoData)}}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <app-video-suggestions *ngIf=\"isSmallScreen\"></app-video-suggestions>\r\n            </div>\r\n            <div class=\"comments-block\">\r\n                <app-video-comments-form *ngIf=\"auth.loggedIn()\" (added)=\"commentAdded($event)\" [videoData]=\"videoData\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n                <mat-spinner [diameter]=\"15\"\r\n                             [hidden]=\"!auth.loggedIn() || commentsLoading === 'finished'\"></mat-spinner>\r\n                <app-video-comments-list [videoData]=\"videoData\"\r\n                                         [videoComments]=\"videoComments\"></app-video-comments-list>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"ads-block-right\">\r\n        <app-video-suggestions *ngIf=\"!isSmallScreen\"></app-video-suggestions>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {API_URL, VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport IsResponsive from '@core/helpers/is-responsive';\r\nimport {Subscription} from 'rxjs';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Title} from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'app-play-video',\r\n    templateUrl: './play-video.component.html',\r\n    styleUrls: ['./play-video.component.scss']\r\n})\r\nexport class PlayVideoComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    videoData;\r\n    apiUrl = API_URL;\r\n\r\n    authUser;\r\n    userVideoConnection = {liked: 0, disliked: 0, saved: '', viewed: false};\r\n    videoJSPlayerOptions = VIDEOJS_PLAYER_OPTIONS;\r\n\r\n    showTagsForm = false;\r\n    isSmallScreen = IsResponsive.isSmallScreen();\r\n\r\n    commentsRefreshed = false;\r\n    formValue;\r\n    videoComments = [];\r\n    commentsLoading = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        private loader: LoaderService,\r\n        private titleService: Title\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const videoId = this.route.snapshot.queryParams.id;\r\n        const params = {id: videoId};\r\n\r\n        this.subscriptions.push(this.videoService.getVideoById(params).subscribe(dt => {\r\n            this.videoData = dt;\r\n            this.titleService.setTitle(dt.name);\r\n            if (this.auth.loggedIn()) {\r\n                this.userVideoConnection = this.checkUserVideoConnection(dt);\r\n                this.updateViewsCount(dt);\r\n                this.indexUserTags(dt);\r\n                this.getComments();\r\n            }\r\n        }));\r\n\r\n\r\n    }\r\n\r\n\r\n    checkUserVideoConnection(videoData) {\r\n        const userVideoConnection = videoData?.users_vids.find(u => u.id === this.authUser.id);\r\n        if (!userVideoConnection) {\r\n            return this.userVideoConnection;\r\n        } else {\r\n            const liked = userVideoConnection.users_videos?.liked;\r\n            const disliked = userVideoConnection.users_videos?.disliked;\r\n            const saved = userVideoConnection.users_videos.saved ? 'saved' : '';\r\n            const viewed = !!userVideoConnection?.users_videos?.viewed;\r\n            return {liked, disliked, saved, viewed};\r\n        }\r\n    }\r\n\r\n    updateViewsCount(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id};\r\n        if (!this.userVideoConnection.viewed) {\r\n            this.subscriptions.push(this.videoService.updateViews(params).subscribe((d) => {\r\n                this.videoData = d;\r\n            }));\r\n        }\r\n    }\r\n\r\n    updateLikes(videoData, action) {\r\n        if (this.auth.loggedIn()) {\r\n\r\n            videoData = this.getLikesState(action, videoData);\r\n\r\n            this.videoService.updateLikes({\r\n                video_id: videoData.id,\r\n                user_id: this.authUser.id,\r\n                likes: videoData.likes,\r\n                dislikes: videoData.dislikes,\r\n                liked: this.userVideoConnection.liked,\r\n                disliked: this.userVideoConnection.disliked,\r\n                saved: videoData.saved\r\n            }).subscribe(dt => {\r\n\r\n            });\r\n        } else {\r\n            this.toastr.error('Please log in first to take this action');\r\n        }\r\n    }\r\n\r\n    getLikesState(action, videoData) {\r\n        if (action === 'like') {\r\n            this.userVideoConnection.liked = +!this.userVideoConnection.liked;\r\n            if (this.userVideoConnection.disliked) {\r\n                videoData.dislikes += videoData.dislikes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.disliked = 0;\r\n            videoData.likes += this.userVideoConnection.liked ? 1 : -1;\r\n\r\n        } else {\r\n            this.userVideoConnection.disliked = +!this.userVideoConnection.disliked;\r\n            if (this.userVideoConnection.liked) {\r\n                videoData.likes += videoData.likes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.liked = 0;\r\n            videoData.dislikes += this.userVideoConnection.disliked ? 1 : -1;\r\n        }\r\n        return videoData;\r\n    }\r\n\r\n    indexUserTags(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id, tags: this.videoData?.tags};\r\n        this.subscriptions.push(this.videoService.indexUserTags(params).subscribe(d => {\r\n\r\n        }));\r\n    }\r\n\r\n\r\n    openChannelPage(videoData) {\r\n        this.router.navigate(['channels/show'], {queryParams: {username: videoData.users_vids[0].username}});\r\n    }\r\n\r\n    async openVideoByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    saveVideo(videoData) {\r\n\r\n        this.subscriptions.push(this.videoService.saveVideo({\r\n            video_id: videoData.id,\r\n            user_id: this.authUser.id,\r\n            saved: this.userVideoConnection.saved === 'saved' ? 0 : 1\r\n        }).subscribe(dt => {\r\n            this.userVideoConnection.saved = dt.saved ? 'saved' : '';\r\n        }));\r\n    }\r\n\r\n    saveVideoDetails(e) {\r\n        this.subscriptions.push(this.videoService.saveVideoDetails(e)\r\n            .subscribe(dt => {\r\n                this.videoData = dt;\r\n                this.titleService.setTitle(dt.name);\r\n                this.showTagsForm = false;\r\n            }));\r\n    }\r\n\r\n    getComments() {\r\n        this.commentsLoading = 'loading';\r\n        this.subscriptions.push(this.videoService.getVideoComments({video_id: this.videoData.id}).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.commentsLoading = 'finished';\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.commentsRefreshed = true;\r\n        this.videoComments = e;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    buildSubscribersCountText(videoData) {\r\n        const count = videoData.channel.subscribers_count;\r\n        return count + ' subscriber' + (count === 1 ? '' : 's');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"videos-list\" *ngIf=\"userVideos\">\r\n    <ng-container *ngIf=\"!search\">\r\n        <div class=\"video-container flex-wrap\" *ngFor=\"let video of userVideos.users_vids\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, userVideos.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\"\r\n                          (click)=\"openChannelPage(video.user.channel, video.user.username)\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\">\r\n                   {{video.description}}\r\n                </p>\r\n\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-saved-videos',\r\n    templateUrl: './show-saved-videos.component.html',\r\n    styleUrls: ['./show-saved-videos.component.scss']\r\n})\r\nexport class ShowSavedVideosComponent implements OnInit {\r\n\r\n    userVideos;\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    authUser;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.authUser = this.getAuthUser.transform();\r\n\r\n        this.videoService.getUserSavedVideos({user_id: this.authUser.id}).subscribe(dt => {\r\n            this.userVideos = dt;\r\n        });\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    openChannelPage(channel, username) {\r\n        this.router.navigate(['channels/show'], {queryParams: {username}});\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\r\nimport videojs from 'video.js';\r\nimport * as RecordRTC from 'recordrtc';\r\n\r\n@Component({\r\n    selector: 'app-videojs-test',\r\n    templateUrl: './videojs-test.component.html',\r\n    styleUrls: ['./videojs-test.component.scss']\r\n})\r\nexport class VideojsTestComponent implements OnInit, AfterViewInit {\r\n    config = {\r\n        controls: true,\r\n        bigPlayButton: false,\r\n        width: 320,\r\n        height: 240,\r\n        fluid: false,\r\n        plugins: {\r\n            record: {\r\n                audio: true,\r\n                video: true,\r\n                maxLength: 110,\r\n                debug: true\r\n            }\r\n        }\r\n    };\r\n    player;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.player = videojs(document.getElementById('video'), this.config, () => {\r\n            // console.log('player ready! id:', el);\r\n\r\n            // print version information at startup\r\n            const msg = 'Using video.js ' + videojs.VERSION +\r\n                ' with videojs-record ' + videojs.getPluginVersion('record') +\r\n                ' and recordrtc ' + RecordRTC.version;\r\n            videojs.log(msg);\r\n        }, () => {\r\n        });\r\n\r\n        let player = this.player;\r\n\r\n        this.player.on('finishRecord', () => {\r\n            // the blob object contains the recorded data that\r\n            // can be downloaded by the user, stored on server etc.\r\n            console.log('finished recording: ', player.recordedData);\r\n            // player.record().saveAs({'video': 'my-video-file-name.webm'});\r\n        });\r\n\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowVideosComponent} from '@app/videos/show-videos/show-videos.component';\r\nimport {PlayVideoComponent} from '@app/videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from '@app/videos/show-saved-videos/show-saved-videos.component';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {VideojsTestComponent} from '@app/videos/videojs-test/videojs-test.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n      path: 'test',\r\n      component: VideojsTestComponent\r\n    },\r\n    {\r\n        path: '',\r\n        component: ShowVideosComponent,\r\n        pathMatch: 'full',\r\n        data: {\r\n            title: 'Videos',\r\n        }\r\n    },\r\n    {\r\n        path: 'play',\r\n        component: PlayVideoComponent,\r\n        data: {\r\n            title: 'Play Video',\r\n        }\r\n    },\r\n    {\r\n        path: 'saved',\r\n        component: ShowSavedVideosComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n            title: 'Saved Videos',\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class VideosRoutingModule {\r\n}\r\n\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {VideosRoutingModule} from './videos-routing.module';\r\nimport {ShowVideosComponent} from './show-videos/show-videos.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\n\r\nimport {PlayVideoComponent} from '../videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from './show-saved-videos/show-saved-videos.component';\r\nimport {VideoSuggestionsComponent} from './play-video/video-suggestions/video-suggestions.component';\r\nimport { VideoDetailsFormComponent } from './play-video/video-details-form/video-details-form.component';\r\nimport { ShowRegularListComponent } from './show-videos/show-regular-list/show-regular-list.component';\r\nimport { ShowSearchResultsComponent } from './show-videos/show-search-results/show-search-results.component';\r\nimport { ShowPlaylistsListComponent } from './show-videos/show-playlists-list/show-playlists-list.component';\r\nimport { VideoCommentsFormComponent } from './play-video/video-comments-form/video-comments-form.component';\r\nimport { VideoCommentsListComponent } from './play-video/video-comments-list/video-comments-list.component';\r\nimport { CommentActionsComponent } from './play-video/video-comments-list/comment-actions/comment-actions.component';\r\nimport { SingleCommentComponent } from './play-video/video-comments-list/single-comment/single-comment.component';\r\nimport { VideojsTestComponent } from './videojs-test/videojs-test.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowVideosComponent,\r\n        PlayVideoComponent,\r\n        ShowSavedVideosComponent,\r\n        VideoSuggestionsComponent,\r\n        VideoDetailsFormComponent,\r\n        ShowRegularListComponent,\r\n        ShowSearchResultsComponent,\r\n        ShowPlaylistsListComponent,\r\n        VideoCommentsFormComponent,\r\n        VideoCommentsListComponent,\r\n        CommentActionsComponent,\r\n        SingleCommentComponent,\r\n        VideojsTestComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        VideosRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class VideosModule {\r\n}\r\n","<video id=\"video\" class=\"video-js\" playsinline></video>\r\n"]}