{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html","./src/app/core/components/modals/verify-email/verify-email.component.ts","./src/app/core/components/modals/verify-email/verify-email.component.html","./src/app/core/helpers/password-confirmation.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ForgotPasswordComponent} from '@app/auth/forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from '@app/auth/reset-password/reset-password.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: {\r\n            title: 'Login'\r\n        }\r\n    },\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent,\r\n        data: {\r\n            title: 'Register'\r\n        }\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent,\r\n        data: {\r\n            title: 'Forgot Password'\r\n        }\r\n    },\r\n    {\r\n        path: 'reset-password',\r\n        component: ResetPasswordComponent,\r\n        data: {\r\n            title: 'Reset Password'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {AuthRoutingModule} from './auth-routing.module';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {BsDatepickerModule} from 'ngx-bootstrap/datepicker';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MaterialModule} from '@core/modules/material.module';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [LoginComponent, RegisterComponent, VerifyEmailComponent, ForgotPasswordComponent, ResetPasswordComponent],\r\n    imports: [\r\n        CommonModule,\r\n        AuthRoutingModule,\r\n        ReactiveFormsModule,\r\n        BsDatepickerModule.forRoot(),\r\n        MaterialModule,\r\n\r\n    ],\r\n    providers: []\r\n})\r\nexport class AuthModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    forgotPassForm: FormGroup;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService\r\n    ) {\r\n        this.forgotPassForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    sendEmail() {\r\n        this.isSubmitted = true;\r\n        if (this.forgotPassForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            // this.router.navigate(['auth/reset-password']);\r\n            this.auth.sendForgotPassEmail(this.forgotPassForm.value).subscribe(dt => {\r\n                this.loader.formProcessing = false;\r\n                this.toastr.success('Reset password request has been sent to your e-mail');\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"forgotPassForm\">\r\n            <h3>Forgot Password</h3>\r\n            <h4>Enter your email</h4>\r\n            <input placeholder=\"Enter email\" formControlName=\"email\">\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('required') && isSubmitted\">\r\n                Please write your email</span>\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('patternInvalid') && isSubmitted\">\r\n                E-mail is invalid\r\n            </span>\r\n\r\n            <div class=\"actions\">\r\n                <button (click)=\"sendEmail()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport jwtDecode from 'jwt-decode';\r\nimport {SocketIoService} from \"@core/services/socket-io.service\";\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n    loginForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private authGuard: AuthGuard,\r\n        private dialog: MatDialog,\r\n        private subject: SubjectService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n        this.loginForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['', Validators.required],\r\n        });\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    login() {\r\n        this.isSubmitted = true;\r\n        if (this.loginForm.valid) {\r\n            this.subscriptions.push(this.auth.login(this.loginForm.value).subscribe(async (dt: any) => {\r\n                localStorage.setItem('token', dt?.token || '');\r\n                this.subject.changeAuthUser(jwtDecode(dt?.token || ''));\r\n                console.log(jwtDecode(dt?.token || ''))\r\n                await this.router.navigateByUrl(this.authGuard.redirectUrl || '/');\r\n            }));\r\n        }\r\n    }\r\n\r\n    get email(): AbstractControl {\r\n        return this.loginForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.loginForm.get('password');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"login-btn bg-white\">Login</a>\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/register'])\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Login</p>\r\n            <form [formGroup]=\"loginForm\">\r\n\r\n                <!-- E-mail field -->\r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"email.hasError('required') && isSubmitted\">\r\n          E-mail is <strong>required</strong>\r\n        </span>\r\n                <span class=\"error\" *ngIf=\"email.hasError('patternInvalid')\">\r\n          E-mail is <strong>invalid</strong>\r\n        </span>\r\n\r\n                <!-- Password field -->\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n          Password is <strong>required</strong>\r\n        </span>\r\n                <p class=\"forgot-password\" (click)=\"router.navigate(['auth/forgot-password'])\">Forgot password?</p>\r\n                <a class=\"login-submit\" (click)=\"login()\">Login</a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {DatePipe} from '@angular/common';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {\r\n    EMAIL_PATTERN,\r\n    NO_SPACE_PATTERN,\r\n    NUMBER_AFTER_TEXT_PATTERN,\r\n    TEXT_ONLY_PATTERN_WITHOUT_SPECIALS\r\n} from '@core/constants/patterns';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n    registerForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n    currentDate = new Date();\r\n    maxDate: Date;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private datePipe: DatePipe,\r\n        private dialog: MatDialog,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService\r\n    ) {\r\n\r\n        // Age-restriction of 18\r\n        this.maxDate = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() - 18));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.registerForm = this.fb.group({\r\n                first_name: ['', [Validators.required, patternValidator(TEXT_ONLY_PATTERN_WITHOUT_SPECIALS)]],\r\n                last_name: ['', [Validators.required, patternValidator(TEXT_ONLY_PATTERN_WITHOUT_SPECIALS)]],\r\n                username: ['', [Validators.required, patternValidator(NUMBER_AFTER_TEXT_PATTERN)]],\r\n                email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n                password: ['',\r\n                    [\r\n                        Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                        Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                    ],\r\n                ],\r\n                // confirm_password: new FormControl('', {validators: [Validators.required], updateOn: 'blur'}),\r\n                confirm_password: ['', Validators.required],\r\n                birthday: ['', Validators.required],\r\n            },\r\n            {validator: passwordConfirmation('password', 'confirm_password')}\r\n        );\r\n    }\r\n\r\n    register() {\r\n        if (this.registerForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.register(this.registerForm.value).subscribe(async (dt: any) => {\r\n                this.loader.formProcessing = false;\r\n                localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.subject.changeAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                await this.router.navigate(['/']);\r\n            }));\r\n        }\r\n    }\r\n\r\n    dateChanged(e) {\r\n\r\n    }\r\n\r\n    openModal() {\r\n        this.isSubmitted = true;\r\n\r\n        if (this.registerForm.valid) {\r\n\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.sendEmailVerificationCode(this.registerForm.value).subscribe((code) => {\r\n                this.loader.formProcessing = false;\r\n                this.dialog.open(VerifyEmailComponent, {\r\n                    height: '548px',\r\n                    width: '548px',\r\n                    data: this.registerForm.value\r\n                }).afterClosed().subscribe(async (dt) => {\r\n                    localStorage.setItem('token', (dt?.hasOwnProperty('token') ? dt.token : ''));\r\n                    await this.router.navigate(['/']);\r\n                });\r\n            }));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    get firstName(): AbstractControl {\r\n        return this.registerForm.get('first_name');\r\n    }\r\n\r\n    get lastName(): AbstractControl {\r\n        return this.registerForm.get('last_name');\r\n    }\r\n\r\n    get email(): AbstractControl {\r\n        return this.registerForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.registerForm.get('password');\r\n    }\r\n\r\n    get username(): AbstractControl {\r\n        return this.registerForm.get('username');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.registerForm.get('confirm_password');\r\n    }\r\n\r\n    get birthday(): AbstractControl {\r\n        return this.registerForm.get('birthday');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" src=\"assets/img/metltvlogo.svg\" (click)=\"router.navigate(['/'])\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/login'])\">Login</a>\r\n            <a class=\"login-btn bg-white\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Sign Up</p>\r\n            <form [formGroup]=\"registerForm\">\r\n                <input class=\"login-input\" placeholder=\"First Name\" formControlName=\"first_name\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && firstName.hasError('required')\">First name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && firstName.hasError('patternInvalid')\">\r\n                    First name should contain only alphabetical characters\r\n                </span>\r\n\r\n                <input class=\"login-input\" placeholder=\"Last Name\" formControlName=\"last_name\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && lastName.hasError('required')\">Last name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && lastName.hasError('patternInvalid')\">\r\n                    Last name should contain only alphabetical characters\r\n                </span>\r\n\r\n\r\n                <input class=\"login-input\" placeholder=\"User name\" formControlName=\"username\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('required')\">User name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('patternInvalid')\">\r\n                    Please write alphabetical characters before numbers for username\r\n                </span>\r\n\r\n                <div class=\"register-block birthday-block\">\r\n                    <input type=\"text\" (bsValueChange)=\"dateChanged($event)\" formControlName=\"birthday\"\r\n                           class=\"login-input\"\r\n                           placeholder=\"Birthday\" [bsConfig]=\"{maxDate:maxDate, showWeekNumbers: false}\"\r\n                           [maxDate]=\"maxDate\"\r\n                           bsDatepicker>\r\n                </div>\r\n\r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('required')\">E-mail is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('patternInvalid')\">\r\n                    E-mail is <strong>invalid</strong>\r\n                </span>\r\n\r\n\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && pass.hasError('required')\">Password is required</span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n                </span>\r\n                <input class=\"login-input\" placeholder=\"Reenter Password\" type=\"password\"\r\n                       formControlName=\"confirm_password\">\r\n                <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n                <span class=\"error\"\r\n                      *ngIf=\"isSubmitted && confirmPass.hasError('required')\">Please confirm the password</span>\r\n\r\n                <span class=\"error\" *ngIf=\"isSubmitted && birthday.hasError('required')\">Birth day is required</span>\r\n\r\n                <div class=\"actions\">\r\n                    <a class=\"register-submit\" (click)=\"openModal()\">Sign Up</a>\r\n                    <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN, NO_SPACE_PATTERN} from '@core/constants/patterns';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-reset-password',\r\n    templateUrl: './reset-password.component.html',\r\n    styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    resetPassForm: FormGroup;\r\n    isSubmitted = false;\r\n    emailPassed = false;\r\n    tokenExpired = false;\r\n    email;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private route: ActivatedRoute,\r\n        private jwtHelper: JwtHelperService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService\r\n    ) {\r\n\r\n        this.email = this.route.snapshot?.queryParams?.email;\r\n        const token = this.route.snapshot?.queryParams?.token;\r\n        this.tokenExpired = this.jwtHelper.isTokenExpired(token);\r\n        this.emailPassed = !!this.email;\r\n\r\n        this.resetPassForm = this.fb.group({\r\n            email: [this.email, [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['',\r\n                [\r\n                    Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                    Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                ],\r\n            ],\r\n            confirm_password: ['', [Validators.required]]\r\n        }, {validator: passwordConfirmation('password', 'confirm_password')});\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    changePassword() {\r\n        this.isSubmitted = true;\r\n        if (this.resetPassForm.valid) {\r\n            this.auth.resetPass(this.resetPassForm.value).subscribe(dt => {\r\n                localStorage.setItem('token', (dt?.hasOwnProperty('token') ? dt.token : ''));\r\n                this.subject.changeAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.router.navigate(['/']);\r\n            });\r\n        }\r\n    }\r\n\r\n    resendEmail() {\r\n        this.auth.sendForgotPassEmail({email: this.email}).subscribe(dt => {\r\n            this.toastr.success('Reset password request has been resent to your e-mail');\r\n        });\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.resetPassForm.get('password');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.resetPassForm.get('confirm_password');\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"resetPassForm\" *ngIf=\"emailPassed && !tokenExpired\">\r\n            <h3>Reset Password</h3>\r\n            <input type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n            <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n                Please write the new password</span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n            </span>\r\n\r\n            <input type=\"password\" placeholder=\"Reenter Password\" formControlName=\"confirm_password\">\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('required') && isSubmitted\">\r\n                Please re-type the new password</span>\r\n            <div class=\"actions\">\r\n                <button (click)=\"changePassword()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n        <div id=\"token-expired-container\" *ngIf=\"tokenExpired\">\r\n            <img src=\"assets/img/undraw_calendar_dutt.svg\">\r\n            <h3>Session expired.</h3>\r\n            <p>The link is not valid anymore.</p>\r\n            <button (click)=\"resendEmail()\">Resend email</button>\r\n            <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {FOUR_DIGIT_NUMBERS_ONLY, NUMBERS_ONLY} from '@core/constants/patterns';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Router} from '@angular/router';\r\nimport {PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\n\r\n@Component({\r\n    selector: 'app-verify-email',\r\n    templateUrl: './verify-email.component.html',\r\n    styleUrls: ['./verify-email.component.scss']\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n    email = '';\r\n    verifyCodeForm: FormGroup;\r\n    sentCode: number;\r\n    codeChecked = false;\r\n    verifyingCode = false;\r\n    codeWrong = false;\r\n    codeResent = false;\r\n    codeResending = false;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private matDialogRef: MatDialogRef<VerifyEmailComponent>,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        public loader: LoaderService,\r\n        public router: Router\r\n    ) {\r\n        this.sentCode = data.code;\r\n        this.email = data.email;\r\n        this.verifyCodeForm = this.fb.group({\r\n            email: [this.email, Validators.required],\r\n            code: [null, [\r\n                Validators.required, patternValidator(NUMBERS_ONLY),\r\n                patternValidator(FOUR_DIGIT_NUMBERS_ONLY)\r\n            ]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    verifyCode() {\r\n        this.isSubmitted = true;\r\n        if (this.verifyCodeForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.auth.checkVerificationCode(this.verifyCodeForm.value).subscribe(async (dt) => {\r\n                this.codeChecked = true;\r\n                this.verifyingCode = false;\r\n                this.loader.formProcessing = false;\r\n                setTimeout(() => {\r\n                    this.matDialogRef.close(dt);\r\n                }, 4000);\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    resendCode() {\r\n        this.codeResending = true;\r\n        this.codeWrong = false;\r\n        this.auth.resendEmailVerificationCode({email: this.email, resend: 1}).subscribe(code => {\r\n            this.sentCode = code;\r\n            this.codeResending = false;\r\n            this.codeResent = true;\r\n        });\r\n    }\r\n\r\n    get emailCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('email');\r\n    }\r\n\r\n    get codeCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('code');\r\n    }\r\n\r\n}\r\n","<div id=\"verify-email\">\r\n    <ng-container *ngIf=\"!codeChecked\">\r\n        <h1>Sign up</h1>\r\n        <h3>Enter verification code</h3>\r\n        <p>We've sent a 4 digit code to {{email}}. Confirm it belongs to you to keep your account secure</p>\r\n        <form [formGroup]=\"verifyCodeForm\">\r\n            <input placeholder=\"Enter code\" formControlName=\"code\">\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('required') && isSubmitted\">\r\n                Please provide the code that was sent to your email\r\n            </p>\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('patternInvalid') && isSubmitted\">\r\n                Please write exactly 4 digits only\r\n            </p>\r\n            <p id=\"resend-code\" (click)=\"resendCode()\">Resend code</p>\r\n            <div class=\"loader-holder\" *ngIf=\"loader.formProcessing\">\r\n                <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n            </div>\r\n            <p *ngIf=\"codeResent\">Code is resent</p>\r\n\r\n            <p class=\"error wrong-code\" *ngIf=\"!emailCtrl.hasError('required') && codeWrong\">\r\n                The code is wrong\r\n            </p>\r\n            <button (click)=\"verifyCode()\" *ngIf=\"!verifyingCode\">Submit</button>\r\n        </form>\r\n    </ng-container>\r\n    <div [hidden]=\"!codeChecked\" id=\"thanks\">\r\n        <img src=\"assets/img/checked.svg\">\r\n        <p class=\"thanks-for-verification\">\r\n            Thanks for verifying your e-mail address.\r\n        </p>\r\n        <div class=\"loader-holder\">\r\n            <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {FormGroup} from '@angular/forms';\r\n\r\nexport function passwordConfirmation(key: string, confirmationKey: string) {\r\n  return (group: FormGroup) => {\r\n    const input = group.controls[key];\r\n    const confirmationInput = group.controls[confirmationKey];\r\n\r\n    if (!input.value || !confirmationInput.value) {\r\n      return;\r\n    }\r\n\r\n    return confirmationInput.setErrors(\r\n      input.value !== confirmationInput.value ? {notMatch: true} : null\r\n    );\r\n  };\r\n}\r\n"],"sourceRoot":"webpack:///"}