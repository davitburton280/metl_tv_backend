{"version":3,"sources":["webpack:///src/app/shared/components/video-filters/video-filters.component.ts","webpack:///src/app/shared/components/video-filters/video-filters.component.html","webpack:///src/app/core/services/playlists.service.ts","webpack:///src/app/core/helpers/pattern-validator.ts","webpack:///src/app/core/services/posts.service.ts","webpack:///src/app/shared/components/posts/post-item/post-item.component.html","webpack:///src/app/shared/components/posts/post-item/post-item.component.ts","webpack:///src/app/core/constants/patterns.ts","webpack:///src/app/core/services/stores/posts-store.service.ts","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.html","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.ts"],"names":["VideoFiltersComponent","videoService","ifObjectEmpty","subjectService","filters","selectedFilters","subscriptions","trackByElement","filterAction","this","push","getToggleFiltersData","subscribe","dt","emit","name","value","group","PlaylistsService","httpClient","params","post","get","put","delete","patternValidator","pattern","control","test","patternInvalid","PostsService","http","postsStore","pipe","posts","setAllPosts","PostItemComponent","accessedFromGroup","TEXT_ONLY_PATTERN_WITHOUT_SPECIALS","NUMBER_AFTER_TEXT_PATTERN","NO_SPACE_PATTERN","NUMBERS_ONLY","FOUR_DIGIT_NUMBERS_ONLY","EMAIL_PATTERN","METL_URL_PATTERN","PostsStoreService","allPostsSource","allPosts$","asObservable","userPostsSource","userPosts$","getValue","next","PostFormPlaceholderComponent","userStore"],"mappings":"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","file":"x","sourcesContent":["import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {VIDEO_FILTERS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-video-filters',\r\n    templateUrl: './video-filters.component.html',\r\n    styleUrls: ['./video-filters.component.scss']\r\n})\r\nexport class VideoFiltersComponent implements OnInit {\r\n    filters = VIDEO_FILTERS;\r\n    selectedFilters = {};\r\n    subscriptions: Subscription[] = [];\r\n    trackByElement = trackByElement;\r\n\r\n    @Output('filter') filterAction = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private ifObjectEmpty: CheckForEmptyObjectPipe,\r\n        private subjectService: SubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.selectedFilters = {};\r\n            this.filterAction.emit(this.selectedFilters);\r\n        }));\r\n    }\r\n\r\n    applyFilter({name, value}, group) {\r\n        this.selectedFilters[group] = {name, value};\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n    removeFilter({name, value}, group) {\r\n        delete this.selectedFilters[group];\r\n        // if (this.ifObjectEmpty.transform(this.selectedFilters)) {\r\n        // this.selectedFilters = {};\r\n        // }\r\n\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n}\r\n","<div class=\"filter-groups\">\r\n    <ng-container *ngFor=\"let filter of filters; trackBy:trackByElement\">\r\n\r\n        <div class=\"filter-group\">\r\n            <p class=\"filter-name\">{{filter.group.name}}</p>\r\n            <mat-divider></mat-divider>\r\n            <ul>\r\n                <li class=\"filter-item\" *ngFor=\"let item of filter.items\"\r\n                    [class.selected]=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                    <span (click)=\"applyFilter(item, filter.group.value)\">{{item.name}}</span>\r\n                    <button mat-icon-button class=\"remove-filter\" (click)=\"removeFilter(item, filter.group.value)\"\r\n                            *ngIf=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                        <mat-icon>clear</mat-icon>\r\n                    </button>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PlaylistsService {\r\n\r\n    constructor(\r\n        private httpClient: HttpClient\r\n    ) {\r\n    }\r\n\r\n    addPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add`, params);\r\n    }\r\n\r\n    addVideosToPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-videos`, params);\r\n    }\r\n\r\n    addVideoToOtherPlaylists(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-video-to-other-playlists`, params);\r\n    }\r\n\r\n    get(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get`, {params});\r\n    }\r\n\r\n    getById(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get-by-id`, {params});\r\n    }\r\n\r\n    searchPlaylists(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/search`, {params});\r\n    }\r\n\r\n    updatePrivacy(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-privacy`, params);\r\n    }\r\n\r\n    updateVideoPosition(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-video-position`, params);\r\n    }\r\n\r\n    updatePlaylistInfo(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-playlist-info`, params);\r\n    }\r\n\r\n    changePlaylistThumbnail(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/change-thumbnail`, params);\r\n    }\r\n\r\n    removeVideoFromPlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove-video`, {params});\r\n    }\r\n\r\n    removePlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove`, {params});\r\n    }\r\n}\r\n","import {AbstractControl, ValidatorFn, FormGroup} from '@angular/forms';\r\n\r\nexport function patternValidator(pattern): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } => {\r\n    const value = control.value;\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    return !pattern.test(value) ? {patternInvalid: {pattern}} : null;\r\n  };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Post} from '@shared/models/post';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {shareReplay} from 'rxjs/operators';\r\nimport {PostsStoreService} from '@core/services/stores/posts-store.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PostsService {\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private postsStore: PostsStoreService\r\n    ) {\r\n    }\r\n\r\n    getGroupPosts(params) {\r\n        return this.http.get<Post[]>(`${API_URL}posts/get`, {params})\r\n    }\r\n\r\n    getAllPosts(params) {\r\n        return this.http.get<Post[]>(`${API_URL}posts/get`, {params})\r\n            .pipe(shareReplay(1))\r\n            .subscribe((posts: Post[]) => {\r\n                this.postsStore.setAllPosts(posts);\r\n            });\r\n    }\r\n\r\n    add(params) {\r\n        return this.http.post<Post[]>(`${API_URL}posts/add`, params);\r\n    }\r\n\r\n    getById(params) {\r\n        return this.http.get<Post>(`${API_URL}posts/get-by-id`, {params})\r\n    }\r\n}\r\n","<div class=\"post-item\" *ngIf=\"post\">\r\n    <div class=\"posted\">\r\n        <p>\r\n            Posted by <span [routerLink]=\"'/users/'+post.post_author.username\"\r\n                            class=\"author-username\">{{post.post_author.username}}</span>\r\n            <ng-container *ngIf=\"!accessedFromGroup && post.post_group as group\">\r\n                <i class=\"fas fa-arrow-right group-pointer\"></i>\r\n                <span class=\"post-group-name\" [routerLink]=\"'/groups/'+group.custom_name+'/about'\">{{group.name}}</span>\r\n            </ng-container>\r\n        </p>\r\n        <p>{{post.created_at| dateFromNow}}</p>\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n        <div class=\"left-wrap\">\r\n            <div class=\"voting-container\">\r\n                <button class=\"vote-up-btn active\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n                <div class=\"vote-count\">{{post.votes}}</div>\r\n                <button class=\"vote-down-btn\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"right-wrap\">\r\n            <p [innerHTML]=\"post.description\"></p>\r\n\r\n            <img class=\"post-cover\" [routerLink]=\"'/posts/'+post.id\" [src]=\"post.cover_img|getImgPath: 'post_covers'\">\r\n\r\n            <div class=\"post-menu\">\r\n                <div class=\"menu\">\r\n                        <a href=\"\"><span class=\"material-icons\">chat_bubble</span>Comments</a>\r\n                        <a href=\"\"><span class=\"material-icons\">share</span>Share</a>\r\n                </div>\r\n                <div class=\"dotes\">\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                        <i class=\"material-icons\">more_vert</i>\r\n                    </button>\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item>\r\n                            <mat-icon>edit</mat-icon>\r\n                            <span>Edit</span>\r\n                        </button>\r\n                        <button mat-menu-item>\r\n                            <mat-icon>delete</mat-icon>\r\n                            <span>Delete</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {AfterViewInit, Component, Input, OnInit} from '@angular/core';\r\nimport {Post} from '@shared/models/post';\r\n\r\n@Component({\r\n    selector: 'app-post-item',\r\n    templateUrl: './post-item.component.html',\r\n    styleUrls: ['./post-item.component.scss']\r\n})\r\nexport class PostItemComponent implements OnInit, AfterViewInit {\r\n    @Input() post: Post;\r\n    @Input() group;\r\n    @Input() accessedFromGroup = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.post)\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // console.log(this.post)\r\n    }\r\n\r\n}\r\n","export const TEXT_ONLY_PATTERN_WITHOUT_SPECIALS = /^[^`~!@#$%^&*()_+={}\\[\\]|\\\\:;“’<,>.?๐฿0-9]*$/;\r\nexport const NUMBER_AFTER_TEXT_PATTERN = /^[a-zA-Z ]/;\r\nexport const NO_SPACE_PATTERN = /^\\S*$/;\r\nexport const NUMBERS_ONLY = /^[0-9]*$/;\r\nexport const FOUR_DIGIT_NUMBERS_ONLY = /^[0-9]{4}$/;\r\nexport const TEXT_ONLY_WITH_SPECIALS_PATTERN = /^[a-zA-Z -/]*$/;\r\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nexport const METL_URL_PATTERN = /(http|https):\\/\\/metl.tv(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\nexport const URL_PATTERN = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {Post} from '@shared/models/post';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PostsStoreService {\r\n    private allPostsSource = new BehaviorSubject([]);\r\n    allPosts$ = this.allPostsSource.asObservable();\r\n\r\n    private userPostsSource = new BehaviorSubject([]);\r\n    userPosts$ = this.userPostsSource.asObservable();\r\n\r\n    get allPosts() {\r\n        return this.allPostsSource.getValue();\r\n    }\r\n\r\n\r\n    constructor() {\r\n    }\r\n\r\n    setAllPosts(posts: Post[]) {\r\n        this.allPostsSource.next(posts);\r\n    }\r\n}\r\n","<div id=\"post-form-container\">\r\n    <form>\r\n        <div class=\"user-avatar\" *ngIf=\"(userStore.authUser$|async) as authUser\">\r\n            <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        </div>\r\n\r\n        <div class=\"form-controls\">\r\n            <textarea placeholder=\"Create a public post...\" routerLink=\"/posts/create\"\r\n                      [queryParams]=\"{group_id: selectedGroup?.id}\"></textarea>\r\n\r\n            <div class=\"action-btn-wrap\">\r\n                <button>\r\n                    <img src=\"assets/img/photo-green-small.svg\">\r\n                    <span>Add photo/video</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\n\r\n@Component({\r\n    selector: 'app-post-form-placeholder',\r\n    templateUrl: './post-form-placeholder.component.html',\r\n    styleUrls: ['./post-form-placeholder.component.scss']\r\n})\r\nexport class PostFormPlaceholderComponent implements OnInit {\r\n    @Input() selectedGroup;\r\n\r\n    constructor(\r\n        public userStore: UserStoreService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n"]}