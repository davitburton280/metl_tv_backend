{"version":3,"sources":["webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/shared/directives/fix-group-page-url.directive.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/shared/directives/disable-control-properly.directive.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.ts","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.html","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.ts","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.html","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/groups.module.ts"],"names":["CreateNewGroupDialogComponent","GroupItemComponent","FixGroupPageUrlDirective","authUser","fb","dialog","groupsService","socketService","groupsStore","lowerCaseRemoveSpaces","subscriptions","this","initForm","groupForm","group","name","required","custom_name","privacy","creator_id","id","username","patchValue","transform","value","formValue","valid","push","addGroup","subscribe","dt","selectedGroup","find","d","setGroups","selectGroup","setNewPageGroup","close","closeDialog","submitForm","router","url","replace","navigate","ShowGroupsComponent","DisableControlProperlyDirective","chatService","userStore","_userInfoService","groups","_getAuthInfo","trackGroups","groups$","_userInfo","data","console","log","type","filter","g","open","width","height","afterClosed","navigateByUrl","openModal","control","condition","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","checked","status","event","target","foundControl","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","SingleGroupComponent","route","isEmptyObj","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","getUserGroupConnStatus","params","passedGroupName","getGroupFromStore","getGroupFromServer","getGroupByCustomName","joinGroup","link","rest","leaveGroup","member_id","leavePageGroup","group_type","leavePageGroupNotify","length","member","leftGroups","removeFromPageGroupNotify","component","GroupMembersActionsMenuComponent","notificationsStore","adminRequestSent","moderatorRequestSent","sendMakeAdminRequest","removeGroupMember","removeFromPageGroup","removeAdminPrivileges","removePageGroupAdminPrivileges","is_admin","is_moderator","removeMember","AdminsListComponent","admin","user","connection","admins","a","isGroupCreator","authUserGroupConnection","getUserGroupConnection","GroupMembersListComponent","getAcceptedPageGroupAdminRequest","getDeclinedPageGroupAdminRequest","notification","updateNotifications","MemberRequestsListComponent","confirmGroupJoin","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","MediaTabComponent","AboutTabComponent","PeopleTabComponent","members","requestedMembers","getRemovedPageGroupAdminPrivileges","filterMembers","PostsTabComponent","GroupsRoutingModule","GroupsModule","routes","path","title","children","postsService","trackByElement","getGroupPosts","groupPosts$","forChild"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-create-new-group-dialog',\r\n    templateUrl: './create-new-group-dialog.component.html',\r\n    styleUrls: ['./create-new-group-dialog.component.scss']\r\n})\r\nexport class CreateNewGroupDialogComponent implements OnInit {\r\n    groupForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private fb: FormBuilder,\r\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService,\r\n        private groupsStore: GroupsStoreService,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.groupForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            custom_name: ['', Validators.required],\r\n            privacy: ['0'],\r\n            creator_id: this.authUser.id,\r\n            username: this.authUser.username\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\r\n        const formValue = this.groupForm.value;\r\n        if (this.groupForm.valid) {\r\n            this.subscriptions.push(this.groupsService.addGroup(formValue).subscribe(async (dt) => {\r\n                const selectedGroup = dt.find(d => formValue.name === d.name);\r\n                this.groupsStore.setGroups(dt);\r\n                this.groupsStore.selectGroup(selectedGroup);\r\n                this.socketService.setNewPageGroup(formValue);\r\n                this.dialog.close(this.groupForm.value);\r\n            }));\r\n        }\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close(null);\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\n\r\n@Component({\r\n    selector: 'app-group-item',\r\n    templateUrl: './group-item.component.html',\r\n    styleUrls: ['./group-item.component.scss']\r\n})\r\nexport class GroupItemComponent implements OnInit {\r\n    @Input() group;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getUrl() {\r\n        const url = '/groups/' + this.group.name.replace(' /g', '_') + '/about';\r\n        return this.lowerCaseRemoveSpaces.transform(url);\r\n    }\r\n\r\n}\r\n","import {Directive, HostListener, Input} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[appNavigateToFixedGroupUrl]'\r\n})\r\nexport class FixGroupPageUrlDirective {\r\n\r\n    @Input() name;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private router: Router\r\n    ) {\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    async onClick() {\r\n        const url = '/groups/' + this.name.replace(' /g', '_') + '/people';\r\n        await this.router.navigate([this.lowerCaseRemoveSpaces.transform(url)]);\r\n    }\r\n\r\n}\r\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <div id=\"admin-info\">\r\n        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>\r\n    </div>\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"field-row\">\r\n            <label for=\"group-name-input\">Group name</label>\r\n            <input id=\"group-name-input\" formControlName=\"name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label for=\"privacy-types\">Choose privacy</label>\r\n            <select id=\"privacy-types\" formControlName=\"privacy\">\r\n                <option class=\"backOption\" value=\"0\">Public</option>\r\n                <option class=\"backOption\" value=\"1\">Private</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","<div appNavigateToFixedGroupUrl [name]=\"group.name\" class=\"groupMessageDiv\">\r\n    <div class=\"img-wrap\">\r\n        <img class=\"groupMessageImg\" [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n    </div>\r\n    <div class=\"group-name-wrap\">\r\n        <strong>{{group.name}}</strong>\r\n    </div>\r\n</div>\r\n","<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you manage</h3>\r\n<ul class=\"ulBorderBottom\">\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('managed')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n<h3 class=\"groups-type-title bottomClass\">Groups you've joined</h3>\r\n<ul>\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('joined')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Router} from '@angular/router';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-show-groups',\r\n    templateUrl: './show-groups.component.html',\r\n    styleUrls: ['./show-groups.component.scss']\r\n})\r\nexport class ShowGroupsComponent implements OnInit {\r\n    authUser: CurrentUserData;\r\n    groups = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public groupsStore: GroupsStoreService,\r\n        private chatService: ChatService,\r\n        private userStore: UserStoreService,\r\n        private socketService: SocketIoService,\r\n        public router: Router,\r\n        private dialog: MatDialog,\r\n        private _userInfoService: UserInfoService,\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.getAuthUser();\r\n        this.trackGroups();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.groups$.subscribe(dt => {\r\n            this.groups = dt;\r\n        }));\r\n    }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Show Group  AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    // getAuthUser() {\r\n    //     this.userStore.authUser$.subscribe(user => {\r\n    //         this.authUser = user;\r\n    //     });\r\n    // }\r\n\r\n    filterGroups(type) {\r\n        return this.groups.filter(g => {\r\n            return type === 'managed' ?\r\n                g.creator_id === this.authUser.id :\r\n                g.creator_id !== this.authUser.id;\r\n        });\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(CreateNewGroupDialogComponent, {\r\n            width: '500px',\r\n            height: '450px',\r\n            data: this.authUser\r\n        }).afterClosed().subscribe(async (selectedGroup) => {\r\n            if (selectedGroup) {\r\n                await this.router.navigateByUrl('/groups/' + selectedGroup.custom_name + '/people');\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import {Directive, Injector, Input, Self} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[disableControl]'\r\n})\r\nexport class DisableControlProperlyDirective {\r\n\r\n    @Input() set disableControl({condition, control}) {\r\n        const action = condition ? 'disable' : 'enable';\r\n        control?.[action]();\r\n    }\r\n\r\n\r\n}\r\n","<div id=\"dialog-header\">\r\n    <h3>Invite contacts to this group</h3>\r\n    <div>\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n</div>\r\n<form [formGroup]=\"contactsInviteForm\">\r\n    <div id=\"group-members-wrap\">\r\n        <div id=\"suggested-contacts\">\r\n            <div id=\"contact-search-wrap\">\r\n                <input placeholder=\"Find a contact\">\r\n                <i class=\"fas fa-search\"></i>\r\n            </div>\r\n\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\r\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"'contact_'+control.value.i\">\r\n                            <div class=\"avatar-wrap\">\r\n                                <img class=\"avatar\"\r\n                                     [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\r\n                                <p class=\"contact-status\"\r\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <label>\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"hidden\" formControlName=\"name\">\r\n                            <input type=\"checkbox\" formControlName=\"checked\"\r\n                                   [id]=\"'contact_'+control.value.id\"\r\n                                   (change)=\"selectContact($event,control)\"\r\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\r\n                            >\r\n                            <span></span>\r\n                        </label>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"selected-contacts\">\r\n            <p id=\"selected-contacts-count\" *ngIf=\"selectedContacts.length as length\">\r\n                {{length + ' ' + (length === 1 ? 'contact' : 'contacts')}}  selected\r\n            </p>\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"control.value.id+'_'+i\">\r\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <button id=\"remove-from-selected-contacts-btn\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div id=\"dialog-actions\">\r\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {Subscription} from 'rxjs';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-invitation-dialog',\r\n    templateUrl: './group-members-invitation-dialog.component.html',\r\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\r\n})\r\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\r\n    selectedGroup;\r\n    userContacts: User[] = [];\r\n    selectedContacts: User[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    contactsInviteForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private groupsStore: GroupsStoreService,\r\n        private usersMessagesStore: UsersMessagesSubjectService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\r\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\r\n        private fb: FormBuilder\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedGroup = this.groupsStore.selectedGroup;\r\n        this.initForm();\r\n    }\r\n\r\n\r\n    initForm() {\r\n        this.contactsInviteForm = this.fb.group({\r\n            contacts: this.fb.array(this.getContactsFormGroup()),\r\n        });\r\n    }\r\n\r\n    getContactsFormGroup() {\r\n        const formArray = [];\r\n        this.usersMessagesStore.usersMessages.map((c, index) => {\r\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\r\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\r\n            let connectionWithGroup = 'not joined';\r\n\r\n            if (foundInGroup) {\r\n                const connectionContainer = foundInGroup.groups_members;\r\n\r\n                if (foundInGroup) {\r\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\r\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\r\n                        connectionWithGroup = 'accepted';\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            formArray.push(this.fb.group({\r\n                name: 'contact_' + index,\r\n                checked: !!foundInSelected,\r\n                status: connectionWithGroup,\r\n                ...c\r\n            }));\r\n        });\r\n        return formArray;\r\n    }\r\n\r\n    selectContact(event: Event, control: AbstractControl) {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.selectedContacts.push(control.value);\r\n        } else {\r\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        }\r\n    }\r\n\r\n    removeContactFromSelected(control: AbstractControl) {\r\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\r\n        this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        foundControl.patchValue({checked: false});\r\n    }\r\n\r\n    sendInvitationsToContacts() {\r\n        this.subscriptions.push(this.groupsService.addGroupMembers({\r\n            group_id: this.selectedGroup.id,\r\n            member_ids: this.selectedContacts.map(c => c.id)\r\n        }).subscribe(dt => {\r\n            this.socketService.inviteToNewPageGroup({\r\n                invited_members: this.selectedContacts,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsStore.changeGroup(dt);\r\n            this.closeDialog();\r\n        }));\r\n    }\r\n\r\n    isProcessedContact(status) {\r\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\r\n    }\r\n\r\n    get contactCtrls() {\r\n        return this.contactsInviteForm.controls.contacts as FormArray;\r\n    }\r\n\r\n    get checkedContactCtrls() {\r\n        return this.contactCtrls.controls.filter(c => c.value.checked);\r\n    }\r\n\r\n    getCheckBoxControl(control) {\r\n        return control.controls.checked;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"selectedGroup\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div id=\"group-cover-image\">\r\n            <img [src]=\"selectedGroup?.cover|getImgPath:'images'\">\r\n        </div>\r\n\r\n        <div class=\"row groupsRow\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {User} from '@shared/models/user';\r\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-single-group',\r\n    templateUrl: './single-group.component.html',\r\n    styleUrls: ['./single-group.component.scss']\r\n})\r\nexport class SingleGroupComponent implements OnInit, OnDestroy {\r\n    authUser: CurrentUserData;\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    selectedGroup;\r\n    isOwnGroup = false;\r\n    passedGroupName: string;\r\n    groupTabs = GROUP_PAGE_TABS;\r\n    groupPrivacy = 'public';\r\n\r\n    userGroupConnStatus = 'not connected';\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private route: ActivatedRoute,\r\n        // private userStore: UserStoreService,\r\n        private dialog: MatDialog,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        private socketService: SocketIoService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackSelectedGroup();\r\n        // this.getAuthUser();\r\n        this.getSelectedGroup();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getConfirmedJoinGroup();\r\n        this.getIgnoredJoinGroup();\r\n        this.getJoinGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n    }\r\n\r\n    // getAuthUser() {\r\n    //     this.subscriptions.push(this.userStore.authUser$.subscribe(user => {\r\n    //         this.authUser = user;\r\n    //     }));\r\n    // }\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n            console.log(this.authUser, 'Single group AUTHUSER DATA');\r\n        });\r\n    }\r\n\r\n    trackSelectedGroup() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\r\n            this.selectedGroup = dt;\r\n            this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\r\n            // console.log(this.selectedGroup, this.groupPrivacy);\r\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\r\n                this.getUserGroupConnStatus();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.name;\r\n\r\n            if (!this.getGroupFromStore()) {\r\n                this.getGroupFromServer();\r\n            }\r\n        });\r\n    }\r\n\r\n    getGroupFromStore() {\r\n        this.selectedGroup = this.groupsStore.groups.find(g => {\r\n            const groupName = this.lowerCaseRemoveSpaces.transform(g.name);\r\n            return groupName === this.passedGroupName;\r\n        });\r\n        if (this.selectedGroup) {\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        }\r\n        return !!this.selectedGroup;\r\n    }\r\n\r\n    getGroupFromServer() {\r\n        this.groupsService.getGroupByCustomName({custom_name: this.passedGroupName}).subscribe(dt => {\r\n            this.selectedGroup = dt;\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        });\r\n    }\r\n\r\n    joinGroup() {\r\n        console.log(this.selectedGroup);\r\n        this.groupsService.joinGroup({\r\n            member_ids: [this.authUser.id],\r\n            group_id: this.selectedGroup.id,\r\n            accepted: 1\r\n        }).subscribe(dt => {\r\n            this.userGroupConnStatus = 'unconfirmed';\r\n\r\n            this.socketService.joinGroup({\r\n                group: this.selectedGroup,\r\n                from_user: this.authUser,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n\r\n            this.groupsStore.changeGroup(dt);\r\n        });\r\n    }\r\n\r\n    getJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('get joined', rest.group);\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    this.groupsStore.setGroups(dt);\r\n                    this.socketService.leavePageGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n                // console.log(this.selectedGroup);\r\n                // this.groupsStore.selectGroup({});\r\n            }\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedMembersCount() {\r\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('confirmed in group page', data);\r\n            this.userGroupConnStatus = 'confirmed';\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getIgnoredJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('ignored in group page', rest);\r\n            if (rest.member.id === this.authUser.id) {\r\n                this.groupsStore.setGroups(rest.leftGroups);\r\n                this.groupsStore.selectGroup(rest.group);\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\r\n            const {member, leftGroups} = data;\r\n            console.log('removed from group in group page', data);\r\n            this.groupsStore.changeGroup(data.group);\r\n            if (member.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n            // console.log(this.groupsMessagesStore.groupsMessages)\r\n            // }\r\n        }));\r\n    }\r\n\r\n    getUserGroupConnStatus() {\r\n        this.selectedGroup.group_members?.map(m => {\r\n            if (m.id === this.authUser.id) {\r\n                if (m.groups_members.confirmed === 1) {\r\n                    this.userGroupConnStatus = 'confirmed';\r\n                } else {\r\n                    if (m.groups_members.accepted === 1) {\r\n                        this.userGroupConnStatus = 'unconfirmed';\r\n                    } else {\r\n                        this.userGroupConnStatus = 'not connected';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    showJoinBtn() {\r\n        return !this.isOwnGroup;\r\n    }\r\n\r\n    onOutletLoaded(component) {\r\n        if (this.selectedGroup) {\r\n            component.selectedGroup = this.selectedGroup;\r\n            component.isOwnGroup = this.isOwnGroup;\r\n            component.authUser = this.authUser;\r\n        }\r\n    }\r\n\r\n    openMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\r\n            height: '690px',\r\n            width: '950px',\r\n            data: this.authUser,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div>\r\n    <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\r\n        <i class=\"fas fa-ellipsis-h\"></i>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button id=\"make-admin\" mat-menu-item\r\n                *ngIf=\"!isAdmin(member) && !adminRequestSent\"\r\n                (click)=\"makeAdmin(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make admin</span>\r\n        </button>\r\n        <button id=\"remove-make-admin\" mat-menu-item *ngIf=\"isAdmin(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group admin privileges</span>\r\n        </button>\r\n        <button id=\"remove-make-moderator\" mat-menu-item\r\n                *ngIf=\"isModerator(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group moderator privileges</span>\r\n        </button>\r\n        <button id=\"make-moderator\" *ngIf=\"!isModerator(member) && !moderatorRequestSent\" mat-menu-item\r\n                (click)=\"makeAdmin(member,'moderator')\"\r\n                [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make moderator</span>\r\n        </button>\r\n        <button id=\"remove-member-btn\" mat-menu-item [disableRipple]=\"true\" (click)=\"removeMember(member)\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-group-members-actions-menu',\r\n    templateUrl: './group-members-actions-menu.component.html',\r\n    styleUrls: ['./group-members-actions-menu.component.scss']\r\n})\r\nexport class GroupMembersActionsMenuComponent implements OnInit, OnDestroy {\r\n    @Input() member;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    adminRequestSent = false;\r\n    moderatorRequestSent = false;\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private dialog: MatDialog,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    makeAdmin(member, type = 'admin') {\r\n        console.log('make admin', member)\r\n        this.socketService.sendMakeAdminRequest({\r\n            from_user: this.authUser,\r\n            group: this.selectedGroup,\r\n            member,\r\n            type,\r\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                invites you to become ${type === 'admin' ? 'an admin' : 'a moderator'}\r\n                 for the <strong>${this.selectedGroup.name}</strong> group`\r\n        });\r\n\r\n        this.adminRequestSent = type === 'admin';\r\n        this.moderatorRequestSent = type === 'moderator';\r\n    }\r\n\r\n    removeMember(member) {\r\n        console.log('remove')\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromPageGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    removeAdminPrivileges(member, type = 'admin') {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.subscriptions.push(this.groupsService.removeAdminPrivileges({\r\n                    member_id: member.id,\r\n                    group_id: this.selectedGroup.id\r\n                }).subscribe(dt => {\r\n                    this.socketService.removePageGroupAdminPrivileges({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed ${type}  privileges of <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       for the <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                    this.groupsStore.changeGroup(dt);\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    makeModerator(member) {\r\n\r\n    }\r\n\r\n    isAdmin(member) {\r\n        return member.groups_members.is_admin;\r\n    }\r\n\r\n    isModerator(member) {\r\n        return member.groups_members.is_moderator;\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"admins\">\r\n    <strong>Admins & moderators</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let admin of admins\">\r\n            <div class=\"details\">\r\n                <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'images'\">\r\n                <div>\r\n                    <p class=\"full-name\" [routerLink]=\"'/users/'+admin.username\">\r\n                        {{admin.first_name + ' ' + admin.last_name}}\r\n                    </p>\r\n                    <span class=\"role\">{{getRoleName(admin)}}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <app-group-members-actions-menu *ngIf=\"showActionsMenu(admin)\"\r\n                                            [member]=\"admin\"\r\n                                            [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            [isOwnGroup]=\"isOwnGroup\"></app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admins-list',\r\n    templateUrl: './admins-list.component.html',\r\n    styleUrls: ['./admins-list.component.scss']\r\n})\r\nexport class AdminsListComponent implements OnInit {\r\n    @Input() admins;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.authUserGroupConnection)\r\n    }\r\n\r\n    isGroupCreator(admin) {\r\n        return admin.id === this.selectedGroup.creator_id;\r\n    }\r\n\r\n    isGroupAdmin(admin) {\r\n        return !!admin.groups_members.is_admin;\r\n    }\r\n\r\n\r\n    getUserGroupConnection(user) {\r\n        let connection;\r\n        this.admins.map(a => {\r\n            if (a.id === user.id) {\r\n                connection = a.groups_members.is_admin ? 'Admin' : 'Moderator';\r\n\r\n                if (this.isGroupCreator(user)) {\r\n                    connection = 'Group creator';\r\n                }\r\n            }\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    showActionsMenu(admin) {\r\n        if (this.authUserGroupConnection === 'Admin') {\r\n            return !this.isGroupCreator(admin) && (admin.id === this.authUser.id || admin.groups_members.is_moderator);\r\n        } else if (this.authUserGroupConnection === 'Group creator') {\r\n            return !this.isGroupCreator(admin);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getRoleName(admin) {\r\n        return this.getUserGroupConnection(admin);\r\n    }\r\n\r\n    get authUserGroupConnection(): string {\r\n        return this.getUserGroupConnection(this.authUser);\r\n    }\r\n\r\n}\r\n","<div id=\"members\">\r\n    <strong>Members</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let member of members\" [class.rounded]=\"!isOwnGroup\">\r\n            <div class=\"details\">\r\n                <div class=\"avatarDiv\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n                </div>\r\n                <strong class=\"member-name\" [routerLink]=\"'/users/'+member.username\">\r\n                    {{member.first_name + ' ' + member.last_name}}\r\n                </strong>\r\n            </div>\r\n            <app-group-members-actions-menu [member]=\"member\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            *ngIf=\"isOwnGroup\" [isOwnGroup]=\"isOwnGroup\">\r\n            </app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-list',\r\n    templateUrl: './group-members-list.component.html',\r\n    styleUrls: ['./group-members-list.component.scss']\r\n})\r\nexport class GroupMembersListComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() members;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAcceptedPageGroupAdminRequest();\r\n        this.getDeclinedPageGroupAdminRequest();\r\n    }\r\n\r\n\r\n    getAcceptedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getAcceptedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            // console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getDeclinedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getDeclinedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            // this.adminRequestSent = false;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"member-requests\">\r\n    <strong>Requests</strong>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n            <div class=\"requestPartDiv\">\r\n            <div class=\"avatarDiv\">\r\n                <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n            </div>\r\n            <strong class=\"avatarName\">{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <div class=\"confirmIgnoreBtns\">\r\n                <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\n\r\n@Component({\r\n    selector: 'app-member-requests-list',\r\n    templateUrl: './member-requests-list.component.html',\r\n    styleUrls: ['./member-requests-list.component.scss']\r\n})\r\nexport class MemberRequestsListComponent implements OnInit {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() requestedMembers;\r\n    subscriptions = [];\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    confirmJoinGroup(member) {\r\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.confirmJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    ignoreJoinGroup(member) {\r\n        console.log(member);\r\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.ignoreJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n}\r\n","<div class=\"tab-container\">\r\n    <div id=\"all-members-wrap\">\r\n        <app-admins-list [admins]=\"admins\" [authUser]=\"authUser\"\r\n                         [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-admins-list>\r\n        <app-group-members-list [members]=\"members\" [authUser]=\"authUser\"\r\n                                [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-group-members-list>\r\n        <app-member-requests-list *ngIf=\"isOwnGroup\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                  [requestedMembers]=\"requestedMembers\"></app-member-requests-list>\r\n    </div>\r\n</div>\r\n\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    @Input() authUser;\r\n\r\n    admins = [];\r\n    members = [];\r\n    requestedMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    constructor(\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        private chatService: ChatService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroups();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getRemovedPageGroupAdminPrivileges();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\r\n            console.log(dt);\r\n            this.selectedGroup = dt;\r\n            this.admins = [];\r\n            this.members = [];\r\n            this.requestedMembers = [];\r\n\r\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\r\n                this.filterMembers();\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n    filterMembers() {\r\n        this.selectedGroup?.group_members?.map(m => {\r\n            if (this.selectedGroup.creator_id === m.id || m.groups_members.is_admin || m.groups_members.is_moderator) {\r\n                this.admins.push(m);\r\n            } else {\r\n                if (m.groups_members.confirmed) {\r\n                    this.members.push(m);\r\n                } else if (m.groups_members.accepted) {\r\n                    this.requestedMembers.push(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getRemovedPageGroupAdminPrivileges() {\r\n        this.subscriptions.push(this.socketService.getRemovedPageGroupAdminPrivileges().subscribe((data: any) => {\r\n            const {notification, member, group} = data;\r\n            this.notificationsStore.updateNotifications(notification);\r\n            console.log('removed privileges', group);\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-media-tab',\r\n  templateUrl: './media-tab.component.html',\r\n  styleUrls: ['./media-tab.component.scss']\r\n})\r\nexport class MediaTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.isOwnGroup)\r\n    }\r\n\r\n}\r\n","<p>about-tab works!</p>\r\n","<p>media-tab works!</p>\r\n","<app-post-form-placeholder [selectedGroup]=\"selectedGroup\"></app-post-form-placeholder>\r\n<app-post-item *ngFor=\"let post of groupPosts$|async; trackBy: trackByElement\"\r\n               [post]=\"post\" [group]=\"selectedGroup\" [accessedFromGroup]=\"true\">\r\n</app-post-item>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\r\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ShowGroupsComponent,\r\n        data: {\r\n            title: 'Groups'\r\n        },\r\n    },\r\n    {\r\n        path: ':name',\r\n        component: SingleGroupComponent,\r\n        children: [\r\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\r\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\r\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\r\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GroupsRoutingModule {\r\n}\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {Post} from '@shared/models/post';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-posts-tab',\r\n    templateUrl: './posts-tab.component.html',\r\n    styleUrls: ['./posts-tab.component.scss']\r\n})\r\nexport class PostsTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    groupPosts$: Observable<Post[]>;\r\n\r\n\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getGroupPosts();\r\n    }\r\n\r\n    getGroupPosts() {\r\n        this.groupPosts$ = this.postsService.getGroupPosts({group_id: this.selectedGroup.id});\r\n    }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GroupsRoutingModule } from './groups-routing.module';\r\nimport { ShowGroupsComponent } from './show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport { GroupItemComponent } from './show-groups/group-item/group-item.component';\r\nimport { AboutTabComponent } from './single-group/about-tab/about-tab.component';\r\nimport { PeopleTabComponent } from './single-group/people-tab/people-tab.component';\r\nimport { MediaTabComponent } from './single-group/media-tab/media-tab.component';\r\nimport { PostsTabComponent } from './single-group/posts-tab/posts-tab.component';\r\nimport { AdminsListComponent } from './single-group/people-tab/admins-list/admins-list.component';\r\nimport { GroupMembersListComponent } from './single-group/people-tab/group-members-list/group-members-list.component';\r\nimport { MemberRequestsListComponent } from './single-group/people-tab/member-requests-list/member-requests-list.component';\r\nimport { GroupMembersActionsMenuComponent } from './single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ShowGroupsComponent, SingleGroupComponent, GroupItemComponent, AboutTabComponent, PeopleTabComponent, MediaTabComponent, PostsTabComponent, AdminsListComponent, GroupMembersListComponent, MemberRequestsListComponent, GroupMembersActionsMenuComponent],\r\n  imports: [\r\n    CommonModule,\r\n    GroupsRoutingModule,\r\n      SharedModule\r\n  ]\r\n})\r\nexport class GroupsModule { }\r\n"]}