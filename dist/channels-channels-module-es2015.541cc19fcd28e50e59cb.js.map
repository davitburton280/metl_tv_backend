{"version":3,"sources":["webpack:///src/app/channels/show-channel/watchlist-tab/watchlist-tab.component.html","webpack:///src/app/channels/show-channel/watchlist-tab/watchlist-tab.component.ts","webpack:///src/app/channels/show-channel/videos-tab/videos-tab.component.html","webpack:///src/app/channels/show-channel/videos-tab/videos-tab.component.ts","webpack:///src/app/channels/show-channel/playlists-tab/playlists-tab.component.html","webpack:///src/app/channels/show-channel/playlists-tab/playlists-tab.component.ts","webpack:///src/app/channels/show-channel/channel-profile/channel-profile.component.html","webpack:///src/app/channels/show-channel/channel-profile/channel-profile.component.ts","webpack:///src/app/channels/show-channel/about-tab/about-tab.component.html","webpack:///src/app/channels/show-channel/about-tab/about-tab.component.ts","webpack:///src/app/channels/show-channel/show-channel.component.html","webpack:///src/app/channels/channels-routing.module.ts","webpack:///src/app/channels/show-channel/show-channel.component.ts","webpack:///src/app/channels/channels.module.ts"],"names":["WatchlistTabComponent","videoService","subjectService","router","getExactParams","stocksService","getAuthUser","subject","cdr","apiUrl","subscriptions","userStocks","filteredStocks","stocksLoading","this","authUser","transform","search","localStorage","getItem","push","currentUserStocks","pipe","filter","d","initial","subscribe","dt","stocks","s","us","name","toLowerCase","includes","updateFollowedStocks","user_id","id","user_stocks","changeUserStocks","empty","length","detectChanges","e","sendData","order_type","rows","JSON","stringify","dragdrop","updateUserStocksPriority","setItem","hasOwnProperty","token","forEach","unsubscribe","VideosTabComponent","showFilters","filters","userVideos","videosLoaded","getToggleFiltersData","params","channelUser","getUserVideos","videos","PlaylistsTabComponent","playlistsService","dialog","playlists","trackByElement","getPlaylists","getFiltersToggleState","get","channel_id","channel","open","data","afterClosed","playlist","firstVideoId","navigate","queryParams","playlist_id","channelId","confirmed","removePlaylist","$event","preventDefault","ChannelProfileComponent","usersService","userStore","base64ToFile","channelService","usersConnectionsStore","groupsMessagesStore","notificationsStore","socketService","loader","fb","subscribedToChannel","subscribersCount","changingImage","editMode","attemptedToConnect","isBlocked","usersConnectionStatus","checkChannelSubscription","initChannelForm","checkIfUsersConnected","getAcceptedDeclinedRequests","getConnectWithUser","getDisconnectUsers","cancelledUsersConnecting","getBlockUnblockUser","getConnectionsChanges","usersMessages$","console","log","acceptedConnection","to_user","from_user","declinedConnection","channelForm","group","avatar","cover","required","username","patchValue","channel_user_id","usersConnection","is_blocked","event","coverChangedEvent","profileChangedEvent","dataLoading","profileBase64","base64","filename","Date","now","fd","FormData","append","changeProfileImage","changeAuthUserInfo","coverBase64","changeCoverImage","subscribeToChannel","status","subscribers_count","getUserChannelSubscriptions","setUserSubscriptions","setAuthUser","value","valid","changeChannelDetails","foundUserMessages","usersMessages","find","um","showBottomChatBox","changeUser","connectWithUser","msg","first_name","last_name","connection","cancelUsersConnecting","connection_id","disconnectUsers","test","detectImageChange","AboutTabComponent","fixLineBreaks","aboutForm","description","maxLength","saveDescription","document","querySelector","innerHTML","saveChannelDescription","routes","path","component","ShowChannelComponent","route","auth","updateStocks","usersMessagesStore","toastr","chatService","allTabs","showChatBox","passedUsername","snapshot","passedTab","tab","searchVideosForm","activeTab","tabs","getUserInfo","setToggleFiltersData","channelLoading","own_channel","watchListTab","getSearchResults","searchInUserVideos","searchInPlaylists","videosTab","playlistsTab","tag","maxWidth","maxHeight","height","width","panelClass","stock","result","isStockFollowed","title","ChannelsRoutingModule","forChild","ChannelsModule"],"mappings":"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","file":"x","sourcesContent":["<div *ngIf=\"filteredStocks && channelUser.username === authUser.username\">\r\n    <mat-spinner *ngIf=\"stocksLoading==='loading'\" [diameter]=\"20\"></mat-spinner>\r\n    <small class=\"error\" *ngIf=\"userStocks?.length === 0 && stocksLoading==='finished'\">\r\n        No stocks added to watchlist</small>\r\n    <app-stock-tiles [stocks]=\"filteredStocks\" [userStocks]=\"userStocks\" *ngIf=\"userStocks?.length > 0\"\r\n                     (updatedStocksList)=\"saveUpdatedStocksList($event)\" [followingAllowed]=\"true\"\r\n                     (updatedStocksPriority)=\"updateStocksPriority($event)\"\r\n    ></app-stock-tiles>\r\n</div>\r\n","import {ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {User} from '@shared/models/user';\r\nimport {updateStockDetails} from '@core/helpers/update-stock-details';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport {filter} from 'rxjs/operators';\r\nimport {Stock} from '@shared/models/stock';\r\n\r\n@Component({\r\n    selector: 'app-watchlist-tab',\r\n    templateUrl: './watchlist-tab.component.html',\r\n    styleUrls: ['./watchlist-tab.component.scss']\r\n})\r\nexport class WatchlistTabComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n    authUser: User;\r\n    search: string | null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    userStocks: Stock[] = [];\r\n    filteredStocks: Stock[] = [];\r\n\r\n    stocksLoading = 'idle';\r\n\r\n\r\n    @Input('channelUser') channelUser;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private subjectService: SubjectService,\r\n        public router: Router,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe,\r\n        private stocksService: StocksService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.search = localStorage.getItem('searchStock');\r\n        this.stocksLoading = 'loading';\r\n        this.subscriptions.push(\r\n            this.subject.currentUserStocks\r\n                .pipe(filter(d => !d.initial))\r\n                .subscribe(dt => {\r\n                    this.userStocks = dt.stocks;\r\n                    this.filteredStocks = this.userStocks;\r\n                    this.stocksLoading = 'finished';\r\n                }));\r\n    }\r\n\r\n    getSearchResults(s) {\r\n        this.search = s;\r\n        if (s.search) {\r\n            this.filteredStocks = this.userStocks.filter(us => us.name.toLowerCase().includes(s.search));\r\n        } else {\r\n            this.filteredStocks = this.userStocks;\r\n        }\r\n    }\r\n\r\n    saveUpdatedStocksList(stocks) {\r\n        this.stocksLoading = 'loading';\r\n        this.subscriptions.push(this.stocksService.updateFollowedStocks({\r\n            user_id: this.authUser.id,\r\n            ...{stocks}\r\n        }).subscribe(dt => {\r\n            this.userStocks = dt?.user_stocks || [];\r\n            this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n            this.stocksLoading = 'finished';\r\n            this.cdr.detectChanges();\r\n        }));\r\n    }\r\n\r\n    updateStocksPriority(e) {\r\n        const sendData = {\r\n            order_type: 'custom',\r\n            rows: JSON.stringify(e),\r\n            user_id: this.authUser.id\r\n        };\r\n\r\n        this.subject.changeUserStocks({stocks: e, dragdrop: true});\r\n        this.stocksService.updateUserStocksPriority(sendData).subscribe(dt => {\r\n            localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<app-video-filters *ngIf=\"showFilters\" (filter)=\"getFilteredVideos($event)\"></app-video-filters>\r\n<app-videos-list-holder [videos]=\"channelUser.videos\" [removable]=\"authUser.username === channelUser.username\"></app-videos-list-holder>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\n\r\n@Component({\r\n    selector: 'app-videos-tab',\r\n    templateUrl: './videos-tab.component.html',\r\n    styleUrls: ['./videos-tab.component.scss']\r\n})\r\nexport class VideosTabComponent implements OnInit {\r\n\r\n    apiUrl = API_URL;\r\n    showFilters = false;\r\n    search = '';\r\n    filters = null;\r\n    userVideos = [];\r\n    videosLoaded = false;\r\n\r\n    @Input('channelUser') channelUser;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private videoService: VideoService,\r\n        private subjectService: SubjectService,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.showFilters = dt;\r\n        });\r\n    }\r\n\r\n    getUserVideos(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n        params.user_id = this.channelUser.id;\r\n        this.videoService.getUserVideos(params).subscribe(dt => {\r\n            this.videosLoaded = true;\r\n            this.channelUser.videos = dt?.videos;\r\n        });\r\n    }\r\n\r\n    getSearchResults(s) {\r\n        this.search = s;\r\n        this.getUserVideos({search: this.search, filters: this.filters});\r\n    }\r\n\r\n    getFilteredVideos(e) {\r\n        this.filters = e;\r\n        this.getUserVideos({search: this.search, filters: this.filters});\r\n    }\r\n\r\n}\r\n","<app-video-filters *ngIf=\"showFilters\" (filter)=\"getFilteredPlaylists($event)\"></app-video-filters>\r\n<div class=\"playlist-tab\">\r\n    <ng-container *ngIf=\"authUser.username === channelUser.username\">\r\n        <button class=\"btn new-playlist\" (click)=\"openAddPlaylistModal()\">Add New Playlist</button>\r\n        <table *ngIf=\"playlists.length > 0\" class=\"table-responsive\">\r\n            <tr>\r\n                <th>Playlist</th>\r\n                <th>Visibility</th>\r\n                <th>Created at</th>\r\n                <th>Last updated</th>\r\n                <th>Video count</th>\r\n                <th></th>\r\n            </tr>\r\n            <tr *ngFor=\"let playlist of playlists; trackBy:trackByElement\">\r\n                <td>\r\n                    <div class=\"img-info\">\r\n                        <img class=\"thumbnail\" [src]=\"playlist.thumbnail|getImgPath\" (click)=\"goToEditPage(playlist)\">\r\n                        <div class=\"info\">\r\n                            <h3>{{playlist.name}}</h3>\r\n                            <p>{{playlist.description}}</p>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <ng-container *ngIf=\"playlist.privacy\">\r\n                        <mat-icon>visibility_off</mat-icon>\r\n                        <span>Private</span>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!playlist.privacy\">\r\n                        <mat-icon>visibility_on</mat-icon>\r\n                        <span>Public</span>\r\n                    </ng-container>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.created_at|date: 'd MMM, yyyy'}}</span>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.updated_at|date: 'd MMM, yyyy'}}</span>\r\n                </td>\r\n                <td>\r\n                    <span>{{playlist.videos.length}}</span>\r\n                </td>\r\n                <td>\r\n                    <span class=\"material-icons\" (click)=\"goToEditPage(playlist)\">create</span>\r\n                    <mat-icon (click)=\"removePlaylist(playlist.id, channelUser.id)\">delete</mat-icon>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"authUser.username !== channelUser.username\">\r\n        <div class=\"playlists-items\">\r\n            <ng-container *ngFor=\"let playlist of playlists\">\r\n                <div class=\"item\" >\r\n                    <div class=\"top-wrap\" (click)=\"openPlaylistPage(playlist, playlist.videos[0]?.id)\">\r\n                        <img class=\"thumbnail\" [src]=\"playlist.thumbnail|getImgPath\">\r\n                        <div class=\"overlay-info\">\r\n                            <p class=\"icon\"><span class=\"material-icons\">playlist_play</span></p>\r\n                            <p>{{playlist.name}}</p>\r\n                            <p class=\"video-count\">{{playlist.videos.length + (playlist.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"info\">\r\n                        <h2>{{playlist.name}}</h2>\r\n                        <p>{{playlist.description}}</p>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n\r\n    </ng-container>\r\n    <div id=\"no-playlists-found\" *ngIf=\"playlists.length === 0\">\r\n        <small class=\"error\">No playlists found for this channel</small>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {AddPlaylistDialogComponent} from '@core/components/modals/add-playlist-dialog/add-playlist-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-playlists-tab',\r\n    templateUrl: './playlists-tab.component.html',\r\n    styleUrls: ['./playlists-tab.component.scss']\r\n})\r\nexport class PlaylistsTabComponent implements OnInit {\r\n    playlists = [];\r\n    apiUrl = API_URL;\r\n    showFilters = false;\r\n    search = '';\r\n    filters = null;\r\n    subscriptions: Subscription[] = [];\r\n    trackByElement = trackByElement;\r\n    @Input('channelUser') channelUser;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private playlistsService: PlaylistsService,\r\n        private subjectService: SubjectService,\r\n        private dialog: MatDialog,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.search = localStorage.getItem('search');\r\n        this.getPlaylists({search: this.search, filters: this.filters});\r\n        this.getFiltersToggleState();\r\n    }\r\n\r\n    getFiltersToggleState() {\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.showFilters = dt;\r\n        }));\r\n    }\r\n\r\n\r\n    getPlaylists(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.playlistsService.get({\r\n            channel_id: this.channelUser.channel.id,\r\n            user_id: this.authUser.id, ...params\r\n        }).subscribe(dt => {\r\n            this.playlists = dt;\r\n            // console.log(this.authUser, this.channelUser)\r\n        });\r\n    }\r\n\r\n    openAddPlaylistModal() {\r\n        this.dialog.open(AddPlaylistDialogComponent,\r\n            {\r\n                data: {channel_id: this.channelUser.channel.id}\r\n            })\r\n            .afterClosed().subscribe(dt => {\r\n            this.getPlaylists({search: this.search, filters: this.filters});\r\n        });\r\n    }\r\n\r\n    openPlaylistPage(playlist, firstVideoId) {\r\n        const route = 'videos/play';\r\n        const params = {id: firstVideoId, playlist_id: playlist.id};\r\n        this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n    getSearchResults(search) {\r\n        this.search = search;\r\n        this.getPlaylists({search, filters: this.filters});\r\n    }\r\n\r\n    getFilteredPlaylists(filters) {\r\n        this.filters = filters;\r\n        this.getPlaylists({search: this.search, filters});\r\n    }\r\n\r\n    goToEditPage(playlist) {\r\n        this.router.navigate(['playlists/single/' + playlist.id]);\r\n    }\r\n\r\n    removePlaylist(id, channelId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removePlaylist({id, channel_id: channelId}).subscribe(dt => {\r\n                    this.getPlaylists({search: this.search, filters: this.filters});\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"channelForm\">\r\n    <div class=\"profile-block\">\r\n        <div [hidden]=\"true\" *ngIf=\"channelUser.username === authUser.username\">\r\n            <input type=\"file\" id=\"cover-image-input\" (change)=\"coverChangeEvent($event)\"/>\r\n            <input type=\"hidden\" formControlName=\"cover\">\r\n            <ngx-photo-editor\r\n                [imageChanedEvent]=\"coverChangedEvent\"\r\n                (imageCropped)=\"coverCropped($event)\"\r\n                [autoCrop]=\"false\"\r\n                [viewMode]=\"3\"></ngx-photo-editor>\r\n        </div>\r\n\r\n        <div class=\"cover-image-container\">\r\n            <label for=\"cover-image-input\">\r\n                <img id=\"cover-image\" [src]=\"channelUser.channel?.cover|getImgPath: 'covers'\"\r\n                     (load)=\"detectImageChange()\">\r\n            </label>\r\n            <button mat-icon-button type=\"button\" class=\"remove-cover-btn\" (click)=\"removeCover()\"\r\n                    *ngIf=\"editMode && channelUser.channel.cover\">\r\n                <mat-icon>clear</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"sub-block\">\r\n        <div id=\"channel-name-avatar\">\r\n            <div class=\"avatar-container\">\r\n                <label for=\"profile-image-input\">\r\n                    <img class=\"avatar\" [ngStyle]=\"{opacity: editMode ? 0.5: 1}\" id=\"profile-image\"\r\n                         (load)=\"detectImageChange()\"\r\n                         [src]=\"channelUser.channel.avatar|getImgPath: 'avatars'\">\r\n                    <mat-icon id=\"add-photo-btn\" *ngIf=\"editMode && !channelUser.channel.avatar\">add</mat-icon>\r\n                </label>\r\n                <mat-icon (click)=\"removeAvatar()\" class=\"remove-avatar-btn\"\r\n                          *ngIf=\"editMode && channelUser.channel.avatar\">clear\r\n                </mat-icon>\r\n            </div>\r\n\r\n            <div [hidden]=\"true\" *ngIf=\"this.channelUser.username === this.authUser.username\">\r\n                <input type=\"file\" id=\"profile-image-input\" (change)=\"profileChangeEvent($event)\"/>\r\n                <input type=\"hidden\" formControlName=\"avatar\">\r\n                <ngx-photo-editor\r\n                    [imageChanedEvent]=\"profileChangedEvent\"\r\n                    (imageCropped)=\"profileCropped($event)\"\r\n                    [aspectRatio]=\"4/3\"\r\n                    [viewMode]=\"1\"\r\n                    [resizeToWidth]=\"500\"></ngx-photo-editor>\r\n\r\n            </div>\r\n            <div>\r\n                <p class=\"channel-name\" id=\"channel-name\" *ngIf=\"!editMode\">{{channelUser.channel.name}}</p>\r\n                <mat-form-field *ngIf=\"editMode\">\r\n                    <input matInput formControlName=\"name\" id=\"channel-name-input\"\r\n                           (keyup.enter)=\"$event.preventDefault()\">\r\n                </mat-form-field>\r\n                <p class=\"subscribers-count\">{{subscribersCount + ' subscriber' + (subscribersCount === 1 ? '' : 's')}} </p>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"loader\" *ngIf=\"changingImage\">\r\n            <mat-spinner [diameter]=\"50\"></mat-spinner>\r\n        </div>\r\n        <div id=\"connection-status-buttons\"  *ngIf=\"channelUser.username !== authUser.username\">\r\n            <!--            <i class=\"sub-bell fas fa-bell\"></i>-->\r\n            <a class=\"add-friend-btn\" (click)=\"connectWithUser()\"\r\n               *ngIf=\"usersConnectionStatus==='idle'\">\r\n                <mat-icon>person_add</mat-icon>\r\n                <span>Connect</span>\r\n            </a>\r\n\r\n            <a class=\"waiting-for-confirmation-btn\"\r\n               *ngIf=\"usersConnectionStatus==='pending'\" [matMenuTriggerFor]=\"pendingMenu\">\r\n                <mat-icon>check</mat-icon>\r\n                <span>Waiting for confirmation</span>\r\n            </a>\r\n\r\n            <mat-menu #pendingMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"cancelUsersConnecting(usersConnection)\">\r\n                    <mat-icon>close</mat-icon>\r\n                    <span>Cancel</span>\r\n                </button>\r\n            </mat-menu>\r\n\r\n            <button class=\"users-connected-btn\" *ngIf=\"usersConnectionStatus==='connected' \" [matMenuTriggerFor]=\"menu\">\r\n                <mat-icon>check</mat-icon>\r\n                <span>Connected</span>\r\n            </button>\r\n\r\n            <mat-menu #menu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"disconnectUser()\">\r\n                    <mat-icon>close</mat-icon>\r\n                    <span>Disconnect</span>\r\n                </button>\r\n            </mat-menu>\r\n\r\n            <a (click)=\"toggleBottomChatBox()\" class=\"toggle-chat-box-btn\" *ngIf=\"isMessageBtnShown()\">\r\n                <mat-icon>chat</mat-icon>\r\n                <span>Message</span>\r\n            </a>\r\n            <a class=\"subscribe-btn\" *ngIf=\"!subscribedToChannel\" (click)=\"subscribeToChannel(channelUser.channel)\">\r\n                <mat-icon>favorite_border</mat-icon>\r\n                <span>Subscribe</span>\r\n            </a>\r\n            <a class=\"subscribe-btn subscribed\" *ngIf=\"subscribedToChannel\"\r\n               (click)=\"subscribeToChannel(channelUser.channel)\">\r\n                <mat-icon>favorite</mat-icon>\r\n                <span>Subscribed</span>\r\n            </a>\r\n        </div>\r\n        <div class=\"d-flex align-items-center\" *ngIf=\"channelUser.username === authUser.username\">\r\n            <button class=\"btn\" type=\"button\" id=\"edit-channel\" (click)=\"toggleEditMode()\" *ngIf=\"!editMode\">\r\n                <mat-icon>edit</mat-icon>\r\n                Edit channel\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" id=\"cancel-changes\" *ngIf=\"editMode\" (click)=\"toggleEditMode()\">\r\n                <mat-icon>cancel</mat-icon>\r\n                Cancel\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" id=\"save-channel-details\" *ngIf=\"editMode\" (click)=\"saveChanges()\">\r\n                <mat-icon>save</mat-icon>\r\n                Save changes\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {CroppedEvent} from 'ngx-photo-editor';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {Base64ToFilePipe} from '@shared/pipes/base64-to-file.pipe';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {Router} from '@angular/router';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\n\r\n@Component({\r\n    selector: 'app-channel-profile',\r\n    templateUrl: './channel-profile.component.html',\r\n    styleUrls: ['./channel-profile.component.scss']\r\n})\r\nexport class ChannelProfileComponent implements OnInit, OnDestroy {\r\n    apiUrl = API_URL;\r\n\r\n    profileChangedEvent: any;\r\n    coverChangedEvent: any;\r\n    profileBase64: any;\r\n    coverBase64: any;\r\n\r\n    subscribedToChannel = false;\r\n    subscribersCount = 0;\r\n\r\n    changingImage = false;\r\n    editMode = false;\r\n\r\n    channelForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    attemptedToConnect = false;\r\n    usersConnection;\r\n    isBlocked = false;\r\n    usersConnectionStatus = 'idle';\r\n\r\n\r\n    @Input('channelUser') channelUser;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        private usersService: UsersService,\r\n        private userStore: UserStoreService,\r\n        private base64ToFile: Base64ToFilePipe,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private channelService: ChannelsService,\r\n        private subject: SubjectService,\r\n        private usersConnectionsStore: UsersMessagesSubjectService,\r\n        private groupsMessagesStore: GroupsMessagesSubjectService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        public loader: LoaderService,\r\n        private fb: FormBuilder,\r\n    ) {\r\n\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        if (this.channelUser) {\r\n            this.checkChannelSubscription();\r\n            this.initChannelForm();\r\n            // this.detectImageChange();\r\n            this.checkIfUsersConnected();\r\n            this.getAcceptedDeclinedRequests();\r\n            this.getConnectWithUser();\r\n            this.getDisconnectUsers();\r\n            this.cancelledUsersConnecting();\r\n            this.getBlockUnblockUser();\r\n            this.getConnectionsChanges();\r\n        }\r\n    }\r\n\r\n    getConnectionsChanges() {\r\n        this.subscriptions.push(this.usersConnectionsStore.usersMessages$.subscribe((dt: any) => {\r\n            console.log('connection changed!!!', dt, this.channelUser.id)\r\n            //\r\n            //     if (dt.filter(d => d.id === this.channelUser.id)) {\r\n            //         this.usersConnectionStatus = 'connected';\r\n            //         this.isBlocked = false;\r\n            //     }\r\n        }));\r\n    }\r\n\r\n    getAcceptedDeclinedRequests() {\r\n        this.subscriptions.push(this.socketService.acceptedConnection().subscribe((dt: any) => {\r\n            if ((dt.to_user.id === this.authUser.id && dt.from_user.id === this.channelUser.id)\r\n                || (dt.to_user.id === this.channelUser.id && dt.from_user.id === this.authUser.id)) {\r\n                this.usersConnectionStatus = 'connected';\r\n                this.isBlocked = false;\r\n            }\r\n        }));\r\n\r\n        this.subscriptions.push(this.socketService.declinedConnection().subscribe((dt: any) => {\r\n            console.log('declined')\r\n            this.usersConnectionStatus = 'idle';\r\n        }));\r\n    }\r\n\r\n\r\n    initChannelForm() {\r\n        this.channelForm = this.fb.group({\r\n            id: [''],\r\n            avatar: [''],\r\n            cover: [''],\r\n            name: ['', Validators.required],\r\n            username: ['']\r\n        });\r\n\r\n        this.channelForm.patchValue({\r\n            name: this.channelUser.channel.name,\r\n            id: this.channelUser.channel.id,\r\n            username: this.channelUser.username,\r\n            avatar: this.channelUser.channel.avatar,\r\n            cover: this.channelUser.channel.cover\r\n        });\r\n    }\r\n\r\n    checkIfUsersConnected() {\r\n        this.usersService.checkIfUsersConnected({\r\n            user_id: this.authUser.id,\r\n            channel_user_id: this.channelUser.id\r\n        }).subscribe(dt => {\r\n            this.usersConnection = dt;\r\n            if (dt) {\r\n                this.usersConnectionStatus = dt.confirmed ? 'connected' : 'pending';\r\n                this.isBlocked = !!dt.is_blocked;\r\n            }\r\n        });\r\n    }\r\n\r\n    coverChangeEvent(event: any) {\r\n        this.coverChangedEvent = event;\r\n    }\r\n\r\n    profileChangeEvent(event: any) {\r\n        this.profileChangedEvent = event;\r\n    }\r\n\r\n    detectImageChange() {\r\n        // document.querySelector('img.avatar').addEventListener('load', () => {\r\n        //     console.log('Loading image!!!')\r\n        if (this.profileChangedEvent || this.coverChangedEvent) {\r\n            this.loader.dataLoading = false;\r\n            this.changingImage = false;\r\n            console.log('Avatar changed');\r\n            console.log(this.changingImage);\r\n        }\r\n        // });\r\n    }\r\n\r\n\r\n    profileCropped(event: CroppedEvent) {\r\n        // this.loader.dataLoading = true;\r\n\r\n        this.changingImage = true;\r\n        this.profileBase64 = event.base64;\r\n        const filename = `avatar_${Date.now()}.jpg`;\r\n        const fd = new FormData();\r\n        this.channelForm.patchValue({avatar: filename});\r\n        fd.append('avatar_file', this.base64ToFile.transform(event.base64), filename);\r\n        fd.append('avatar', filename);\r\n        fd.append('id', this.authUser.id);\r\n        this.subscriptions.push(this.usersService.changeProfileImage(fd).subscribe((dt) => {\r\n            this.changeAuthUserInfo(dt);\r\n        }));\r\n    }\r\n\r\n    coverCropped(event: CroppedEvent) {\r\n        this.coverBase64 = event.base64;\r\n        this.changingImage = true;\r\n        const fd = new FormData();\r\n        const filename = `cover_${Date.now()}.jpg`;\r\n        this.channelForm.patchValue({cover: filename});\r\n        fd.append('cover_file', this.base64ToFile.transform(event.base64), filename);\r\n        fd.append('cover', filename);\r\n        fd.append('id', this.authUser.id);\r\n        this.loader.dataLoading = true;\r\n        this.subscriptions.push(this.usersService.changeCoverImage(fd).subscribe((dt) => {\r\n            this.changeAuthUserInfo(dt);\r\n        }));\r\n    }\r\n\r\n    removeCover() {\r\n        this.channelUser.channel.cover = '';\r\n        this.channelForm.patchValue({cover: this.channelUser.channel.cover});\r\n    }\r\n\r\n    removeAvatar() {\r\n        this.channelUser.channel.avatar = '';\r\n        this.channelForm.patchValue({avatar: this.channelUser.channel.avatar});\r\n    }\r\n\r\n    subscribeToChannel(channel): void {\r\n        this.subscriptions.push(this.channelService.subscribeToChannel({\r\n            user_id: this.authUser.id,\r\n            channel_id: channel.id\r\n        }).subscribe(dt => {\r\n            this.subscribedToChannel = dt.status === 'Subscribed';\r\n            this.subscribersCount = dt.subscribers_count;\r\n            this.subscriptions.push(this.channelService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n            }));\r\n        }));\r\n    }\r\n\r\n    checkChannelSubscription() {\r\n        // console.log(this.channelUser)\r\n        this.subscriptions.push(this.channelService.checkChannelSubscription({\r\n            user_id: this.authUser.id,\r\n            channel_id: this.channelUser.channel.id\r\n        }).subscribe(dt => {\r\n            this.subscribedToChannel = dt.status === 'Subscribed';\r\n            this.subscribersCount = dt.subscribers_count;\r\n        }));\r\n    }\r\n\r\n    changeAuthUserInfo(dt) {\r\n        localStorage.setItem('token', dt.token);\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.channelUser = this.authUser;\r\n        this.changingImage = false;\r\n\r\n        const token = dt.hasOwnProperty('token') ? dt?.token : '';\r\n        if (token) {\r\n            localStorage.setItem('token', token);\r\n            this.userStore.setAuthUser(token);\r\n        }\r\n\r\n\r\n        // this.loader.dataLoading = false;\r\n        // console.log(this.channelUser)\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.editMode = !this.editMode;\r\n    }\r\n\r\n\r\n    saveChanges() {\r\n        console.log('save changes!!!')\r\n        console.log(this.channelForm.value)\r\n        console.log('save changes!!!')\r\n\r\n        if (this.channelForm.valid) {\r\n            this.subscriptions.push(this.channelService.changeChannelDetails(this.channelForm.value).subscribe((dt => {\r\n                this.editMode = false;\r\n                this.changeAuthUserInfo(dt);\r\n            })));\r\n        }\r\n    }\r\n\r\n    toggleBottomChatBox() {\r\n        const foundUserMessages = this.usersConnectionsStore.usersMessages.find(um => um.id === this.channelUser.id);\r\n        if (foundUserMessages) {\r\n            this.usersConnectionsStore.showBottomChatBox = true;\r\n            this.groupsMessagesStore.showBottomChatBox = false;\r\n            this.usersConnectionsStore.changeUser(foundUserMessages);\r\n        }\r\n    }\r\n\r\n    connectWithUser() {\r\n        this.attemptedToConnect = true;\r\n        this.usersConnectionStatus = 'pending';\r\n        this.socketService.connectWithUser({\r\n            from_user: this.authUser,\r\n            to_user: this.channelUser,\r\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has sent a connection request to you`\r\n        });\r\n    }\r\n\r\n    getConnectWithUser() {\r\n        this.socketService.getConnectWithUser().subscribe((dt: any) => {\r\n            this.usersConnection = dt.connection;\r\n        });\r\n    }\r\n\r\n    cancelUsersConnecting(connection) {\r\n        this.socketService.cancelUsersConnecting({\r\n            authUser: this.authUser,\r\n            channelUser: this.channelUser,\r\n            connection_id: connection.id\r\n        });\r\n    }\r\n\r\n    cancelledUsersConnecting() {\r\n        this.socketService.cancelledUsersConnecting().subscribe(dt => {\r\n            console.log(dt, 'cancelled')\r\n            this.usersConnectionStatus = 'idle';\r\n        });\r\n    }\r\n\r\n\r\n    disconnectUser() {\r\n        // console.log(this.usersConnection)\r\n        this.socketService.disconnectUsers({\r\n            to_user: this.channelUser,\r\n            from_user: this.authUser,\r\n            connection_id: this.usersConnection.id,\r\n            msg: `<strong>${this.authUser.first_name} ${this.authUser.last_name}</strong> has broken the connection between you two`,\r\n        });\r\n        this.usersConnectionStatus = 'idle';\r\n    }\r\n\r\n    getDisconnectUsers() {\r\n        this.subscriptions.push(this.socketService.getDisconnectUsers().subscribe(dt => {\r\n            this.usersConnectionStatus = 'idle';\r\n        }));\r\n    }\r\n\r\n    getBlockUnblockUser() {\r\n        this.subscriptions.push(this.socketService.getBlockUnblockUser().subscribe((dt: any) => {\r\n            console.log('get block/unblock', dt)\r\n            this.isBlocked = true;\r\n        }));\r\n    }\r\n\r\n    isMessageBtnShown() {\r\n        return /connected|test/.test(this.usersConnectionStatus) && !this.isBlocked;\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"about-tab\">\r\n\r\n\r\n    <div class=\"info\">\r\n        <h2 *ngIf=\"channelUser.channel?.description\">Description</h2>\r\n\r\n        <div class=\"date\">\r\n            <span>Joined {{channelUser.channel.created_at|date: 'd MMM, yyyy'}}</span>\r\n            <button class=\"btn\" (click)=\"editModeOn()\"\r\n                    *ngIf=\"!editMode && authUser.username === channelUser.username\">Edit\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"description\" [hidden]=\"editMode\">\r\n        <p>{{channelUser.channel.description}}</p>\r\n    </div>\r\n\r\n    <div class=\"edit-form-controls\" [hidden]=\"!editMode\">\r\n        <form [formGroup]=\"aboutForm\" id=\"channel-about-form\">\r\n            <textarea rows=\"15\" formControlName=\"description\"></textarea>\r\n\r\n            <button class=\"save\" (click)=\"saveChannelDescription()\">Save</button>\r\n\r\n            <mat-error *ngIf=\"aboutForm.get('description').hasError('maxlength')\">\r\n                Not more than 100 characters please\r\n            </mat-error>\r\n        </form>\r\n    </div>\r\n</div>\r\n\r\n","import {AfterViewInit, Component, Input, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {DESCRIPTION_CHARACTERS_LIMIT} from '@core/constants/global';\r\nimport {FixTextLineBreaksPipe} from '@shared/pipes/fix-text-line-breaks.pipe';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit, AfterViewInit {\r\n    aboutForm: FormGroup;\r\n    editMode = false;\r\n    authUser;\r\n    @Input('channelUser') channelUser;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private channelService: ChannelsService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private fixLineBreaks: FixTextLineBreaksPipe\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.aboutForm = this.fb.group({\r\n                description: ['', [Validators.required, Validators.maxLength(DESCRIPTION_CHARACTERS_LIMIT)]],\r\n                id: ['', Validators.required],\r\n                username: ['', Validators.required]\r\n            },\r\n        );\r\n        this.aboutForm.patchValue({\r\n            username: this.channelUser.username,\r\n            id: this.channelUser.channel.id,\r\n            description: this.fixLineBreaks.transform(this.channelUser.channel.description)\r\n            // ...this.channelUser.channel\r\n        });\r\n\r\n    }\r\n\r\n    editModeOn() {\r\n        this.editMode = true;\r\n    }\r\n\r\n    saveChannelDescription() {\r\n        if (this.aboutForm.valid) {\r\n            this.channelService.saveDescription(this.aboutForm.value).subscribe(dt => {\r\n                this.channelUser = dt;\r\n                document.querySelector('.description').innerHTML = this.channelUser.channel.description;\r\n                this.editMode = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        document.querySelector('.description').innerHTML = this.channelUser.channel.description;\r\n    }\r\n\r\n}\r\n","<mat-spinner [diameter]=\"15\" *ngIf=\"loader.channelLoading.status==='loading'\"></mat-spinner>\r\n<div class=\"profile-list\">\r\n    <!--    <app-categories></app-categories>-->\r\n    <ng-container *ngIf=\"channelUser\">\r\n        <app-user-tags *ngIf=\"auth.loggedIn()\" (tagSelected)=\"getVideosByTag($event)\"></app-user-tags>\r\n        <app-channel-profile [channelUser]=\"channelUser\" [authUser]=\"authUser\" *ngIf=\"channelUser\"></app-channel-profile>\r\n        <div class=\"stocks-watchlist pWatchlist\">\r\n            <div class=\"profile-list user-profile-block\">\r\n                <ul class=\"nav nav-tabs\" id=\"channel-tabs-list\" role=\"tablist\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of allTabs;trackBy:trackByElement\">\r\n                        <a class=\"nav-link\" [class.active]=\"tab === activeTab\" id=\"{{tab.link}}-tab\"\r\n                           (click)=\"changeActiveTab(tab)\" data-toggle=\"tab\" [href]=\"'#'+tab.link\" role=\"tab\"\r\n                           aria-controls=\"pWatch\"\r\n                           aria-selected=\"true\">{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <div class=\"loader-wrapper\">\r\n                    <div class=\"spinner-container\">\r\n                        <mat-spinner [diameter]=\"15\"\r\n                                     *ngIf=\"loader.stocksLoading.status==='loading'&& activeTab.name==='watchlist'\"></mat-spinner>\r\n                    </div>\r\n                </div>\r\n                <div class=\"search-wrapper\" >\r\n                    <div class=\"left-side\" *ngIf=\"activeTab.name==='Videos'\">\r\n                        <div class=\"toggle-filters-btn\">\r\n                            <button class=\"filter-toggle-btn\"\r\n                                    *ngIf=\"activeTab.name!=='About' && activeTab.name!=='Watchlist'\" type=\"button\"\r\n                                    [class.filters-active]=\"showFilters\"\r\n                                    (click)=\"toggleFilters()\">\r\n                                <mat-icon>tune</mat-icon>\r\n                            </button>\r\n                        </div>\r\n\r\n                            <app-search-videos-form  class=\"child-inp\" (search)=\"searchVideos($event)\"\r\n                                                    *ngIf=\"activeTab.name!=='About' && activeTab.name!=='Watchlist'\"></app-search-videos-form>\r\n\r\n                    </div>\r\n                    <div class=\"right-side\" *ngIf=\"activeTab.name==='Watchlist'\">\r\n\r\n                        <div class=\"open-add-stock-modal\" *ngIf=\"activeTab.name==='Watchlist'\" (click)=\"openModal()\">\r\n                            <button type=\"button\">\r\n                                <mat-icon>add_circle_outline</mat-icon>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"watchlist-search d-\" *ngIf=\"activeTab.name!=='About'\" [class.bordered]=\"userStocks?.length > 0\">\r\n                            <app-search-stocks-form  class =\"d-block search-stocks-component\" *ngIf=\"activeTab.name==='Watchlist' && userStocks?.length > 0\"\r\n                                                    [whiteForm]=\"true\" [returnSearchText]=\"true\"\r\n                                                    (search)=\"searchInUserStocks($event)\">\r\n                            </app-search-stocks-form>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <app-watchlist-tab *ngIf=\"activeTab.name === 'Watchlist'\" [channelUser]=\"channelUser\"></app-watchlist-tab>\r\n            <app-videos-tab *ngIf=\"activeTab.name === 'Videos'\" [channelUser]=\"channelUser\"\r\n                            [authUser]=\"authUser\"></app-videos-tab>\r\n            <app-playlists-tab *ngIf=\"activeTab.name === 'Playlists'\" [channelUser]=\"channelUser\"\r\n                               [authUser]=\"authUser\"></app-playlists-tab>\r\n            <app-about-tab *ngIf=\"activeTab.name === 'About'\" [channelUser]=\"channelUser\"></app-about-tab>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"channel-not-found\" *ngIf=\"!channelUser && loader.channelLoading.status==='finished'\">\r\n        <p>Channel with such name is not found</p>\r\n    </div>\r\n</div>\r\n\r\n<!--<app-chat-bottom-box *ngIf=\"usersMessagesStore.showBottomChatBox && channelUser\" [channelUser]=\"channelUser\"-->\r\n<!--                     ></app-chat-bottom-box>-->\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowChannelComponent} from '@app/channels/show-channel/show-channel.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'show',\r\n        component: ShowChannelComponent,\r\n        data: {\r\n            title: 'Channel page'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ChannelsRoutingModule {\r\n}\r\n","import {Component, OnDestroy, OnInit, TemplateRef, ViewChild} from '@angular/core';\r\nimport {API_URL, PROFILE_PAGE_TABS} from '@core/constants/global';\r\nimport {User} from '@shared/models/user';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {Base64ToFilePipe} from '@shared/pipes/base64-to-file.pipe';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {WatchlistTabComponent} from '@app/channels/show-channel/watchlist-tab/watchlist-tab.component';\r\nimport {VideosTabComponent} from '@app/channels/show-channel/videos-tab/videos-tab.component';\r\nimport {PlaylistsTabComponent} from '@app/channels/show-channel/playlists-tab/playlists-tab.component';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {StocksListsModalComponent} from '@shared/components/stocks-lists-modal/stocks-lists-modal.component';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {UpdateUserStocksPipe} from '@shared/pipes/update-user-stocks.pipe';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\n\r\n@Component({\r\n    selector: 'app-show-channel',\r\n    templateUrl: './show-channel.component.html',\r\n    styleUrls: ['./show-channel.component.scss']\r\n})\r\nexport class ShowChannelComponent implements OnInit, OnDestroy {\r\n\r\n    authUser;\r\n\r\n    activeTab;\r\n    allTabs = PROFILE_PAGE_TABS;\r\n\r\n    apiUrl = API_URL;\r\n\r\n\r\n    channelUser;\r\n    passedUsername;\r\n    passedTab;\r\n\r\n    searchVideosForm: FormGroup;\r\n\r\n\r\n    playlists = [];\r\n    editMode = false;\r\n\r\n    showFilters = false;\r\n    filters = null;\r\n\r\n    dataLoading = 'idle';\r\n\r\n    userStocks = [];\r\n    filteredStocks = [];\r\n    subscriptions = [];\r\n    trackByElement = trackByElement;\r\n\r\n    showChatBox = false;\r\n\r\n\r\n    @ViewChild(WatchlistTabComponent) watchListTab: WatchlistTabComponent;\r\n    @ViewChild(VideosTabComponent) videosTab: VideosTabComponent;\r\n    @ViewChild(PlaylistsTabComponent) playlistsTab: PlaylistsTabComponent;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router,\r\n        private usersService: UsersService,\r\n        private base64ToFile: Base64ToFilePipe,\r\n        private route: ActivatedRoute,\r\n        private fb: FormBuilder,\r\n        private subjectService: SubjectService,\r\n        private channelService: ChannelsService,\r\n        private playlistsService: PlaylistsService,\r\n        private subject: SubjectService,\r\n        public auth: AuthService,\r\n        private dialog: MatDialog,\r\n        public loader: LoaderService,\r\n        private updateStocks: UpdateUserStocksPipe,\r\n        private stocksService: StocksService,\r\n        public usersMessagesStore: UsersMessagesSubjectService,\r\n        private toastr: ToastrService,\r\n        private chatService: ChatService\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.passedUsername = this.route.snapshot.queryParams.username;\r\n        this.passedTab = this.route.snapshot.queryParams.tab;\r\n        this.searchVideosForm = this.fb.group({search: ['', Validators.required]});\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // localStorage.setItem('search', '');\r\n        this.activeTab = PROFILE_PAGE_TABS.filter(tabs => tabs.name.toLowerCase() === this.passedTab)?.[0] || PROFILE_PAGE_TABS[0];\r\n        this.getUserInfo();\r\n\r\n        this.subject.currentUserStocks.subscribe((dt: any) => {\r\n            this.userStocks = dt.stocks;\r\n            this.filteredStocks = this.userStocks;\r\n        });\r\n    }\r\n\r\n    toggleFilters() {\r\n        this.showFilters = !this.showFilters;\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n    }\r\n\r\n    getUserInfo() {\r\n        this.loader.channelLoading.status = 'loading';\r\n        const viewingOwnChannel = +(this.authUser.username === this.passedUsername);\r\n        if (this.passedUsername) {\r\n            this.usersService.getUserInfo({\r\n                username: this.passedUsername,\r\n                own_channel: viewingOwnChannel\r\n            }).subscribe(dt => {\r\n                if (dt) {\r\n                    this.channelUser = dt;\r\n                }\r\n                this.loader.channelLoading.status = 'finished';\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    async changeActiveTab(tab) {\r\n        this.activeTab = tab;\r\n        this.showFilters = false;\r\n        await this.router.navigate([`/channels/show`], {\r\n            queryParams: {\r\n                tab: tab.name.toLowerCase(),\r\n                username: this.passedUsername\r\n            }\r\n        });\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n        if (this.activeTab.name === 'Videos') {\r\n            this.getUserInfo();\r\n        }\r\n    }\r\n\r\n    searchInUserStocks(e) {\r\n        localStorage.setItem('searchStock', e.search);\r\n        this.watchListTab.getSearchResults(e);\r\n    }\r\n\r\n    searchVideos(e?) {\r\n        localStorage.setItem('search', e.search);\r\n        this.showFilters = false;\r\n        this.subject.setToggleFiltersData(this.showFilters);\r\n        if (this.activeTab.name === 'Videos') {\r\n            this.searchInUserVideos(e.search);\r\n        } else if (this.activeTab.name === 'Playlists') {\r\n            this.searchInPlaylists(e.search);\r\n        }\r\n\r\n    }\r\n\r\n    searchInVideosByAuthor(s) {\r\n        if (this.watchListTab) {\r\n            // this.watchListTab.getSearchResults(s);\r\n        }\r\n\r\n    }\r\n\r\n    searchInUserVideos(s) {\r\n        if (this.videosTab) {\r\n            this.videosTab.getSearchResults(s);\r\n        }\r\n    }\r\n\r\n    searchInPlaylists(s) {\r\n        if (this.playlistsTab) {\r\n            this.playlistsTab.getSearchResults(s);\r\n        }\r\n    }\r\n\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(StocksListsModalComponent, {\r\n            maxWidth: '100vw',\r\n            maxHeight: '100vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            panelClass: 'stocks-lists-modal'\r\n        }).afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    isStockFollowed(stock) {\r\n        return !!this.userStocks.find(s => s.name === stock.name);\r\n    }\r\n\r\n    updateFollowedStocksList(stock) {\r\n        const result = this.updateStocks.transform(this.userStocks, stock, this.isStockFollowed(stock));\r\n        if (result) {\r\n            this.loader.stocksLoading.status = 'loading';\r\n            this.subscriptions.push(this.stocksService.updateFollowedStocks(\r\n                {user_id: this.authUser.id, ...{stocks: result}})\r\n                .subscribe(dt => {\r\n                    this.userStocks = dt?.user_stocks || [];\r\n                    this.loader.stocksLoading.status = 'finished';\r\n                    this.subject.changeUserStocks({stocks: this.userStocks, empty: this.userStocks.length === 0});\r\n                }));\r\n        }\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {ChannelsRoutingModule} from './channels-routing.module';\r\nimport {ShowChannelComponent} from './show-channel/show-channel.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {NgxPhotoEditorModule} from 'ngx-photo-editor';\r\nimport {ChannelProfileComponent} from './show-channel/channel-profile/channel-profile.component';\r\nimport {WatchlistTabComponent} from './show-channel/watchlist-tab/watchlist-tab.component';\r\nimport {VideosTabComponent} from './show-channel/videos-tab/videos-tab.component';\r\nimport {PlaylistsTabComponent} from './show-channel/playlists-tab/playlists-tab.component';\r\nimport {AboutTabComponent} from './show-channel/about-tab/about-tab.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowChannelComponent,\r\n        ChannelProfileComponent,\r\n        WatchlistTabComponent,\r\n        VideosTabComponent,\r\n        PlaylistsTabComponent,\r\n        AboutTabComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ChannelsRoutingModule,\r\n        SharedModule,\r\n        NgxPhotoEditorModule,\r\n    ]\r\n})\r\nexport class ChannelsModule {\r\n}\r\n"]}