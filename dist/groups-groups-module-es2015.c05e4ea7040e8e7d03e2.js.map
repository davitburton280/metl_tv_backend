{"version":3,"sources":["webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/shared/directives/disable-control-properly.directive.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/groups.module.ts"],"names":["CreateNewGroupDialogComponent","authUser","fb","dialog","groupsService","socketService","groupsStore","lowerCaseRemoveSpaces","subscriptions","this","initForm","groupForm","group","name","required","custom_name","privacy","creator_id","id","username","patchValue","transform","value","formValue","valid","push","addGroup","subscribe","dt","selectedGroup","find","d","setGroups","selectGroup","close","closeDialog","submitForm","GroupItemComponent","url","replace","ShowGroupsComponent","chatService","userStore","router","groups","getAuthUser","trackGroups","groups$","authUser$","user","type","filter","g","open","width","height","data","afterClosed","navigateByUrl","openModal","DisableControlProperlyDirective","condition","control","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","console","log","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","checked","status","event","target","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","routes","path","component","title","SingleGroupComponent","route","isEmptyObj","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","getUserGroupConnStatus","params","passedGroupName","getGroupFromStore","getGroupFromServer","getGroupByCustomName","joinGroup","link","rest","leaveGroup","member_id","leavePageGroup","group_type","leavePageGroupNotify","length","member","leftGroups","removeFromPageGroupNotify","children","PeopleTabComponent","admins","members","requestedMembers","filterMembers","confirmGroupJoin","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","removeGroupMember","removeFromPageGroup","AboutTabComponent","MediaTabComponent","PostsTabComponent","GroupsRoutingModule","forChild","GroupsModule"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-create-new-group-dialog',\r\n    templateUrl: './create-new-group-dialog.component.html',\r\n    styleUrls: ['./create-new-group-dialog.component.scss']\r\n})\r\nexport class CreateNewGroupDialogComponent implements OnInit {\r\n    groupForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private fb: FormBuilder,\r\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService,\r\n        private groupsStore: GroupsStoreService,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.groupForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            custom_name: ['', Validators.required],\r\n            privacy: ['0'],\r\n            creator_id: this.authUser.id,\r\n            username: this.authUser.username\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\r\n        const formValue = this.groupForm.value;\r\n        if (this.groupForm.valid) {\r\n            this.subscriptions.push(this.groupsService.addGroup(formValue).subscribe(async (dt) => {\r\n                const selectedGroup = dt.find(d => formValue.name === d.name);\r\n                this.groupsStore.setGroups(dt);\r\n                this.groupsStore.selectGroup(selectedGroup);\r\n                // this.socketService.setNewGroup(formValue);\r\n                this.dialog.close(this.groupForm.value);\r\n            }));\r\n        }\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close(null);\r\n    }\r\n\r\n}\r\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <div id=\"admin-info\">\r\n        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>\r\n    </div>\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"field-row\">\r\n            <label for=\"group-name-input\">Group name</label>\r\n            <input id=\"group-name-input\" formControlName=\"name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label for=\"privacy-types\">Choose privacy</label>\r\n            <select id=\"privacy-types\" formControlName=\"privacy\">\r\n                <option value=\"0\">Public</option>\r\n                <option value=\"1\">Private</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\n\r\n@Component({\r\n    selector: 'app-group-item',\r\n    templateUrl: './group-item.component.html',\r\n    styleUrls: ['./group-item.component.scss']\r\n})\r\nexport class GroupItemComponent implements OnInit {\r\n    @Input() group;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getUrl() {\r\n        const url = '/groups/' + this.group.name.replace(' /g', '_') + '/about';\r\n        return this.lowerCaseRemoveSpaces.transform(url);\r\n    }\r\n\r\n}\r\n","<div appNavigateToFixedGroupUrl [name]=\"group.name\">\r\n    <div class=\"img-wrap\">\r\n        <img  [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n    </div>\r\n    <div class=\"group-name-wrap\">\r\n        <strong>{{group.name}}</strong>\r\n    </div>\r\n</div>\r\n","<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<h3 class=\"groups-type-title\">Groups you manage</h3>\r\n<ul>\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('managed')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n<h3 class=\"groups-type-title\">Groups you've joined</h3>\r\n<ul>\r\n    <li class=\"group-item-wrap\" *ngFor=\"let group of filterGroups('joined')\">\r\n        <app-group-item [group]=\"group\"></app-group-item>\r\n    </li>\r\n</ul>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Router} from '@angular/router';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\n\r\n@Component({\r\n    selector: 'app-show-groups',\r\n    templateUrl: './show-groups.component.html',\r\n    styleUrls: ['./show-groups.component.scss']\r\n})\r\nexport class ShowGroupsComponent implements OnInit {\r\n    authUser;\r\n    groups = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public groupsStore: GroupsStoreService,\r\n        private chatService: ChatService,\r\n        private userStore: UserStoreService,\r\n        private socketService: SocketIoService,\r\n        public router: Router,\r\n        private dialog: MatDialog\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAuthUser();\r\n        this.trackGroups();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.groups$.subscribe(dt => {\r\n            this.groups = dt;\r\n        }));\r\n    }\r\n\r\n    getAuthUser() {\r\n        this.userStore.authUser$.subscribe(user => {\r\n            this.authUser = user;\r\n        });\r\n    }\r\n\r\n    filterGroups(type) {\r\n        return this.groups.filter(g => {\r\n            return type === 'managed' ?\r\n                g.creator_id === this.authUser.id :\r\n                g.creator_id !== this.authUser.id;\r\n        });\r\n    }\r\n\r\n    openModal() {\r\n        this.dialog.open(CreateNewGroupDialogComponent, {\r\n            width: '500px',\r\n            height: '450px',\r\n            data: this.authUser\r\n        }).afterClosed().subscribe(async (selectedGroup) => {\r\n            if (selectedGroup) {\r\n                await this.router.navigateByUrl('/groups/' + selectedGroup.custom_name + '/people');\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import {Directive, Injector, Input, Self} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[disableControl]'\r\n})\r\nexport class DisableControlProperlyDirective {\r\n\r\n    @Input() set disableControl({condition, control}) {\r\n        const action = condition ? 'disable' : 'enable';\r\n        control?.[action]();\r\n    }\r\n\r\n\r\n}\r\n","<div id=\"dialog-header\">\r\n    <h3>Invite contacts to this group</h3>\r\n    <div>\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n</div>\r\n<form [formGroup]=\"contactsInviteForm\">\r\n    <div id=\"group-members-wrap\">\r\n        <div id=\"suggested-contacts\">\r\n            <div id=\"contact-search-wrap\">\r\n                <input placeholder=\"Find a contact\">\r\n                <i class=\"fas fa-search\"></i>\r\n            </div>\r\n\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\r\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"'contact_'+control.value.i\">\r\n                            <div class=\"avatar-wrap\">\r\n                                <img class=\"avatar\"\r\n                                     [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\r\n                                <p class=\"contact-status\"\r\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <label>\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"hidden\" formControlName=\"name\">\r\n                            <input type=\"checkbox\" formControlName=\"checked\"\r\n                                   [id]=\"'contact_'+control.value.id\"\r\n                                   (change)=\"selectContact($event,control)\"\r\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\r\n                            >\r\n                            <span></span>\r\n                        </label>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"selected-contacts\">\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"control.value.id+'_'+i\">\r\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'user_avatars'\">\r\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <button id=\"remove-from-selected-contacts-btn\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div id=\"dialog-actions\">\r\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsMessagesSubjectService} from '@core/services/stores/groups-messages-subject.service';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {Subscription} from 'rxjs';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-invitation-dialog',\r\n    templateUrl: './group-members-invitation-dialog.component.html',\r\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\r\n})\r\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\r\n    selectedGroup;\r\n    userContacts: User[] = [];\r\n    selectedContacts: User[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    contactsInviteForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private groupsStore: GroupsStoreService,\r\n        private usersMessagesStore: UsersMessagesSubjectService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\r\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\r\n        private fb: FormBuilder\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedGroup = this.groupsStore.selectedGroup;\r\n        console.log(this.selectedGroup)\r\n        this.initForm();\r\n    }\r\n\r\n\r\n    initForm() {\r\n        this.contactsInviteForm = this.fb.group({\r\n            contacts: this.fb.array(this.getContactsFormGroup()),\r\n        });\r\n    }\r\n\r\n    getContactsFormGroup() {\r\n        const formArray = [];\r\n        this.usersMessagesStore.usersMessages.map((c, index) => {\r\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\r\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\r\n            let connectionWithGroup = 'not joined';\r\n\r\n            if (foundInGroup) {\r\n                const connectionContainer = foundInGroup.groups_members;\r\n\r\n                if (foundInGroup) {\r\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\r\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\r\n                        connectionWithGroup = 'accepted';\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            formArray.push(this.fb.group({\r\n                name: 'contact_' + index,\r\n                checked: !!foundInSelected,\r\n                status: connectionWithGroup,\r\n                ...c\r\n            }));\r\n        });\r\n        return formArray;\r\n    }\r\n\r\n    selectContact(event: Event, control: AbstractControl) {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.selectedContacts.push(control.value);\r\n        } else {\r\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        }\r\n    }\r\n\r\n    removeContactFromSelected(control: AbstractControl) {\r\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\r\n        foundControl.patchValue({checked: false});\r\n    }\r\n\r\n    sendInvitationsToContacts() {\r\n        this.subscriptions.push(this.groupsService.addGroupMembers({\r\n            group_id: this.selectedGroup.id,\r\n            member_ids: this.selectedContacts.map(c => c.id)\r\n        }).subscribe(dt => {\r\n            this.socketService.inviteToNewPageGroup({\r\n                invited_members: this.selectedContacts,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsStore.changeGroup(dt);\r\n            this.closeDialog();\r\n        }));\r\n    }\r\n\r\n    isProcessedContact(status) {\r\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\r\n    }\r\n\r\n    get contactCtrls() {\r\n        return this.contactsInviteForm.controls.contacts as FormArray;\r\n    }\r\n\r\n    get checkedContactCtrls() {\r\n        return this.contactCtrls.controls.filter(c => c.value.checked);\r\n    }\r\n\r\n    getCheckBoxControl(control) {\r\n        return control.controls.checked;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"selectedGroup\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div id=\"group-cover-image\">\r\n            <img [src]=\"selectedGroup?.cover|getImgPath:'group_covers'\">\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","<div class=\"tab-container\">\r\n    <div id=\"all-members-wrap\">\r\n        <div id=\"admins\" *ngIf=\"!isOwnGroup\">\r\n            <strong>Admins</strong>\r\n\r\n            <ul [class.bordered]=\"!isOwnGroup\">\r\n                <li *ngFor=\"let admin of admins\">\r\n                    <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'user_avatars'\">\r\n                    <strong>{{admin.first_name + ' ' + admin.last_name}}</strong>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"members\">\r\n            <strong>Members</strong>\r\n\r\n            <!--            <app-members-list [selectedGroup]=\"getGroup('members')\" [authUser]=\"authUser\"></app-members-list>-->\r\n\r\n            <ul [class.bordered]=\"isOwnGroup\">\r\n                <li *ngFor=\"let member of members\">\r\n                    <div class=\"details\">\r\n                        <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n                        <strong>{{member.first_name + ' ' + member.last_name}}</strong>\r\n                    </div>\r\n                    <div>\r\n                        <button class=\"remove-member-btn\" *ngIf=\"isOwnGroup\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeMember(member)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"member-requests\" *ngIf=\"isOwnGroup\">\r\n            <strong>Requests</strong>\r\n\r\n            <ul>\r\n                <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'user_avatars'\">\r\n                    <strong>{{member.first_name + ' ' + member.last_name}}</strong>\r\n\r\n                    <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                    <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\r\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ShowGroupsComponent,\r\n        data: {\r\n            title: 'Groups'\r\n        },\r\n    },\r\n    {\r\n        path: ':name',\r\n        component: SingleGroupComponent,\r\n        children: [\r\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\r\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\r\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\r\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GroupsRoutingModule {\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {User} from '@shared/models/user';\r\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\n\r\n@Component({\r\n    selector: 'app-single-group',\r\n    templateUrl: './single-group.component.html',\r\n    styleUrls: ['./single-group.component.scss']\r\n})\r\nexport class SingleGroupComponent implements OnInit, OnDestroy {\r\n    authUser: User;\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    selectedGroup;\r\n    isOwnGroup = false;\r\n    passedGroupName: string;\r\n    groupTabs = GROUP_PAGE_TABS;\r\n    groupPrivacy = 'public';\r\n\r\n    userGroupConnStatus = 'not connected';\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private route: ActivatedRoute,\r\n        private userStore: UserStoreService,\r\n        private dialog: MatDialog,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        private socketService: SocketIoService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackSelectedGroup();\r\n        this.getAuthUser();\r\n        this.getSelectedGroup();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getConfirmedJoinGroup();\r\n        this.getIgnoredJoinGroup();\r\n        this.getJoinGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n    }\r\n\r\n    getAuthUser() {\r\n        this.subscriptions.push(this.userStore.authUser$.subscribe(user => {\r\n            this.authUser = user;\r\n        }));\r\n    }\r\n\r\n    trackSelectedGroup() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\r\n            this.selectedGroup = dt;\r\n            this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\r\n            // console.log(this.selectedGroup, this.groupPrivacy);\r\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\r\n                this.getUserGroupConnStatus();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.name;\r\n\r\n            if (!this.getGroupFromStore()) {\r\n                this.getGroupFromServer();\r\n            }\r\n        });\r\n    }\r\n\r\n    getGroupFromStore() {\r\n        this.selectedGroup = this.groupsStore.groups.find(g => {\r\n            const groupName = this.lowerCaseRemoveSpaces.transform(g.name);\r\n            return groupName === this.passedGroupName;\r\n        });\r\n        if (this.selectedGroup) {\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        }\r\n        return !!this.selectedGroup;\r\n    }\r\n\r\n    getGroupFromServer() {\r\n        this.groupsService.getGroupByCustomName({custom_name: this.passedGroupName}).subscribe(dt => {\r\n            this.selectedGroup = dt;\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        });\r\n    }\r\n\r\n    joinGroup() {\r\n        console.log(this.selectedGroup);\r\n        this.groupsService.joinGroup({\r\n            member_ids: [this.authUser.id],\r\n            group_id: this.selectedGroup.id,\r\n            accepted: 1\r\n        }).subscribe(dt => {\r\n            this.userGroupConnStatus = 'unconfirmed';\r\n\r\n            this.socketService.joinGroup({\r\n                group: this.selectedGroup,\r\n                from_user: this.authUser,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n\r\n            this.groupsStore.changeGroup(dt);\r\n        });\r\n    }\r\n\r\n    getJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('get joined', rest.group);\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    this.groupsStore.setGroups(dt);\r\n                    this.socketService.leavePageGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n                // console.log(this.selectedGroup);\r\n                // this.groupsStore.selectGroup({});\r\n            }\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedMembersCount() {\r\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('confirmed in group page', data);\r\n            this.userGroupConnStatus = 'confirmed';\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getIgnoredJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('ignored in group page', rest);\r\n            if (rest.member.id === this.authUser.id) {\r\n                this.groupsStore.setGroups(rest.leftGroups);\r\n                this.groupsStore.selectGroup(rest.group);\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\r\n            const {member, leftGroups} = data;\r\n            console.log('removed from group in group page', data);\r\n            this.groupsStore.changeGroup(data.group);\r\n            if (member.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            // console.log(this.groupsMessagesStore.selectedGroupMessages)\r\n            // console.log(this.groupsMessagesStore.groupsMessages)\r\n            // }\r\n        }));\r\n    }\r\n\r\n    getUserGroupConnStatus() {\r\n        this.selectedGroup.group_members?.map(m => {\r\n            if (m.id === this.authUser.id) {\r\n                if (m.groups_members.confirmed === 1) {\r\n                    this.userGroupConnStatus = 'confirmed';\r\n                } else {\r\n                    if (m.groups_members.accepted === 1) {\r\n                        this.userGroupConnStatus = 'unconfirmed';\r\n                    } else {\r\n                        this.userGroupConnStatus = 'not connected';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    showJoinBtn() {\r\n        return !this.isOwnGroup;\r\n    }\r\n\r\n    onOutletLoaded(component) {\r\n        if (this.selectedGroup) {\r\n            component.selectedGroup = this.selectedGroup;\r\n            component.isOwnGroup = this.isOwnGroup;\r\n            component.authUser = this.authUser;\r\n        }\r\n    }\r\n\r\n    openMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\r\n            height: '690px',\r\n            width: '950px',\r\n            data: this.authUser,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    @Input() authUser;\r\n\r\n    admins = [];\r\n    members = [];\r\n    requestedMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private socketService: SocketIoService,\r\n        private chatService: ChatService,\r\n        private dialog: MatDialog,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroups();\r\n        this.getAcceptedJoinPageGroup();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\r\n            // console.log(dt);\r\n            this.selectedGroup = dt;\r\n            this.admins = [];\r\n            this.members = [];\r\n            this.requestedMembers = [];\r\n\r\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\r\n                this.filterMembers();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    filterMembers() {\r\n        this.selectedGroup?.group_members?.map(m => {\r\n            if (this.selectedGroup.creator_id === m.id) {\r\n                this.admins.push(m);\r\n            } else {\r\n                if (m.groups_members.confirmed) {\r\n                    this.members.push(m);\r\n                } else if (m.groups_members.accepted) {\r\n                    this.requestedMembers.push(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    confirmJoinGroup(member) {\r\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.confirmJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    ignoreJoinGroup(member) {\r\n        console.log(member);\r\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.ignoreJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    removeMember(member) {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromPageGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.isOwnGroup)\r\n    }\r\n\r\n}\r\n","<p>about-tab works!</p>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-media-tab',\r\n  templateUrl: './media-tab.component.html',\r\n  styleUrls: ['./media-tab.component.scss']\r\n})\r\nexport class MediaTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n}\r\n","<p>media-tab works!</p>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-posts-tab',\r\n  templateUrl: './posts-tab.component.html',\r\n  styleUrls: ['./posts-tab.component.scss']\r\n})\r\nexport class PostsTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n\r\n}\r\n","<p>posts-tab works!</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GroupsRoutingModule } from './groups-routing.module';\r\nimport { ShowGroupsComponent } from './show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport { GroupItemComponent } from './show-groups/group-item/group-item.component';\r\nimport { AboutTabComponent } from './single-group/about-tab/about-tab.component';\r\nimport { PeopleTabComponent } from './single-group/people-tab/people-tab.component';\r\nimport { MediaTabComponent } from './single-group/media-tab/media-tab.component';\r\nimport { PostsTabComponent } from './single-group/posts-tab/posts-tab.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ShowGroupsComponent, SingleGroupComponent, GroupItemComponent, AboutTabComponent, PeopleTabComponent, MediaTabComponent, PostsTabComponent],\r\n  imports: [\r\n    CommonModule,\r\n    GroupsRoutingModule,\r\n      SharedModule\r\n  ]\r\n})\r\nexport class GroupsModule { }\r\n"]}