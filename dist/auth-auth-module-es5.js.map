{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/auth/forgot-password/forgot-password.component.html","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/register/register.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/reset-password/reset-password.component.ts","webpack:///src/app/auth/reset-password/reset-password.component.html","webpack:///src/app/core/components/modals/verify-email/verify-email.component.html","webpack:///src/app/core/components/modals/verify-email/verify-email.component.ts","webpack:///src/app/core/helpers/password-confirmation.ts"],"names":["routes","path","component","data","title","AuthRoutingModule","forChild","imports","exports","AuthModule","forRoot","declarations","providers","ForgotPasswordComponent","fb","router","auth","toastr","loader","isSubmitted","forgotPassForm","group","email","required","valid","formProcessing","sendForgotPassEmail","value","subscribe","dt","success","sendEmail","selector","templateUrl","styleUrls","LoginComponent","authGuard","dialog","subject","subscriptions","loginForm","password","push","login","localStorage","setItem","hasOwnProperty","token","changeAuthUser","navigateByUrl","redirectUrl","forEach","s","unsubscribe","get","RegisterComponent","datePipe","currentDate","Date","maxDate","setFullYear","getFullYear","initForm","registerForm","full_name","username","minLength","maxLength","confirm_password","birthday","validator","register","navigate","e","sendEmailVerificationCode","code","open","height","width","afterClosed","dateChanged","openModal","ResetPasswordComponent","route","jwtHelper","emailPassed","tokenExpired","snapshot","queryParams","isTokenExpired","resetPassForm","resetPass","VerifyEmailComponent","matDialogRef","codeChecked","verifyingCode","codeWrong","codeResent","codeResending","sentCode","verifyCodeForm","checkVerificationCode","setTimeout","close","resendEmailVerificationCode","resend","passwordConfirmation","key","confirmationKey","input","controls","confirmationInput","setErrors","notMatch"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAMA,MAAM,GAAW,CACnB;AACIC,UAAI,EAAE,OADV;AAEIC,eAAS,EAAE,qEAFf;AAGIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAHV,KADmB,EAQnB;AACIH,UAAI,EAAE,UADV;AAEIC,eAAS,EAAE,8EAFf;AAGIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAHV,KARmB,EAenB;AACIH,UAAI,EAAE,iBADV;AAEIC,eAAS,EAAE,2GAFf;AAGIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAHV,KAfmB,EAsBnB;AACIH,UAAI,EAAE,gBADV;AAEIC,eAAS,EAAE,wGAFf;AAGIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAHV,KAtBmB,CAAvB;;QAmCaC,iB;;;;;YAAAA;;;;yBAAAA,iB;AAAiB,O;AAAA,gBAHjB,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAGiB,EAFhB,4DAEgB;;;;0HAAjBK,iB,EAAiB;AAAA;AAAA,kBAFhB,4DAEgB;AAAA,O;AAFJ,K;;;;;sEAEbA,iB,EAAiB;cAJ7B,sDAI6B;eAJpB;AACNE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBN,MAAtB,CAAD,CADH;AAENQ,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAIoB,Q;;;;;;;;;;;;;;;;;;AC3C9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA0BaC,U;;;;;YAAAA;;;;yBAAAA,U;AAAU,O;AAAA,iBAFR,E;AAAE,gBARJ,CACL,4DADK,EAEL,sEAFK,EAGL,kEAHK,EAIL,4EAAmBC,OAAnB,EAJK,EAKL,4EALK,CAQI;;;;0HAEJD,U,EAAU;AAAA,uBAXJ,qEAWI,EAXY,8EAWZ,EAX+B,gHAW/B,EAXqD,kGAWrD,EAX8E,gGAW9E;AAXoG,kBAEnH,4DAFmH,EAGnH,sEAHmH,EAInH,kEAJmH,EAIhG,2EAJgG,EAMnH,4EANmH;AAWpG,O;AALD,K;;;;;sEAKTA,U,EAAU;cAZtB,sDAYsB;eAZb;AACNE,sBAAY,EAAE,CAAC,qEAAD,EAAiB,8EAAjB,EAAoC,gHAApC,EAA0D,kGAA1D,EAAmF,gGAAnF,CADR;AAENJ,iBAAO,EAAE,CACL,4DADK,EAEL,sEAFK,EAGL,kEAHK,EAIL,4EAAmBG,OAAnB,EAJK,EAKL,4EALK,CAFH;AAUNE,mBAAS,EAAE;AAVL,S;AAYa,Q;;;;;;;;;;;;;;;;;;AC1BvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUY;;AACI;;AAAuB;;;;;;AAC3B;;AACI;;AACJ;;;;;;AAII;;;;AAAa;;;;QDJhBC,uB;AAIT,uCACYC,EADZ,EAEWC,MAFX,EAGWC,IAHX,EAIYC,MAJZ,EAKWC,MALX,EAKgC;AAAA;;AAJpB,aAAAJ,EAAA,GAAAA,EAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACC,aAAAC,MAAA,GAAAA,MAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AAPX,aAAAC,WAAA,GAAc,KAAd;AASI,aAAKC,cAAL,GAAsB,KAAKN,EAAL,CAAQO,KAAR,CAAc;AAChCC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,yFAAiB,sEAAjB,CAAtB,CAAL;AADyB,SAAd,CAAtB;AAGH;;;;mCAEO,CACP;;;oCAEW;AAAA;;AACR,eAAKJ,WAAL,GAAmB,IAAnB;;AACA,cAAI,KAAKC,cAAL,CAAoBI,KAAxB,EAA+B;AAC3B,iBAAKN,MAAL,CAAYO,cAAZ,GAA6B,IAA7B,CAD2B,CAE3B;;AACA,iBAAKT,IAAL,CAAUU,mBAAV,CAA8B,KAAKN,cAAL,CAAoBO,KAAlD,EAAyDC,SAAzD,CAAmE,UAAAC,EAAE,EAAI;AACrE,mBAAI,CAACX,MAAL,CAAYO,cAAZ,GAA6B,KAA7B;;AACA,mBAAI,CAACR,MAAL,CAAYa,OAAZ,CAAoB,qDAApB;AACH,aAHD;AAIH;AACJ;;;;;;;uBA7BQjB,uB,EAAuB,2H,EAAA,uH,EAAA,wI,EAAA,yH,EAAA,4I;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,a;AAAA,8W;AAAA;AAAA;ACdpC;;AAEI;;AACI;;AAAwB;AAAA,mBAAS,IAAAE,MAAA,WAAiB,GAAjB,EAAT;AAA+B,WAA/B;;AAAxB;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAe;;AACnB;;AAAI;;AAAgB;;AACpB;;AACA;;AAEA;;AAIA;;AACI;;AAAQ;AAAA,mBAAS,IAAAgB,SAAA,EAAT;AAAoB,WAApB;;AAAsB;;AAAM;;AACpC;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAhBc;;AAAA;;AAIkB;;AAAA;;AAEA;;AAAA;;AAMa;;AAAA;;;;;;;;;sEDJhClB,uB,EAAuB;cALnC,uDAKmC;eALzB;AACPmB,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AECpB;;AACN;;AAAU;;AAAQ;;AAAQ;;AAC5B;;;;;;AACQ;;AACN;;AAAU;;AAAQ;;AAAO;;AAC3B;;;;;;AAIQ;;AACN;;AAAY;;AAAQ;;AAAQ;;AAC9B;;;;QCTKC,c;AAKT,8BACWpB,MADX,EAEYD,EAFZ,EAGYE,IAHZ,EAIYoB,SAJZ,EAKYC,MALZ,EAMYC,OANZ,EAMmC;AAAA;;AALxB,aAAAvB,MAAA,GAAAA,MAAA;AACC,aAAAD,EAAA,GAAAA,EAAA;AACA,aAAAE,IAAA,GAAAA,IAAA;AACA,aAAAoB,SAAA,GAAAA,SAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AATZ,aAAAC,aAAA,GAAgC,EAAhC;AACA,aAAApB,WAAA,GAAc,KAAd;AAUI,aAAKqB,SAAL,GAAiB,KAAK1B,EAAL,CAAQO,KAAR,CAAc;AAC3BC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,yFAAiB,sEAAjB,CAAtB,CAAL,CADoB;AAE3BkB,kBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWlB,QAAhB;AAFiB,SAAd,CAAjB;AAKH;;;;mCAEO,CACP;;;gCAEO;AAAA;;AACJ,eAAKJ,WAAL,GAAmB,IAAnB;;AACA,cAAI,KAAKqB,SAAL,CAAehB,KAAnB,EAA0B;AACtB,iBAAKe,aAAL,CAAmBG,IAAnB,CAAwB,KAAK1B,IAAL,CAAU2B,KAAV,CAAgB,KAAKH,SAAL,CAAeb,KAA/B,EAAsCC,SAAtC,CAAgD,UAAOC,EAAP;AAAA,qBAAmB;AAAA;AAAA;AAAA;AAAA;AACvFe,oCAAY,CAACC,OAAb,CAAqB,OAArB,EAA+BhB,EAAE,CAACiB,cAAH,CAAkB,OAAlB,IAA6BjB,EAAE,CAACkB,KAAhC,GAAwC,EAAvE;AACA,6BAAKT,OAAL,CAAaU,cAAb,CAA6BnB,EAAE,CAACiB,cAAH,CAAkB,OAAlB,IAA6BjB,EAAE,CAACkB,KAAhC,GAAwC,EAArE;AAFuF;AAGvF,+BAAM,KAAKhC,MAAL,CAAYkC,aAAZ,CAA0B,KAAKb,SAAL,CAAec,WAAf,GAA6B,KAAKd,SAAL,CAAec,WAA5C,GAA0D,GAApF,CAAN;;AAHuF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;AAAA,aAAhD,CAAxB;AAKH;AACJ;;;sCAUa;AACV,eAAKX,aAAL,CAAmBY,OAAnB,CAA2B,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,WAA5B;AACH;;;4BAVQ;AACL,iBAAO,KAAKb,SAAL,CAAec,GAAf,CAAmB,OAAnB,CAAP;AACH;;;4BAEO;AACJ,iBAAO,KAAKd,SAAL,CAAec,GAAf,CAAmB,UAAnB,CAAP;AACH;;;;;;;uBAxCQnB,c,EAAc,uH,EAAA,2H,EAAA,wI,EAAA,kI,EAAA,mI,EAAA,8I;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,qkB;AAAA;AAAA;ADjB3B;;AACI;;AACI;;AAAwB;AAAA,mBAAS,IAAApB,MAAA,WAAiB,GAAjB,EAAT;AAA+B,WAA/B;;AAAxB;;AACA;;AACI;;AAA8B;;AAAK;;AACnC;;AAAwB;AAAA,mBAAS,IAAAA,MAAA,WAAiB,eAAjB,EAAT;AAA2C,WAA3C;;AAA6C;;AAAO;;AAChF;;AACJ;;AACA;;AACI;;AACI;;AAAuB;;AAAK;;AAC5B;;AAGI;;AACA;;AAGA;;AAKA;;AACA;;AAGA;;AAA2B;AAAA,mBAAS,IAAAA,MAAA,WAAiB,sBAAjB,EAAT;AAAkD,WAAlD;;AAAoD;;AAAgB;;AAC/F;;AAAwB;AAAA,mBAAS,IAAA4B,KAAA,EAAT;AAAgB,WAAhB;;AAAkB;;AAAK;;AACnD;;AACJ;;AACJ;;AACJ;;;;AArBkB;;AAAA;;AAIkB;;AAAA;;AAGA;;AAAA;;AAMA;;AAAA;;;;;;;;;sECPvBR,c,EAAc;cAL1B,uDAK0B;eALhB;AACPH,kBAAQ,EAAE,WADH;AAEPC,qBAAW,EAAE,wBAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJX;;AAAyE;;AAAqB;;;;;;AAC9F;;AACI;;AACJ;;;;;;AAEA;;AAAyE;;AAAqB;;;;;;AAC9F;;AACI;;AACJ;;;;;;AAWA;;AAAsE;;AAAkB;;;;;;AACxF;;AACI;;AAAU;;AAAQ;;AAAO;;AAC7B;;;;;;AAIA;;AAAqE;;AAAoB;;;;;;AACzF;;AACG;;AACH;;;;;;AACA;;AACG;;AACH;;;;;;AAGA;;AAA6D;;AAAqB;;;;;;AAClF;;AAC8D;;AAA2B;;;;;;AAEzF;;AAAyE;;AAAqB;;;;;;AAI1F;;;;AAAa;;;;;;;;;;;QC/BpBqB,iB;AAOT,iCACWxC,MADX,EAEYD,EAFZ,EAGYE,IAHZ,EAIYwC,QAJZ,EAKYnB,MALZ,EAMWnB,MANX,EAOYoB,OAPZ,EAOmC;AAAA;;AANxB,aAAAvB,MAAA,GAAAA,MAAA;AACC,aAAAD,EAAA,GAAAA,EAAA;AACA,aAAAE,IAAA,GAAAA,IAAA;AACA,aAAAwC,QAAA,GAAAA,QAAA;AACA,aAAAnB,MAAA,GAAAA,MAAA;AACD,aAAAnB,MAAA,GAAAA,MAAA;AACC,aAAAoB,OAAA,GAAAA,OAAA;AAZZ,aAAAC,aAAA,GAAgC,EAAhC;AACA,aAAApB,WAAA,GAAc,KAAd;AACA,aAAAsC,WAAA,GAAc,IAAIC,IAAJ,EAAd,CAUmC,CAG/B;;AACA,aAAKC,OAAL,GAAe,IAAID,IAAJ,CAAS,KAAKD,WAAL,CAAiBG,WAAjB,CAA6B,KAAKH,WAAL,CAAiBI,WAAjB,KAAiC,EAA9D,CAAT,CAAf;AACH;;;;mCAEO;AACJ,eAAKC,QAAL;AACH;;;mCAEU;AACP,eAAKC,YAAL,GAAoB,KAAKjD,EAAL,CAAQO,KAAR,CAAc;AAC1B2C,qBAAS,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzC,QAAZ,EAAsB,yFAAiB,2FAAjB,CAAtB,CAAL,CADe;AAE1B0C,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW1C,QAAZ,EAAsB,yFAAiB,kFAAjB,CAAtB,CAAL,CAFgB;AAG1BD,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,yFAAiB,sEAAjB,CAAtB,CAAL,CAHmB;AAI1BkB,oBAAQ,EAAE,CAAC,EAAD,EACN,CACI,0DAAWlB,QADf,EACyB,yFAAiB,yEAAjB,CADzB,EAEI,0DAAW2C,SAAX,CAAqB,0EAArB,CAFJ,EAE+C,0DAAWC,SAAX,CAAqB,0EAArB,CAF/C,CADM,CAJgB;AAU1B;AACAC,4BAAgB,EAAE,CAAC,EAAD,EAAK,0DAAW7C,QAAhB,CAXQ;AAY1B8C,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAW9C,QAAhB;AAZgB,WAAd,EAchB;AAAC+C,qBAAS,EAAE,iGAAqB,UAArB,EAAiC,kBAAjC;AAAZ,WAdgB,CAApB;AAgBH;;;mCAEU;AAAA;;AACP,cAAI,KAAKP,YAAL,CAAkBvC,KAAtB,EAA6B;AACzB,iBAAKN,MAAL,CAAYO,cAAZ,GAA6B,IAA7B;AACA,iBAAKc,aAAL,CAAmBG,IAAnB,CAAwB,KAAK1B,IAAL,CAAUuD,QAAV,CAAmB,KAAKR,YAAL,CAAkBpC,KAArC,EAA4CC,SAA5C,CAAsD,UAAOC,EAAP;AAAA,qBAAmB;AAAA;AAAA;AAAA;AAAA;AAC7F,6BAAKX,MAAL,CAAYO,cAAZ,GAA6B,KAA7B;AACAmB,oCAAY,CAACC,OAAb,CAAqB,OAArB,EAA+BhB,EAAE,CAACiB,cAAH,CAAkB,OAAlB,IAA6BjB,EAAE,CAACkB,KAAhC,GAAwC,EAAvE;AACA,6BAAKT,OAAL,CAAaU,cAAb,CAA6BnB,EAAE,CAACiB,cAAH,CAAkB,OAAlB,IAA6BjB,EAAE,CAACkB,KAAhC,GAAwC,EAArE;AAH6F;AAI7F,+BAAM,KAAKhC,MAAL,CAAYyD,QAAZ,CAAqB,CAAC,GAAD,CAArB,CAAN;;AAJ6F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;AAAA,aAAtD,CAAxB;AAMH;AACJ;;;oCAEWC,C,EAAG,CAEd;;;oCAEW;AAAA;;AACR,eAAKtD,WAAL,GAAmB,IAAnB;;AAEA,cAAI,KAAK4C,YAAL,CAAkBvC,KAAtB,EAA6B;AAEzB,iBAAKN,MAAL,CAAYO,cAAZ,GAA6B,IAA7B;AACA,iBAAKc,aAAL,CAAmBG,IAAnB,CAAwB,KAAK1B,IAAL,CAAU0D,yBAAV,CAAoC,KAAKX,YAAL,CAAkBpC,KAAtD,EAA6DC,SAA7D,CAAuE,UAAC+C,IAAD,EAAU;AACrG,oBAAI,CAACzD,MAAL,CAAYO,cAAZ,GAA6B,KAA7B;;AACA,oBAAI,CAACY,MAAL,CAAYuC,IAAZ,CAAiB,gHAAjB,EAAuC;AACnCC,sBAAM,EAAE,OAD2B;AAEnCC,qBAAK,EAAE,OAF4B;AAGnC3E,oBAAI,EAAE,MAAI,CAAC4D,YAAL,CAAkBpC;AAHW,eAAvC,EAIGoD,WAJH,GAIiBnD,SAJjB,CAI2B,UAAOC,EAAP;AAAA,uBAAc;AAAA;AAAA;AAAA;AAAA;AACrCe,sCAAY,CAACC,OAAb,CAAqB,OAArB,EAA+B,CAAAhB,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAE,MAAF,GAAAA,EAAE,CAAEiB,cAAJ,CAAmB,OAAnB,KAA8BjB,EAAE,CAACkB,KAAjC,GAAyC,EAAxE;AADqC;AAErC,iCAAM,KAAKhC,MAAL,CAAYyD,QAAZ,CAAqB,CAAC,GAAD,CAArB,CAAN;;AAFqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAd;AAAA,eAJ3B;AAQH,aAVuB,CAAxB;AAWH;AAGJ;;;sCA0Ba;AACV,eAAKjC,aAAL,CAAmBY,OAAnB,CAA2B,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,WAA5B;AACH;;;4BA1BW;AACR,iBAAO,KAAKU,YAAL,CAAkBT,GAAlB,CAAsB,WAAtB,CAAP;AACH;;;4BAEQ;AACL,iBAAO,KAAKS,YAAL,CAAkBT,GAAlB,CAAsB,OAAtB,CAAP;AACH;;;4BAEO;AACJ,iBAAO,KAAKS,YAAL,CAAkBT,GAAlB,CAAsB,UAAtB,CAAP;AACH;;;4BAEW;AACR,iBAAO,KAAKS,YAAL,CAAkBT,GAAlB,CAAsB,UAAtB,CAAP;AACH;;;4BAEc;AACX,iBAAO,KAAKS,YAAL,CAAkBT,GAAlB,CAAsB,kBAAtB,CAAP;AACH;;;4BAEW;AACR,iBAAO,KAAKS,YAAL,CAAkBT,GAAlB,CAAsB,UAAtB,CAAP;AACH;;;;;;;uBAxGQC,iB,EAAiB,uH,EAAA,2H,EAAA,wI,EAAA,0H,EAAA,oI,EAAA,6I,EAAA,+I;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,c;AAAA,wjC;AAAA;AAAA;ADzB9B;;AACI;;AACI;;AAAwD;AAAA,mBAAS,IAAAxC,MAAA,WAAiB,GAAjB,EAAT;AAA+B,WAA/B;;AAAxD;;AACA;;AACI;;AAAwB;AAAA,mBAAS,IAAAA,MAAA,WAAiB,YAAjB,EAAT;AAAwC,WAAxC;;AAA0C;;AAAK;;AACvE;;AAA8B;;AAAO;;AACzC;;AACJ;;AACA;;AACI;;AACI;;AAAuB;;AAAO;;AAC9B;;AACI;;AACA;;AACA;;AAGA;;AACA;;AACA;;AAIA;;AACI;;AAAmB;AAAA,mBAAiB,IAAAiE,WAAA,QAAjB;AAAoC,WAApC;;AAAnB;;AAKJ;;AAEA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AAGA;;AAGA;;AAEA;;AACA;;AAGA;;AAEA;;AACI;;AAA2B;AAAA,mBAAS,IAAAC,SAAA,EAAT;AAAoB,WAApB;;AAAsB;;AAAO;;AACxD;;AACJ;;AACJ;;AAEJ;;AACJ;;AACJ;;;;AAnDkB;;AAAA;;AAEkB;;AAAA;;AACA;;AAAA;;AAIA;;AAAA;;AACA;;AAAA;;AAOc;;AAAA,oKAAsD,SAAtD,EAAsD,WAAtD;;AAMd;;AAAA;;AACA;;AAAA;;AAMA;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;AAKA;;AAAA;;AAEd;;AAAA;;AAEc;;AAAA;;AAIa;;AAAA;;;;;;;;;sEC/BpC1B,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACPvB,kBAAQ,EAAE,cADH;AAEPC,qBAAW,EAAE,2BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACSY;;AACI;;AAA6B;;;;;;AACjC;;AACO;;AACH;;;;;;AACJ;;AACO;;AACP;;;;;;AAGA;;AAA6D;;AAAqB;;;;;;AAClF;;AACI;;AAA+B;;;;;;AAG/B;;;;AAAa;;;;;;;;AAlBrB;;AACI;;AAAI;;AAAc;;AAClB;;AACA;;AAEA;;AAGA;;AAIA;;AACA;;AACA;;AAEA;;AACI;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAA2B;;AAAM;;AACzC;;AACJ;;AACJ;;;;;;AApBM;;AAGkB;;AAAA;;AAEA;;AAAA;;AAGA;;AAAA;;AAKA;;AAAA;;AACA;;AAAA;;AAIa;;AAAA;;;;;;AAQjC;;;;AAAa;;;;;;;;AALjB;;AACI;;AACA;;AAAI;;AAAgB;;AACpB;;AAAG;;AAA8B;;AACjC;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAAwB;;AAAY;;AAC5C;;AACJ;;;;;;AADiC;;AAAA;;;;QDd5BgD,sB;AAQT,sCACYpE,EADZ,EAEWC,MAFX,EAGWC,IAHX,EAIYmE,KAJZ,EAKYC,SALZ,EAMYnE,MANZ,EAOWC,MAPX,EAQYoB,OARZ,EAQmC;AAAA;;;;AAPvB,aAAAxB,EAAA,GAAAA,EAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACC,aAAAmE,KAAA,GAAAA,KAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAnE,MAAA,GAAAA,MAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AACC,aAAAoB,OAAA,GAAAA,OAAA;AAbZ,aAAAnB,WAAA,GAAc,KAAd;AACA,aAAAkE,WAAA,GAAc,KAAd;AACA,aAAAC,YAAA,GAAe,KAAf;AAcI,aAAKhE,KAAL,GAAa,CAAH,WAAG,KAAK6D,KAAL,CAAWI,QAAd,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEC,WAArB,MAAgC,IAAhC,IAAgC,aAAhC,GAAgC,MAAhC,GAAgC,GAAElE,KAA/C;AACA,YAAMyB,KAAK,GAAG,CAAH,WAAG,KAAKoC,KAAL,CAAWI,QAAd,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEC,WAArB,MAAgC,IAAhC,IAAgC,aAAhC,GAAgC,MAAhC,GAAgC,GAAEzC,KAAhD;AACA,aAAKuC,YAAL,GAAoB,KAAKF,SAAL,CAAeK,cAAf,CAA8B1C,KAA9B,CAApB;AACA,aAAKsC,WAAL,GAAmB,CAAC,CAAC,KAAK/D,KAA1B;AAEA,aAAKoE,aAAL,GAAqB,KAAK5E,EAAL,CAAQO,KAAR,CAAc;AAC/BC,eAAK,EAAE,CAAC,KAAKA,KAAN,EAAa,CAAC,0DAAWC,QAAZ,EAAsB,yFAAiB,sEAAjB,CAAtB,CAAb,CADwB;AAE/BkB,kBAAQ,EAAE,CAAC,EAAD,EACN,CACI,0DAAWlB,QADf,EACyB,yFAAiB,yEAAjB,CADzB,EAEI,0DAAW2C,SAAX,CAAqB,0EAArB,CAFJ,EAE+C,0DAAWC,SAAX,CAAqB,0EAArB,CAF/C,CADM,CAFqB;AAQ/BC,0BAAgB,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW7C,QAAZ,CAAL;AARa,SAAd,EASlB;AAAC+C,mBAAS,EAAE,iGAAqB,UAArB,EAAiC,kBAAjC;AAAZ,SATkB,CAArB;AAUH;;;;mCAEO,CACP;;;yCAEgB;AAAA;;AACb,eAAKnD,WAAL,GAAmB,IAAnB;;AACA,cAAI,KAAKuE,aAAL,CAAmBlE,KAAvB,EAA8B;AAC1B,iBAAKR,IAAL,CAAU2E,SAAV,CAAoB,KAAKD,aAAL,CAAmB/D,KAAvC,EAA8CC,SAA9C,CAAwD,UAAAC,EAAE,EAAI;AAC1De,0BAAY,CAACC,OAAb,CAAqB,OAArB,EAA+B,CAAAhB,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAE,MAAF,GAAAA,EAAE,CAAEiB,cAAJ,CAAmB,OAAnB,KAA8BjB,EAAE,CAACkB,KAAjC,GAAyC,EAAxE;;AACA,oBAAI,CAACT,OAAL,CAAaU,cAAb,CAA6BnB,EAAE,CAACiB,cAAH,CAAkB,OAAlB,IAA6BjB,EAAE,CAACkB,KAAhC,GAAwC,EAArE;;AACA,oBAAI,CAAChC,MAAL,CAAYyD,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACH,aAJD;AAKH;AACJ;;;sCAEa;AAAA;;AACV,eAAKxD,IAAL,CAAUU,mBAAV,CAA8B;AAACJ,iBAAK,EAAE,KAAKA;AAAb,WAA9B,EAAmDM,SAAnD,CAA6D,UAAAC,EAAE,EAAI;AAC/D,kBAAI,CAACZ,MAAL,CAAYa,OAAZ,CAAoB,uDAApB;AACH,WAFD;AAGH;;;4BAEO;AACJ,iBAAO,KAAK4D,aAAL,CAAmBpC,GAAnB,CAAuB,UAAvB,CAAP;AACH;;;4BAEc;AACX,iBAAO,KAAKoC,aAAL,CAAmBpC,GAAnB,CAAuB,kBAAvB,CAAP;AACH;;;;;;;uBA9DQ4B,sB,EAAsB,2H,EAAA,uH,EAAA,wI,EAAA,+H,EAAA,oI,EAAA,yH,EAAA,6I,EAAA,+I;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA,goB;AAAA;AAAA;AClBnC;;AAEI;;AACI;;AAAwB;AAAA,mBAAS,IAAAnE,MAAA,WAAiB,GAAjB,EAAT;AAA+B,WAA/B;;AAAxB;;AACJ;;AACA;;AACI;;AAqBA;;AAOJ;;AACJ;;;;AA7B0C;;AAAA;;AAqBA;;AAAA;;;;;;;;;sEDT7BmE,sB,EAAsB;cALlC,uDAKkC;eALxB;AACPlD,kBAAQ,EAAE,oBADH;AAEPC,qBAAW,EAAE,iCAFN;AAGPC,mBAAS,EAAE,CAAC,iCAAD;AAHJ,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEXvB;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAEA;;AACI;;AACJ;;;;AADiB;;AAAA;;;;;;AAEjB;;AAAsB;;AAAc;;;;;;AAEpC;;AACI;;AACJ;;;;;;;;AACA;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAA8C;;AAAM;;;;;;;;AArBpE;;AACI;;AAAI;;AAAO;;AACX;;AAAI;;AAAuB;;AAC3B;;AAAG;;AAA6F;;AAChG;;AACI;;AACA;;AAGA;;AAGA;;AAAoB;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAW;;AACtD;;AAGA;;AAEA;;AAGA;;AACJ;;AACJ;;;;;;AApBO;;AAAA;;AACG;;AAAA;;AAEe;;AAAA;;AAGA;;AAAA;;AAIU;;AAAA;;AAGxB;;AAAA;;AAEyB;;AAAA;;AAGG;;AAAA;;;;QCP9B0D,oB;AAWT,oCACoCzF,IADpC,EAEY0F,YAFZ,EAGY/E,EAHZ,EAIYE,IAJZ,EAKWE,MALX,EAMWH,MANX,EAMyB;AAAA;;AALW,aAAAZ,IAAA,GAAAA,IAAA;AACxB,aAAA0F,YAAA,GAAAA,YAAA;AACA,aAAA/E,EAAA,GAAAA,EAAA;AACA,aAAAE,IAAA,GAAAA,IAAA;AACD,aAAAE,MAAA,GAAAA,MAAA;AACA,aAAAH,MAAA,GAAAA,MAAA;AAhBX,aAAAO,KAAA,GAAQ,EAAR;AAGA,aAAAwE,WAAA,GAAc,KAAd;AACA,aAAAC,aAAA,GAAgB,KAAhB;AACA,aAAAC,SAAA,GAAY,KAAZ;AACA,aAAAC,UAAA,GAAa,KAAb;AACA,aAAAC,aAAA,GAAgB,KAAhB;AACA,aAAA/E,WAAA,GAAc,KAAd;AAUI,aAAKgF,QAAL,GAAgBhG,IAAI,CAACwE,IAArB;AACA,aAAKrD,KAAL,GAAanB,IAAI,CAACmB,KAAlB;AACA,aAAK8E,cAAL,GAAsB,KAAKtF,EAAL,CAAQO,KAAR,CAAc;AAChCC,eAAK,EAAE,CAAC,KAAKA,KAAN,EAAa,0DAAWC,QAAxB,CADyB;AAEhCoD,cAAI,EAAE,CAAC,IAAD,EAAO,CACT,0DAAWpD,QADF,EACY,yFAAiB,qEAAjB,CADZ,EAET,yFAAiB,gFAAjB,CAFS,CAAP;AAF0B,SAAd,CAAtB;AAOH;;;;mCAEO,CACP;;;qCAEY;AAAA;;AACT,eAAKJ,WAAL,GAAmB,IAAnB;;AACA,cAAI,KAAKiF,cAAL,CAAoB5E,KAAxB,EAA+B;AAC3B,iBAAKN,MAAL,CAAYO,cAAZ,GAA6B,IAA7B;AACA,iBAAKT,IAAL,CAAUqF,qBAAV,CAAgC,KAAKD,cAAL,CAAoBzE,KAApD,EAA2DC,SAA3D,CAAqE,UAAOC,EAAP;AAAA,qBAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC/E,6BAAKiE,WAAL,GAAmB,IAAnB;AACA,6BAAKC,aAAL,GAAqB,KAArB;AACA,6BAAK7E,MAAL,CAAYO,cAAZ,GAA6B,KAA7B;AACA6E,kCAAU,CAAC,YAAM;AACb,gCAAI,CAACT,YAAL,CAAkBU,KAAlB,CAAwB1E,EAAxB;AACH,yBAFS,EAEP,IAFO,CAAV;;AAJ+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAd;AAAA,aAArE;AAUH;AACJ;;;qCAEY;AAAA;;AACT,eAAKqE,aAAL,GAAqB,IAArB;AACA,eAAKF,SAAL,GAAiB,KAAjB;AACA,eAAKhF,IAAL,CAAUwF,2BAAV,CAAsC;AAAClF,iBAAK,EAAE,KAAKA,KAAb;AAAoBmF,kBAAM,EAAE;AAA5B,WAAtC,EAAsE7E,SAAtE,CAAgF,UAAA+C,IAAI,EAAI;AACpF,kBAAI,CAACwB,QAAL,GAAgBxB,IAAhB;AACA,kBAAI,CAACuB,aAAL,GAAqB,KAArB;AACA,kBAAI,CAACD,UAAL,GAAkB,IAAlB;AACH,WAJD;AAKH;;;4BAEY;AACT,iBAAO,KAAKG,cAAL,CAAoB9C,GAApB,CAAwB,OAAxB,CAAP;AACH;;;4BAEW;AACR,iBAAO,KAAK8C,cAAL,CAAoB9C,GAApB,CAAwB,MAAxB,CAAP;AACH;;;;;;;uBAlEQsC,oB,EAAoB,gEAYjB,wEAZiB,C,EAYF,sI,EAAA,2H,EAAA,wI,EAAA,4I,EAAA,uH;AAAA,K;;;YAZlBA,oB;AAAoB,uC;AAAA,c;AAAA,a;AAAA,4e;AAAA;AAAA;ADfjC;;AACI;;AAwBA;;AACI;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;;;AAjCkB;;AAAA;;AAwBT;;AAAA;;AAMgB;;AAAA;;;;;;;;;sEChBZA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACP5D,kBAAQ,EAAE,kBADH;AAEPC,qBAAW,EAAE,+BAFN;AAGPC,mBAAS,EAAE,CAAC,+BAAD;AAHJ,S;AAKsB,Q;;;;kBAYxB,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBhB;AAAA;;;AAAA;AAAA;AAAA;;AAAO,aAASwE,oBAAT,CAA8BC,GAA9B,EAA2CC,eAA3C,EAAoE;AACzE,aAAO,UAACvF,KAAD,EAAsB;AAC3B,YAAMwF,KAAK,GAAGxF,KAAK,CAACyF,QAAN,CAAeH,GAAf,CAAd;AACA,YAAMI,iBAAiB,GAAG1F,KAAK,CAACyF,QAAN,CAAeF,eAAf,CAA1B;;AAEA,YAAI,CAACC,KAAK,CAAClF,KAAP,IAAgB,CAACoF,iBAAiB,CAACpF,KAAvC,EAA8C;AAC5C;AACD;;AAED,eAAOoF,iBAAiB,CAACC,SAAlB,CACLH,KAAK,CAAClF,KAAN,KAAgBoF,iBAAiB,CAACpF,KAAlC,GAA0C;AAACsF,kBAAQ,EAAE;AAAX,SAA1C,GAA6D,IADxD,CAAP;AAGD,OAXD;AAYD","file":"auth-auth-module-es5.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ForgotPasswordComponent} from '@app/auth/forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from '@app/auth/reset-password/reset-password.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: {\r\n            title: 'Login'\r\n        }\r\n    },\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent,\r\n        data: {\r\n            title: 'Register'\r\n        }\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent,\r\n        data: {\r\n            title: 'Forgot Password'\r\n        }\r\n    },\r\n    {\r\n        path: 'reset-password',\r\n        component: ResetPasswordComponent,\r\n        data: {\r\n            title: 'Reset Password'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {AuthRoutingModule} from './auth-routing.module';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {BsDatepickerModule} from 'ngx-bootstrap/datepicker';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MaterialModule} from '@core/modules/material.module';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [LoginComponent, RegisterComponent, VerifyEmailComponent, ForgotPasswordComponent, ResetPasswordComponent],\r\n    imports: [\r\n        CommonModule,\r\n        AuthRoutingModule,\r\n        ReactiveFormsModule,\r\n        BsDatepickerModule.forRoot(),\r\n        MaterialModule,\r\n\r\n    ],\r\n    providers: []\r\n})\r\nexport class AuthModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    forgotPassForm: FormGroup;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService\r\n    ) {\r\n        this.forgotPassForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    sendEmail() {\r\n        this.isSubmitted = true;\r\n        if (this.forgotPassForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            // this.router.navigate(['auth/reset-password']);\r\n            this.auth.sendForgotPassEmail(this.forgotPassForm.value).subscribe(dt => {\r\n                this.loader.formProcessing = false;\r\n                this.toastr.success('Reset password request has been sent to your e-mail');\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"forgotPassForm\">\r\n            <h3>Forgot Password</h3>\r\n            <h4>Enter your email</h4>\r\n            <input placeholder=\"Enter email\" formControlName=\"email\">\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('required') && isSubmitted\">\r\n                Please write your email</span>\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('patternInvalid') && isSubmitted\">\r\n                E-mail is invalid\r\n            </span>\r\n\r\n            <div class=\"actions\">\r\n                <button (click)=\"sendEmail()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"login-btn bg-white\">Login</a>\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/register'])\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Login</p>\r\n            <form [formGroup]=\"loginForm\">\r\n\r\n                <!-- E-mail field -->\r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"email.hasError('required') && isSubmitted\">\r\n          E-mail is <strong>required</strong>\r\n        </span>\r\n                <span class=\"error\" *ngIf=\"email.hasError('patternInvalid')\">\r\n          E-mail is <strong>invalid</strong>\r\n        </span>\r\n\r\n                <!-- Password field -->\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n          Password is <strong>required</strong>\r\n        </span>\r\n                <p class=\"forgot-password\" (click)=\"router.navigate(['auth/forgot-password'])\">Forgot password?</p>\r\n                <a class=\"login-submit\" (click)=\"login()\">Login</a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n    loginForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private authGuard: AuthGuard,\r\n        private dialog: MatDialog,\r\n        private subject: SubjectService\r\n    ) {\r\n        this.loginForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['', Validators.required],\r\n        });\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    login() {\r\n        this.isSubmitted = true;\r\n        if (this.loginForm.valid) {\r\n            this.subscriptions.push(this.auth.login(this.loginForm.value).subscribe(async (dt: any) => {\r\n                localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.subject.changeAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                await this.router.navigateByUrl(this.authGuard.redirectUrl ? this.authGuard.redirectUrl : '/');\r\n            }));\r\n        }\r\n    }\r\n\r\n    get email(): AbstractControl {\r\n        return this.loginForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.loginForm.get('password');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" src=\"assets/img/metltvlogo.svg\" (click)=\"router.navigate(['/'])\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/login'])\">Login</a>\r\n            <a class=\"login-btn bg-white\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Sign Up</p>\r\n            <form [formGroup]=\"registerForm\">\r\n                <input class=\"login-input\" placeholder=\"Full Name\" formControlName=\"full_name\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && fullName.hasError('required')\">Full name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && fullName.hasError('patternInvalid')\">\r\n                    Full name should contain only alphabetical characters\r\n                </span>\r\n                <input class=\"login-input\" placeholder=\"User name\" formControlName=\"username\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('required')\">User name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('patternInvalid')\">\r\n                    Please write alphabetical characters before numbers for username\r\n                </span>\r\n\r\n                <div class=\"register-block birthday-block\">\r\n                    <input type=\"text\" (bsValueChange)=\"dateChanged($event)\" formControlName=\"birthday\"\r\n                           class=\"login-input\"\r\n                           placeholder=\"Birthday\" [bsConfig]=\"{maxDate:maxDate, showWeekNumbers: false}\"\r\n                           [maxDate]=\"maxDate\"\r\n                           bsDatepicker>\r\n                </div>\r\n                \r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('required')\">E-mail is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('patternInvalid')\">\r\n                    E-mail is <strong>invalid</strong>\r\n                </span>\r\n\r\n\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && pass.hasError('required')\">Password is required</span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n                </span>\r\n                <input class=\"login-input\" placeholder=\"Reenter Password\" type=\"password\"\r\n                       formControlName=\"confirm_password\">\r\n                <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n                <span class=\"error\"\r\n                      *ngIf=\"isSubmitted && confirmPass.hasError('required')\">Please confirm the password</span>\r\n\r\n                <span class=\"error\" *ngIf=\"isSubmitted && birthday.hasError('required')\">Birth day is required</span>\r\n\r\n                <div class=\"actions\">\r\n                    <a class=\"register-submit\" (click)=\"openModal()\">Sign Up</a>\r\n                    <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {DatePipe} from '@angular/common';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {\r\n    EMAIL_PATTERN,\r\n    NO_SPACE_PATTERN,\r\n    NUMBER_AFTER_TEXT_PATTERN,\r\n    TEXT_ONLY_PATTERN_WITHOUT_SPECIALS\r\n} from '@core/constants/patterns';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n    registerForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n    currentDate = new Date();\r\n    maxDate: Date;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private datePipe: DatePipe,\r\n        private dialog: MatDialog,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService\r\n    ) {\r\n\r\n        // Age-restriction of 18\r\n        this.maxDate = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() - 18));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.registerForm = this.fb.group({\r\n                full_name: ['', [Validators.required, patternValidator(TEXT_ONLY_PATTERN_WITHOUT_SPECIALS)]],\r\n                username: ['', [Validators.required, patternValidator(NUMBER_AFTER_TEXT_PATTERN)]],\r\n                email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n                password: ['',\r\n                    [\r\n                        Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                        Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                    ],\r\n                ],\r\n                // confirm_password: new FormControl('', {validators: [Validators.required], updateOn: 'blur'}),\r\n                confirm_password: ['', Validators.required],\r\n                birthday: ['', Validators.required],\r\n            },\r\n            {validator: passwordConfirmation('password', 'confirm_password')}\r\n        );\r\n    }\r\n\r\n    register() {\r\n        if (this.registerForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.register(this.registerForm.value).subscribe(async (dt: any) => {\r\n                this.loader.formProcessing = false;\r\n                localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.subject.changeAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                await this.router.navigate(['/']);\r\n            }));\r\n        }\r\n    }\r\n\r\n    dateChanged(e) {\r\n\r\n    }\r\n\r\n    openModal() {\r\n        this.isSubmitted = true;\r\n\r\n        if (this.registerForm.valid) {\r\n\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.sendEmailVerificationCode(this.registerForm.value).subscribe((code) => {\r\n                this.loader.formProcessing = false;\r\n                this.dialog.open(VerifyEmailComponent, {\r\n                    height: '548px',\r\n                    width: '548px',\r\n                    data: this.registerForm.value\r\n                }).afterClosed().subscribe(async (dt) => {\r\n                    localStorage.setItem('token', (dt?.hasOwnProperty('token') ? dt.token : ''));\r\n                    await this.router.navigate(['/']);\r\n                });\r\n            }));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    get fullName(): AbstractControl {\r\n        return this.registerForm.get('full_name');\r\n    }\r\n\r\n    get email(): AbstractControl {\r\n        return this.registerForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.registerForm.get('password');\r\n    }\r\n\r\n    get username(): AbstractControl {\r\n        return this.registerForm.get('username');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.registerForm.get('confirm_password');\r\n    }\r\n\r\n    get birthday(): AbstractControl {\r\n        return this.registerForm.get('birthday');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN, NO_SPACE_PATTERN} from '@core/constants/patterns';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\n\r\n@Component({\r\n    selector: 'app-reset-password',\r\n    templateUrl: './reset-password.component.html',\r\n    styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    resetPassForm: FormGroup;\r\n    isSubmitted = false;\r\n    emailPassed = false;\r\n    tokenExpired = false;\r\n    email;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private route: ActivatedRoute,\r\n        private jwtHelper: JwtHelperService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService\r\n    ) {\r\n\r\n        this.email = this.route.snapshot?.queryParams?.email;\r\n        const token = this.route.snapshot?.queryParams?.token;\r\n        this.tokenExpired = this.jwtHelper.isTokenExpired(token);\r\n        this.emailPassed = !!this.email;\r\n\r\n        this.resetPassForm = this.fb.group({\r\n            email: [this.email, [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['',\r\n                [\r\n                    Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                    Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                ],\r\n            ],\r\n            confirm_password: ['', [Validators.required]]\r\n        }, {validator: passwordConfirmation('password', 'confirm_password')});\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    changePassword() {\r\n        this.isSubmitted = true;\r\n        if (this.resetPassForm.valid) {\r\n            this.auth.resetPass(this.resetPassForm.value).subscribe(dt => {\r\n                localStorage.setItem('token', (dt?.hasOwnProperty('token') ? dt.token : ''));\r\n                this.subject.changeAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.router.navigate(['/']);\r\n            });\r\n        }\r\n    }\r\n\r\n    resendEmail() {\r\n        this.auth.sendForgotPassEmail({email: this.email}).subscribe(dt => {\r\n            this.toastr.success('Reset password request has been resent to your e-mail');\r\n        });\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.resetPassForm.get('password');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.resetPassForm.get('confirm_password');\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"resetPassForm\" *ngIf=\"emailPassed && !tokenExpired\">\r\n            <h3>Reset Password</h3>\r\n            <input type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n            <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n                Please write the new password</span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n            </span>\r\n\r\n            <input type=\"password\" placeholder=\"Reenter Password\" formControlName=\"confirm_password\">\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('required') && isSubmitted\">\r\n                Please re-type the new password</span>\r\n            <div class=\"actions\">\r\n                <button (click)=\"changePassword()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n        <div id=\"token-expired-container\" *ngIf=\"tokenExpired\">\r\n            <img src=\"assets/img/undraw_calendar_dutt.svg\">\r\n            <h3>Session expired.</h3>\r\n            <p>The link is not valid anymore.</p>\r\n            <button (click)=\"resendEmail()\">Resend email</button>\r\n            <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<div id=\"verify-email\">\r\n    <ng-container *ngIf=\"!codeChecked\">\r\n        <h1>Sign up</h1>\r\n        <h3>Enter verification code</h3>\r\n        <p>We've sent a 4 digit code to {{email}}. Confirm it belongs to you to keep your account secure</p>\r\n        <form [formGroup]=\"verifyCodeForm\">\r\n            <input placeholder=\"Enter code\" formControlName=\"code\">\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('required') && isSubmitted\">\r\n                Please provide the code that was sent to your email\r\n            </p>\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('patternInvalid') && isSubmitted\">\r\n                Please write exactly 4 digits only\r\n            </p>\r\n            <p id=\"resend-code\" (click)=\"resendCode()\">Resend code</p>\r\n            <div class=\"loader-holder\" *ngIf=\"loader.formProcessing\">\r\n                <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n            </div>\r\n            <p *ngIf=\"codeResent\">Code is resent</p>\r\n\r\n            <p class=\"error wrong-code\" *ngIf=\"!emailCtrl.hasError('required') && codeWrong\">\r\n                The code is wrong\r\n            </p>\r\n            <button (click)=\"verifyCode()\" *ngIf=\"!verifyingCode\">Submit</button>\r\n        </form>\r\n    </ng-container>\r\n    <div [hidden]=\"!codeChecked\" id=\"thanks\">\r\n        <img src=\"assets/img/checked.svg\">\r\n        <p class=\"thanks-for-verification\">\r\n            Thanks for verifying your e-mail address.\r\n        </p>\r\n        <div class=\"loader-holder\">\r\n            <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {FOUR_DIGIT_NUMBERS_ONLY, NUMBERS_ONLY} from '@core/constants/patterns';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Router} from '@angular/router';\r\nimport {PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\n\r\n@Component({\r\n    selector: 'app-verify-email',\r\n    templateUrl: './verify-email.component.html',\r\n    styleUrls: ['./verify-email.component.scss']\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n    email = '';\r\n    verifyCodeForm: FormGroup;\r\n    sentCode: number;\r\n    codeChecked = false;\r\n    verifyingCode = false;\r\n    codeWrong = false;\r\n    codeResent = false;\r\n    codeResending = false;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private matDialogRef: MatDialogRef<VerifyEmailComponent>,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        public loader: LoaderService,\r\n        public router: Router\r\n    ) {\r\n        this.sentCode = data.code;\r\n        this.email = data.email;\r\n        this.verifyCodeForm = this.fb.group({\r\n            email: [this.email, Validators.required],\r\n            code: [null, [\r\n                Validators.required, patternValidator(NUMBERS_ONLY),\r\n                patternValidator(FOUR_DIGIT_NUMBERS_ONLY)\r\n            ]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    verifyCode() {\r\n        this.isSubmitted = true;\r\n        if (this.verifyCodeForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.auth.checkVerificationCode(this.verifyCodeForm.value).subscribe(async (dt) => {\r\n                this.codeChecked = true;\r\n                this.verifyingCode = false;\r\n                this.loader.formProcessing = false;\r\n                setTimeout(() => {\r\n                    this.matDialogRef.close(dt);\r\n                }, 4000);\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    resendCode() {\r\n        this.codeResending = true;\r\n        this.codeWrong = false;\r\n        this.auth.resendEmailVerificationCode({email: this.email, resend: 1}).subscribe(code => {\r\n            this.sentCode = code;\r\n            this.codeResending = false;\r\n            this.codeResent = true;\r\n        });\r\n    }\r\n\r\n    get emailCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('email');\r\n    }\r\n\r\n    get codeCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('code');\r\n    }\r\n\r\n}\r\n","import {FormGroup} from '@angular/forms';\r\n\r\nexport function passwordConfirmation(key: string, confirmationKey: string) {\r\n  return (group: FormGroup) => {\r\n    const input = group.controls[key];\r\n    const confirmationInput = group.controls[confirmationKey];\r\n\r\n    if (!input.value || !confirmationInput.value) {\r\n      return;\r\n    }\r\n\r\n    return confirmationInput.setErrors(\r\n      input.value !== confirmationInput.value ? {notMatch: true} : null\r\n    );\r\n  };\r\n}\r\n"]}