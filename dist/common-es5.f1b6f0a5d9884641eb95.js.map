{"version":3,"sources":["webpack:///src/app/shared/components/video-filters/video-filters.component.ts","webpack:///src/app/shared/components/video-filters/video-filters.component.html","webpack:///src/app/core/services/playlists.service.ts","webpack:///src/app/shared/directives/fix-group-page-url.directive.ts"],"names":["VideoFiltersComponent","videoService","ifObjectEmpty","subjectService","filters","selectedFilters","subscriptions","trackByElement","filterAction","this","push","getToggleFiltersData","subscribe","dt","emit","group","name","value","PlaylistsService","httpClient","params","post","get","put","FixGroupPageUrlDirective","lowerCaseRemoveSpaces","router","url","replace","navigate","transform"],"mappings":"wkBAAA,8J,qCCUoB,mBAA8C,0HAE1C,mBAAU,gBAAK,OACnB,Q,qCANJ,eAEI,iBAAM,oHAAgD,QAAa,OACnE,yBAIJ,O,sDANI,iIACsD,qBAE9C,sI,yBAVxB,QAEI,gBACI,cAAuB,QAAqB,OAC5C,sBACA,aACI,qBASJ,OACJ,OACJ,Q,uBAd+B,2BAGK,iCDMjC,qBAAMA,EAAN,WAQH,WACYC,EACAC,EACAC,2BAFA,KAAAF,eACA,KAAAC,gBACA,KAAAC,iBAVZ,KAAAC,QAAU,IACV,KAAAC,gBAAkB,GAClB,KAAAC,cAAgC,GAChC,KAAAC,eAAiB,IAEC,KAAAC,aAAe,IAAI,IANlC,wDAeO,WACNC,KAAKH,cAAcI,KAAKD,KAAKN,eAAeQ,uBAAuBC,WAAUC,YACzEJ,EAAKJ,gBAAkB,GACvBI,EAAKD,aAAaM,KAAKL,EAAKJ,uBAlBjC,oCAsBwBU,GAAMA,IAApBC,EAAoBD,EAArB,KAAOE,EAAcF,EAAhB,MACbN,KAAKJ,gBAAgBU,GAAS,CAACC,OAAMC,SACrCR,KAAKD,aAAaM,KAAKL,KAAKJ,mBAxB7B,qCA2ByBU,GAAMA,oCACvBN,KAAKJ,gBAAgBU,GAK5BN,KAAKD,aAAaM,KAAKL,KAAKJ,qBAjC7B,K,6CAAML,GAAqB,gC,uBAArBA,EAAqB,iaCblC,gBACI,+BAkBJ,Q,MAlBkB,kCAAsD,mC,47DDYjE,I,kCEZP,0EAMO,iBAAMkB,EAAN,WAEH,WACYC,2BAAA,KAAAA,aAHT,yDAOSC,GACR,OAAOX,KAAKU,WAAWE,KAAa,IAAH,gBAA2BD,KAR7D,0CAWiBA,GAChB,OAAOX,KAAKU,WAAWE,KAAa,IAAH,uBAAkCD,KAZpE,+CAesBA,GACrB,OAAOX,KAAKU,WAAWE,KAAa,IAAH,yCAAoDD,KAhBtF,0BAmBCA,GACA,OAAOX,KAAKU,WAAWG,IAAY,IAAH,gBAA2B,CAACF,aApB7D,8BAuBKA,GACJ,OAAOX,KAAKU,WAAWG,IAAY,IAAH,sBAAiC,CAACF,aAxBnE,sCA2BaA,GACZ,OAAOX,KAAKU,WAAWG,IAAY,IAAH,mBAA8B,CAACF,aA5BhE,oCA+BWA,GACV,OAAOX,KAAKU,WAAWI,IAAY,IAAH,2BAAsCH,KAhCvE,0CAmCiBA,GAChB,OAAOX,KAAKU,WAAWI,IAAY,IAAH,kCAA6CH,KApC9E,yCAuCgBA,GACf,OAAOX,KAAKU,WAAWI,IAAY,IAAH,iCAA4CH,KAxC7E,8CA2CqBA,GACpB,OAAOX,KAAKU,WAAWI,IAAY,IAAH,6BAAwCH,KA5CzE,8CA+CqBA,GACpB,OAAOX,KAAKU,WAALV,OAA+B,IAAH,yBAAoC,CAACW,aAhDzE,qCAmDYA,GACX,OAAOX,KAAKU,WAALV,OAA+B,IAAH,mBAA8B,CAACW,eApDnE,K,6CAAMF,GAAgB,Y,yBAAhBA,EAAgB,QAAhBA,EAAgB,qBAFb,S,EAET,I,wHCAA,iBAAMM,EAAN,WAIH,WACYC,EACAC,2BADA,KAAAD,wBACA,KAAAC,SANT,uD,kKAY0D,OAAnDC,EAAM,WAAalB,KAAKO,KAAKY,QAAQ,MAAO,KAAO,U,SACnDnB,KAAKiB,OAAOG,SAAS,CAACpB,KAAKgB,sBAAsBK,UAAUH,K,oDAblE,K,6CAAMH,GAAwB,sB,uBAAxBA,EAAwB,iF,iCAAxB,iB,yBAAN","file":"x","sourcesContent":["import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {VIDEO_FILTERS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-video-filters',\r\n    templateUrl: './video-filters.component.html',\r\n    styleUrls: ['./video-filters.component.scss']\r\n})\r\nexport class VideoFiltersComponent implements OnInit {\r\n    filters = VIDEO_FILTERS;\r\n    selectedFilters = {};\r\n    subscriptions: Subscription[] = [];\r\n    trackByElement = trackByElement;\r\n\r\n    @Output('filter') filterAction = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private ifObjectEmpty: CheckForEmptyObjectPipe,\r\n        private subjectService: SubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.selectedFilters = {};\r\n            this.filterAction.emit(this.selectedFilters);\r\n        }));\r\n    }\r\n\r\n    applyFilter({name, value}, group) {\r\n        this.selectedFilters[group] = {name, value};\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n    removeFilter({name, value}, group) {\r\n        delete this.selectedFilters[group];\r\n        // if (this.ifObjectEmpty.transform(this.selectedFilters)) {\r\n        // this.selectedFilters = {};\r\n        // }\r\n\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n}\r\n","<div class=\"filter-groups\">\r\n    <ng-container *ngFor=\"let filter of filters; trackBy:trackByElement\">\r\n\r\n        <div class=\"filter-group\">\r\n            <p class=\"filter-name\">{{filter.group.name}}</p>\r\n            <mat-divider></mat-divider>\r\n            <ul>\r\n                <li class=\"filter-item\" *ngFor=\"let item of filter.items\"\r\n                    [class.selected]=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                    <span (click)=\"applyFilter(item, filter.group.value)\">{{item.name}}</span>\r\n                    <button mat-icon-button class=\"remove-filter\" (click)=\"removeFilter(item, filter.group.value)\"\r\n                            *ngIf=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                        <mat-icon>clear</mat-icon>\r\n                    </button>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PlaylistsService {\r\n\r\n    constructor(\r\n        private httpClient: HttpClient\r\n    ) {\r\n    }\r\n\r\n    addPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add`, params);\r\n    }\r\n\r\n    addVideosToPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-videos`, params);\r\n    }\r\n\r\n    addVideoToOtherPlaylists(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-video-to-other-playlists`, params);\r\n    }\r\n\r\n    get(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get`, {params});\r\n    }\r\n\r\n    getById(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get-by-id`, {params});\r\n    }\r\n\r\n    searchPlaylists(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/search`, {params});\r\n    }\r\n\r\n    updatePrivacy(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-privacy`, params);\r\n    }\r\n\r\n    updateVideoPosition(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-video-position`, params);\r\n    }\r\n\r\n    updatePlaylistInfo(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-playlist-info`, params);\r\n    }\r\n\r\n    changePlaylistThumbnail(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/change-thumbnail`, params);\r\n    }\r\n\r\n    removeVideoFromPlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove-video`, {params});\r\n    }\r\n\r\n    removePlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove`, {params});\r\n    }\r\n}\r\n","import {Directive, HostListener, Input} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[appNavigateToFixedGroupUrl]'\r\n})\r\nexport class FixGroupPageUrlDirective {\r\n\r\n    @Input() name;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private router: Router\r\n    ) {\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    async onClick() {\r\n        const url = '/groups/' + this.name.replace(' /g', '_') + '/people';\r\n        await this.router.navigate([this.lowerCaseRemoveSpaces.transform(url)]);\r\n    }\r\n\r\n}\r\n"]}