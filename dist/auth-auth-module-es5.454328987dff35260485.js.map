{"version":3,"sources":["webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/core/helpers/password-confirmation.ts","webpack:///src/app/core/components/modals/verify-email/verify-email.component.html","webpack:///src/app/core/components/modals/verify-email/verify-email.component.ts","webpack:///src/app/auth/register/register.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/forgot-password/forgot-password.component.html","webpack:///src/app/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/auth/reset-password/reset-password.component.html","webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/reset-password/reset-password.component.ts","webpack:///src/app/auth/auth.module.ts"],"names":["LoginComponent","router","fb","auth","authGuard","dialog","subject","userStore","socketService","subscriptions","isSubmitted","this","loginForm","group","email","required","password","valid","push","login","value","subscribe","dt","token","localStorage","setItem","setAuthUser","navigateByUrl","redirectUrl","forEach","s","unsubscribe","get","passwordConfirmation","key","confirmationKey","input","controls","confirmationInput","setErrors","notMatch","VerifyEmailComponent","data","matDialogRef","loader","codeChecked","verifyingCode","codeWrong","codeResent","codeResending","sentCode","code","verifyCodeForm","formProcessing","checkVerificationCode","setTimeout","close","resendEmailVerificationCode","resend","RegisterComponent","datePipe","currentDate","Date","maxDate","setFullYear","getFullYear","initForm","registerForm","first_name","last_name","username","minLength","maxLength","confirm_password","birthday","format","validator","register","hasOwnProperty","navigate","e","sendEmailVerificationCode","open","height","width","afterClosed","openModal","ForgotPasswordComponent","toastr","forgotPassForm","sendForgotPassEmail","success","sendEmail","ResetPasswordComponent","AuthRoutingModule","AuthModule","routes","path","component","title","route","jwtHelper","emailPassed","tokenExpired","snapshot","queryParams","isTokenExpired","resetPassForm","resetPass","forChild"],"mappings":"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","file":"x","sourcesContent":["<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"login-btn bg-white\">Login</a>\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/register'])\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Login</p>\r\n            <form [formGroup]=\"loginForm\">\r\n\r\n                <!-- E-mail field -->\r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"email.hasError('required') && isSubmitted\">\r\n          E-mail is <strong>required</strong>\r\n        </span>\r\n                <span class=\"error\" *ngIf=\"email.hasError('patternInvalid')\">\r\n          E-mail is <strong>invalid</strong>\r\n        </span>\r\n\r\n                <!-- Password field -->\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n          Password is <strong>required</strong>\r\n        </span>\r\n                <p class=\"forgot-password\" (click)=\"router.navigate(['auth/forgot-password'])\">Forgot password?</p>\r\n                <a class=\"login-submit\" (click)=\"login()\">Login</a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport jwtDecode from 'jwt-decode';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n    loginForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private authGuard: AuthGuard,\r\n        private dialog: MatDialog,\r\n        private subject: SubjectService,\r\n        private userStore: UserStoreService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n        this.loginForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['', Validators.required],\r\n        });\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    login() {\r\n        this.isSubmitted = true;\r\n        if (this.loginForm.valid) {\r\n            this.subscriptions.push(this.auth.login(this.loginForm.value).subscribe(async (dt: any) => {\r\n                const token = dt?.token;\r\n                if (token) {\r\n                    localStorage.setItem('token', token);\r\n                    this.userStore.setAuthUser(token);\r\n                }\r\n\r\n                await this.router.navigateByUrl(this.authGuard.redirectUrl || '/');\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n    get email(): AbstractControl {\r\n        return this.loginForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.loginForm.get('password');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {FormGroup} from '@angular/forms';\r\n\r\nexport function passwordConfirmation(key: string, confirmationKey: string) {\r\n  return (group: FormGroup) => {\r\n    const input = group.controls[key];\r\n    const confirmationInput = group.controls[confirmationKey];\r\n\r\n    if (!input.value || !confirmationInput.value) {\r\n      return;\r\n    }\r\n\r\n    return confirmationInput.setErrors(\r\n      input.value !== confirmationInput.value ? {notMatch: true} : null\r\n    );\r\n  };\r\n}\r\n","<div id=\"verify-email\">\r\n    <ng-container *ngIf=\"!codeChecked\">\r\n        <h1>Sign up</h1>\r\n        <h3>Enter verification code</h3>\r\n        <p>We've sent a 4 digit code to {{email}}. Confirm it belongs to you to keep your account secure</p>\r\n        <form [formGroup]=\"verifyCodeForm\">\r\n            <input placeholder=\"Enter code\" formControlName=\"code\">\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('required') && isSubmitted\">\r\n                Please provide the code that was sent to your email\r\n            </p>\r\n            <p class=\"error\" *ngIf=\"verifyCodeForm.get('code').hasError('patternInvalid') && isSubmitted\">\r\n                Please write exactly 4 digits only\r\n            </p>\r\n            <p id=\"resend-code\" (click)=\"resendCode()\">Resend code</p>\r\n            <div class=\"loader-holder\" *ngIf=\"loader.formProcessing\">\r\n                <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n            </div>\r\n            <p *ngIf=\"codeResent\">Code is resent</p>\r\n\r\n            <p class=\"error wrong-code\" *ngIf=\"!emailCtrl.hasError('required') && codeWrong\">\r\n                The code is wrong\r\n            </p>\r\n            <button (click)=\"verifyCode()\" *ngIf=\"!verifyingCode\">Submit</button>\r\n        </form>\r\n    </ng-container>\r\n    <div [hidden]=\"!codeChecked\" id=\"thanks\">\r\n        <img src=\"assets/img/checked.svg\">\r\n        <p class=\"thanks-for-verification\">\r\n            Thanks for verifying your e-mail address.\r\n        </p>\r\n        <div class=\"loader-holder\">\r\n            <mat-spinner [diameter]=\"25\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {FOUR_DIGIT_NUMBERS_ONLY, NUMBERS_ONLY} from '@core/constants/patterns';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Router} from '@angular/router';\r\nimport {PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\n\r\n@Component({\r\n    selector: 'app-verify-email',\r\n    templateUrl: './verify-email.component.html',\r\n    styleUrls: ['./verify-email.component.scss']\r\n})\r\nexport class VerifyEmailComponent implements OnInit {\r\n    email = '';\r\n    verifyCodeForm: FormGroup;\r\n    sentCode: number;\r\n    codeChecked = false;\r\n    verifyingCode = false;\r\n    codeWrong = false;\r\n    codeResent = false;\r\n    codeResending = false;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private matDialogRef: MatDialogRef<VerifyEmailComponent>,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        public loader: LoaderService,\r\n        public router: Router\r\n    ) {\r\n        this.sentCode = data.code;\r\n        this.email = data.email;\r\n        this.verifyCodeForm = this.fb.group({\r\n            email: [this.email, Validators.required],\r\n            code: [null, [\r\n                Validators.required, patternValidator(NUMBERS_ONLY),\r\n                patternValidator(FOUR_DIGIT_NUMBERS_ONLY)\r\n            ]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    verifyCode() {\r\n        this.isSubmitted = true;\r\n        if (this.verifyCodeForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.auth.checkVerificationCode(this.verifyCodeForm.value).subscribe(async (dt) => {\r\n                this.codeChecked = true;\r\n                this.verifyingCode = false;\r\n                this.loader.formProcessing = false;\r\n                setTimeout(() => {\r\n                    this.matDialogRef.close(dt);\r\n                }, 4000);\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    resendCode() {\r\n        this.codeResending = true;\r\n        this.codeWrong = false;\r\n        this.auth.resendEmailVerificationCode({email: this.email, resend: 1}).subscribe(code => {\r\n            this.sentCode = code;\r\n            this.codeResending = false;\r\n            this.codeResent = true;\r\n        });\r\n    }\r\n\r\n    get emailCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('email');\r\n    }\r\n\r\n    get codeCtrl(): AbstractControl {\r\n        return this.verifyCodeForm.get('code');\r\n    }\r\n\r\n}\r\n","<section class=\"login-content\">\r\n    <div class=\"login-content-left\">\r\n        <img class=\"login-logo\" src=\"assets/img/metltvlogo.svg\" (click)=\"router.navigate(['/'])\">\r\n        <div class=\"login-abs\">\r\n            <a class=\"register-btn\" (click)=\"router.navigate(['auth/login'])\">Login</a>\r\n            <a class=\"login-btn bg-white\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"login-content-right\">\r\n        <div class=\"login-block\">\r\n            <p class=\"login-title\">Sign Up</p>\r\n            <form [formGroup]=\"registerForm\">\r\n                <input class=\"login-input\" placeholder=\"First Name\" formControlName=\"first_name\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && firstName.hasError('required')\">First name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && firstName.hasError('patternInvalid')\">\r\n                    First name should contain only alphabetical characters\r\n                </span>\r\n\r\n                <input class=\"login-input\" placeholder=\"Last Name\" formControlName=\"last_name\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && lastName.hasError('required')\">Last name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && lastName.hasError('patternInvalid')\">\r\n                    Last name should contain only alphabetical characters\r\n                </span>\r\n\r\n\r\n                <input class=\"login-input\" placeholder=\"User name\" formControlName=\"username\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('required')\">User name is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && username.hasError('patternInvalid')\">\r\n                    Please write alphabetical characters before numbers for username\r\n                </span>\r\n\r\n<!--                <div class=\"register-block birthday-block\">-->\r\n<!--                    <input type=\"text\" (bsValueChange)=\"dateChanged($event)\" formControlName=\"birthday\"-->\r\n<!--                           class=\"login-input\"-->\r\n<!--                           placeholder=\"Birthday\" [bsConfig]=\"{maxDate:maxDate, showWeekNumbers: false}\"-->\r\n<!--                           [maxDate]=\"maxDate\"-->\r\n<!--                           bsDatepicker>-->\r\n<!--                </div>-->\r\n\r\n                <input class=\"login-input\" placeholder=\"Email\" formControlName=\"email\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('required')\">E-mail is required</span>\r\n                <span class=\"error\" *ngIf=\"isSubmitted && email.hasError('patternInvalid')\">\r\n                    E-mail is <strong>invalid</strong>\r\n                </span>\r\n\r\n\r\n                <input class=\"login-input\" placeholder=\"Password\" type=\"password\" formControlName=\"password\">\r\n                <span class=\"error\" *ngIf=\"isSubmitted && pass.hasError('required')\">Password is required</span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n                <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n                </span>\r\n                <input class=\"login-input\" placeholder=\"Reenter Password\" type=\"password\"\r\n                       formControlName=\"confirm_password\">\r\n                <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n                <span class=\"error\"\r\n                      *ngIf=\"isSubmitted && confirmPass.hasError('required')\">Please confirm the password</span>\r\n\r\n                <span class=\"error\" *ngIf=\"isSubmitted && birthday.hasError('required')\">Birth day is required</span>\r\n\r\n                <div class=\"actions\">\r\n                    <a class=\"register-submit\" (click)=\"openModal()\">Sign Up</a>\r\n                    <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {DatePipe} from '@angular/common';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {\r\n    EMAIL_PATTERN,\r\n    NO_SPACE_PATTERN,\r\n    NUMBER_AFTER_TEXT_PATTERN,\r\n    TEXT_ONLY_PATTERN_WITHOUT_SPECIALS\r\n} from '@core/constants/patterns';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport moment from 'moment';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n    registerForm: FormGroup;\r\n    subscriptions: Subscription[] = [];\r\n    isSubmitted = false;\r\n    currentDate = new Date();\r\n    maxDate: Date;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private fb: FormBuilder,\r\n        private auth: AuthService,\r\n        private datePipe: DatePipe,\r\n        private dialog: MatDialog,\r\n        public loader: LoaderService,\r\n        private subject: SubjectService,\r\n        private userStore: UserStoreService\r\n    ) {\r\n\r\n        // Age-restriction of 18\r\n        this.maxDate = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() - 18));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initForm();\r\n    }\r\n\r\n    initForm() {\r\n        this.registerForm = this.fb.group({\r\n                first_name: ['', [Validators.required, patternValidator(TEXT_ONLY_PATTERN_WITHOUT_SPECIALS)]],\r\n                last_name: ['', [Validators.required, patternValidator(TEXT_ONLY_PATTERN_WITHOUT_SPECIALS)]],\r\n                username: ['', [Validators.required, patternValidator(NUMBER_AFTER_TEXT_PATTERN)]],\r\n                email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n                password: ['',\r\n                    [\r\n                        Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                        Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                    ],\r\n                ],\r\n                // confirm_password: new FormControl('', {validators: [Validators.required], updateOn: 'blur'}),\r\n                confirm_password: ['', Validators.required],\r\n                birthday: [moment().format('YYYY-MM-DD')], // Validators.required\r\n            },\r\n            {validator: passwordConfirmation('password', 'confirm_password')}\r\n        );\r\n    }\r\n\r\n    register() {\r\n        if (this.registerForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.register(this.registerForm.value).subscribe(async (dt: any) => {\r\n                this.loader.formProcessing = false;\r\n                localStorage.setItem('token', (dt.hasOwnProperty('token') ? dt.token : ''));\r\n                this.userStore.setAuthUser((dt.hasOwnProperty('token') ? dt.token : ''));\r\n                await this.router.navigate(['/']);\r\n            }));\r\n        }\r\n    }\r\n\r\n    dateChanged(e) {\r\n\r\n    }\r\n\r\n    openModal() {\r\n        this.isSubmitted = true;\r\n\r\n        if (this.registerForm.valid) {\r\n\r\n            this.loader.formProcessing = true;\r\n            this.subscriptions.push(this.auth.sendEmailVerificationCode(this.registerForm.value).subscribe((code) => {\r\n                this.loader.formProcessing = false;\r\n                this.dialog.open(VerifyEmailComponent, {\r\n                    height: '548px',\r\n                    width: '548px',\r\n                    data: this.registerForm.value\r\n                }).afterClosed().subscribe(async (dt) => {\r\n                    localStorage.setItem('token', (dt?.hasOwnProperty('token') ? dt.token : ''));\r\n                    await this.router.navigate(['/']);\r\n                });\r\n            }));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    get firstName(): AbstractControl {\r\n        return this.registerForm.get('first_name');\r\n    }\r\n\r\n    get lastName(): AbstractControl {\r\n        return this.registerForm.get('last_name');\r\n    }\r\n\r\n    get email(): AbstractControl {\r\n        return this.registerForm.get('email');\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.registerForm.get('password');\r\n    }\r\n\r\n    get username(): AbstractControl {\r\n        return this.registerForm.get('username');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.registerForm.get('confirm_password');\r\n    }\r\n\r\n    get birthday(): AbstractControl {\r\n        return this.registerForm.get('birthday');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"forgotPassForm\">\r\n            <h3>Forgot Password</h3>\r\n            <h4>Enter your email</h4>\r\n            <input placeholder=\"Enter email\" formControlName=\"email\">\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('required') && isSubmitted\">\r\n                Please write your email</span>\r\n            <span class=\"error\" *ngIf=\"forgotPassForm.get('email').hasError('patternInvalid') && isSubmitted\">\r\n                E-mail is invalid\r\n            </span>\r\n\r\n            <div class=\"actions\">\r\n                <button (click)=\"sendEmail()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN} from '@core/constants/patterns';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    forgotPassForm: FormGroup;\r\n    isSubmitted = false;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService\r\n    ) {\r\n        this.forgotPassForm = this.fb.group({\r\n            email: ['', [Validators.required, patternValidator(EMAIL_PATTERN)]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    sendEmail() {\r\n        this.isSubmitted = true;\r\n        if (this.forgotPassForm.valid) {\r\n            this.loader.formProcessing = true;\r\n            // this.router.navigate(['auth/reset-password']);\r\n            this.auth.sendForgotPassEmail(this.forgotPassForm.value).subscribe(dt => {\r\n                this.loader.formProcessing = false;\r\n                this.toastr.success('Reset password request has been sent to your e-mail');\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"page-container\">\r\n\r\n    <div class=\"metltv-background\">\r\n        <img class=\"login-logo\" (click)=\"router.navigate(['/'])\" src=\"assets/img/metltvlogo.svg\">\r\n    </div>\r\n    <div id=\"forgot-pass-form-container\">\r\n        <form [formGroup]=\"resetPassForm\" *ngIf=\"emailPassed && !tokenExpired\">\r\n            <h3>Reset Password</h3>\r\n            <input type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n            <span class=\"error\" *ngIf=\"pass.hasError('required') && isSubmitted\">\r\n                Please write the new password</span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('patternInvalid')\">\r\n                   Password should not contain spaces\r\n                </span>\r\n            <span class=\"error\" *ngIf=\"pass.hasError('maxlength')||pass.hasError('minlength')\">\r\n                   Password should be between 6-15 characters\r\n            </span>\r\n\r\n            <input type=\"password\" placeholder=\"Reenter Password\" formControlName=\"confirm_password\">\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('notMatch')\">Passwords don't match</span>\r\n            <span class=\"error\" *ngIf=\"confirmPass.hasError('required') && isSubmitted\">\r\n                Please re-type the new password</span>\r\n            <div class=\"actions\">\r\n                <button (click)=\"changePassword()\">Submit</button>\r\n                <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n        <div id=\"token-expired-container\" *ngIf=\"tokenExpired\">\r\n            <img src=\"assets/img/undraw_calendar_dutt.svg\">\r\n            <h3>Session expired.</h3>\r\n            <p>The link is not valid anymore.</p>\r\n            <button (click)=\"resendEmail()\">Resend email</button>\r\n            <mat-spinner [diameter]=\"15\" *ngIf=\"loader.formProcessing\"></mat-spinner>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ForgotPasswordComponent} from '@app/auth/forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from '@app/auth/reset-password/reset-password.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: {\r\n            title: 'Login'\r\n        }\r\n    },\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent,\r\n        data: {\r\n            title: 'Register'\r\n        }\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent,\r\n        data: {\r\n            title: 'Forgot Password'\r\n        }\r\n    },\r\n    {\r\n        path: 'reset-password',\r\n        component: ResetPasswordComponent,\r\n        data: {\r\n            title: 'Reset Password'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {patternValidator} from '@core/helpers/pattern-validator';\r\nimport {EMAIL_PATTERN, NO_SPACE_PATTERN} from '@core/constants/patterns';\r\nimport {passwordConfirmation} from '@core/helpers/password-confirmation';\r\nimport {PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH} from '@core/constants/global';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\n\r\n@Component({\r\n    selector: 'app-reset-password',\r\n    templateUrl: './reset-password.component.html',\r\n    styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    resetPassForm: FormGroup;\r\n    isSubmitted = false;\r\n    emailPassed = false;\r\n    tokenExpired = false;\r\n    email;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        public router: Router,\r\n        public auth: AuthService,\r\n        private route: ActivatedRoute,\r\n        private jwtHelper: JwtHelperService,\r\n        private toastr: ToastrService,\r\n        public loader: LoaderService,\r\n        private userStore: UserStoreService\r\n    ) {\r\n\r\n        this.email = this.route.snapshot?.queryParams?.email;\r\n        const token = this.route.snapshot?.queryParams?.token;\r\n        this.tokenExpired = this.jwtHelper.isTokenExpired(token);\r\n        this.emailPassed = !!this.email;\r\n\r\n        this.resetPassForm = this.fb.group({\r\n            email: [this.email, [Validators.required, patternValidator(EMAIL_PATTERN)]],\r\n            password: ['',\r\n                [\r\n                    Validators.required, patternValidator(NO_SPACE_PATTERN),\r\n                    Validators.minLength(PASSWORD_MIN_LENGTH), Validators.maxLength(PASSWORD_MAX_LENGTH)\r\n                ],\r\n            ],\r\n            confirm_password: ['', [Validators.required]]\r\n        }, {validator: passwordConfirmation('password', 'confirm_password')});\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    changePassword() {\r\n        this.isSubmitted = true;\r\n        if (this.resetPassForm.valid) {\r\n            this.auth.resetPass(this.resetPassForm.value).subscribe((async (dt) => {\r\n                const token = dt.hasOwnProperty('token') ? dt?.token : '';\r\n                if (token) {\r\n                    localStorage.setItem('token', token);\r\n                    this.userStore.setAuthUser(token);\r\n                    await this.router.navigate(['/']);\r\n                }\r\n\r\n            }));\r\n        }\r\n    }\r\n\r\n    resendEmail() {\r\n        this.auth.sendForgotPassEmail({email: this.email}).subscribe(dt => {\r\n            this.toastr.success('Reset password request has been resent to your e-mail');\r\n        });\r\n    }\r\n\r\n    get pass(): AbstractControl {\r\n        return this.resetPassForm.get('password');\r\n    }\r\n\r\n    get confirmPass(): AbstractControl {\r\n        return this.resetPassForm.get('confirm_password');\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {AuthRoutingModule} from './auth-routing.module';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {VerifyEmailComponent} from '@core/components/modals/verify-email/verify-email.component';\r\nimport {MaterialModule} from '@core/modules/material.module';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {ResetPasswordComponent} from './reset-password/reset-password.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        VerifyEmailComponent,\r\n        ForgotPasswordComponent,\r\n        ResetPasswordComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AuthRoutingModule,\r\n        ReactiveFormsModule,\r\n        MaterialModule,\r\n\r\n    ],\r\n    providers: []\r\n})\r\nexport class AuthModule {\r\n}\r\n"]}