{"version":3,"sources":["webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.html","webpack:///src/app/videos/show-videos/show-regular-list/show-regular-list.component.ts","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.html","webpack:///src/app/videos/show-videos/show-playlists-list/show-playlists-list.component.ts","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.html","webpack:///src/app/videos/show-videos/show-search-results/show-search-results.component.ts","webpack:///src/app/videos/show-videos/show-videos.component.html","webpack:///src/app/videos/show-videos/show-videos.component.ts","webpack:///src/app/shared/components/video-js-player/video-js-player.component.html","webpack:///src/app/shared/components/video-js-player/video-js-player.component.ts","webpack:///src/app/shared/components/video-regular-player/video-regular-player.component.ts","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.ts","webpack:///src/app/shared/components/video-regular-player/video-regular-player.component.html","webpack:///src/app/videos/play-video/video-comments-form/video-comments-form.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.html","webpack:///src/app/videos/play-video/video-comments-list/single-comment/single-comment.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.ts","webpack:///src/app/videos/play-video/video-comments-list/comment-actions/comment-actions.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.html","webpack:///src/app/videos/play-video/video-comments-list/video-comments-list.component.ts","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.html","webpack:///src/app/videos/play-video/video-details-form/video-details-form.component.ts","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.html","webpack:///src/app/videos/play-video/video-suggestions/video-suggestions.component.ts","webpack:///src/app/videos/play-video/play-video.component.html","webpack:///src/app/videos/play-video/play-video.component.ts","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.html","webpack:///src/app/videos/show-saved-videos/show-saved-videos.component.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.ts","webpack:///src/app/videos/videojs-test/videojs-test.component.html","webpack:///src/app/videos/add-video/add-video.component.html","webpack:///src/app/videos/videos-routing.module.ts","webpack:///src/app/videos/add-video/add-video.component.ts","webpack:///src/app/videos/videos.module.ts"],"names":["ShowRegularListComponent","router","trackByElement","video","username","r","this","navigate","route","queryParams","params","users_vids","find","v","authUser","users_videos","saved","duration","moment","diff","created_at","Math","floor","asDays","name","tag","id","ShowPlaylistsListComponent","playlist","firstVideoId","playlist_id","ShowSearchResultsComponent","subject","channelsService","channel","subscribeToChannel","user_id","channel_id","subscribe","dt","getUserChannelSubscriptions","d","setUserSubscriptions","checkIfSubscribed","subscribers","filter","s","push","replace","ShowVideosComponent","videoService","getAuthUser","getExactParams","items","videos","playlists","channelsVideos","apiUrl","showTrending","showFilters","filters","filterStatus","subscriptions","loadingVideos","transform","search","snapshot","url","includes","selectedTag","searchChannelsVideos","getVideosList","get","withPlaylists","trending","searchWithVideos","length","forEach","unsubscribe","VideoJsPlayerComponent","cdr","videoInit","options","console","log","videoUrl","document","getElementsByTagName","player","parts","videoData","split","m","parseInt","pop","registerPlugin","watermark","image","position","fadeTime","deregisterPlugin","on","err","error","detectChanges","initPlayer","VideoRegularPlayerComponent","VideoCommentsFormComponent","filename","setAttribute","fb","fixLineBreaks","inputFocused","isSubmitted","originalFormattedComment","editComment","selectedComment","selectedReply","reply","isReplyComment","reply2Reply","parentComment","commentAdded","commentUpdated","cancelled","placeholderText","getPlaceholderText","videoCommentsForm","group","from_id","comment","required","video_id","to_user_id","to_comment_id","to_reply_id","is_reply","replyUsername","user","patchValue","valid","commentCtrl","value","updateVideoComment","emit","reset","addVideoComment","substring","lastIndexOf","onCancel","saveComment","SingleCommentComponent","CommentActionsComponent","toggleReplies","selectComment","likeDislikeComment","c","author_id","len","replies","e","liked","foundInReactors","reactors","users_comments","reaction","data","first_name","last_name","navigateByUrl","skipLocationChange","then","openChannelPage","likeDislikeCommentFn","selectCommentFn","commentSelected","remove","removeComment","VideoCommentsListComponent","dialog","showReplyForm","showReplyToReplyForm","showReplies","editReply","videoComments","cm","replyBtnClicked","replyCommentSelected","open","afterClosed","confirmed","removeVideoComment","buildParams","updateCommentLikes","comm","comment_id","disliked","likes","dislikes","conn","checkUserCommentConnection","max","VideoDetailsFormComponent","toastr","formReady","separatorKeysCodes","dropzoneConfig","videoDetailsForm","maxLength","tags","thumbnail","event","input","trim","index","indexOf","splice","thumbnailFile","target","files","formData","FormData","field","append","JSON","stringify","removeImage","onAddedFile","changeThumbnail","add","saveDetails","VideoSuggestionsComponent","playlistsService","playlistOpened","videoSuggestions","isProduction","environment","production","urlParams","videoId","playlistId","getById","playlistData","limit","removeVideoFromPlaylist","oldVideoIndex","nextVideo","openVideoPage","PlayVideoComponent","auth","loader","titleService","userVideoConnection","viewed","videoJSPlayerOptions","showTagsForm","isSmallScreen","commentsRefreshed","commentsLoading","getVideoById","setTitle","loggedIn","checkUserVideoConnection","updateViewsCount","indexUserTags","getComments","u","updateViews","action","getLikesState","updateLikes","saveVideo","saveVideoDetails","getVideoComments","count","subscribers_count","width","height","shareUrl","window","location","href","ShowSavedVideosComponent","VideojsTestComponent","getUserSavedVideos","userVideos","config","controls","bigPlayButton","fluid","plugins","record","audio","debug","getElementById","msg","VERSION","getPluginVersion","RecordRTC","recordedData","AddVideoComponent","VideosRoutingModule","VideosModule","routes","path","component","sanitizer","isValidUrl","pastedText","clipboardData","getData","constructSafeUrl","text","isTikTokVideo","isYoutubeVideo","transformUrlForYoutube","p","match","safeUrl","bypassSecurityTrustResourceUrl","getUrl","checkUrl","pathMatch","title","canActivate","forChild"],"mappings":"mgHAIY,kBAAqD,mBAAQ,Q,yBAC7D,kBAAqD,QAAkB,Q,4BAAlB,0B,sBAsBrD,iBACI,mBAAU,oBAAS,OACnB,eAAM,gBAAK,OACf,Q,qCAIQ,gBAAoC,4FAChC,eAAM,QAAY,OACtB,O,0BADU,sB,sBAKlB,iBACI,kBAAkB,cAAG,OACzB,Q,qCAzCR,gBACI,gBACI,gBAAwC,qG,qBAAxC,OACA,uBACA,uBACJ,OACA,gBACI,eAAkB,QAAc,OAChC,gBACI,kBACI,kB,sBACJ,OACA,mBACI,SACJ,OACA,mBAAkB,gBAAQ,OAC1B,mBACQ,SACJ,OACJ,mBAAkB,gBAAQ,OAC1B,mBAA0B,S,uBAAkC,OAChE,OACA,gBACI,SACJ,OAEA,wBAKA,kBACI,cACI,uBAGJ,OACJ,OAEA,wBAGJ,OACJ,O,mCAzCa,gDACkB,uCACA,uCAGL,qBAGU,gEAEG,wDACvB,0CAII,wGAGkB,uCAG1B,oCAGqB,oDAOb,4CAMc,2CC7B/B,IAAMA,EAAN,IAAMA,EAAN,WAMH,WACWC,2BAAA,KAAAA,SAHX,KAAAC,eAAiB,IAJd,+FAciBC,EAAOC,G,kKACwBA,OAAzCC,EAAI,YAAoBF,EAAOC,G,SAC/BE,KAAKL,OAAOM,SAAS,CAACF,EAAEG,OAAQ,CAACC,YAAaJ,EAAEK,S,kDAhBvD,gDAmBuBP,GAAMA,WAC5B,OAAOA,EAAMQ,WAAWC,MAAKC,YAAI,MAAC,OAAAA,EAAET,YAA0B,QAAlB,EAAKE,EAAKQ,oBAAQ,WAAEV,WAAYS,EAAEE,aAAaC,WApB5F,sCAuBab,GACZ,IAAMc,EAAWC,EAAA,SAAgBA,IAASC,KAAKhB,EAAMiB,aACrD,OAAOC,KAAKC,MAAML,EAASM,UAAY,IAzBxC,qCA4BkBC,G,4KACXlB,KAAKL,OAAOM,SAAS,CAAC,UAAW,CAACE,YAAa,CAACgB,IAAKD,K,oDA7B5D,M,oCAAMxB,GAAwB,Y,uBAAxBA,EAAwB,4vBDXrC,gBACI,wBA4CJ,Q,MA5CiC,uCAA2D,mC,wtCEAxF,QACI,gBAAiC,kGAAoD,GAAG0B,OACpF,gBACI,gBACI,mBAAU,6BAAkB,OAC5B,cAAgB,QAAiB,OACjC,cAAuB,QAAkF,OAC7G,OACA,iB,sBACJ,OACA,iBACJ,OACA,kBAGJ,O,+BAVgC,qBACO,uEAEtB,iD,yBATrB,gBACI,gCAgBJ,Q,uBAhBkB,wCCOX,IAAMC,EAAN,IAAMA,EAAN,WAKH,WACW1B,2BAAA,KAAAA,SANR,kGAaoB2B,EAAUC,G,kKAE+BH,OAAtDhB,EAAS,CAACgB,GAAIG,EAAcC,YAAaF,EAASF,I,SAClDpB,KAAKL,OAAOM,SAAS,CAFb,eAEsB,CAACE,YAAaC,I,oDAhBnD,M,oCAAMiB,GAA0B,Y,uBAA1BA,EAA0B,qXDRvC,sB,KAAgC,mC,q5CEmBhB,oBAEQ,+FAAsC,QAC9C,O,wCAFQ,0CACsC,sE,yBAwBtC,aACI,eAAM,QAAY,OACtB,Q,uBADU,sB,qCArB1B,iBACI,gBACI,iBAAwC,wH,qBAAxC,OACA,kBAAuB,QAAkB,OAC7C,OACA,iBACI,gBAAkB,QAAc,OAChC,gBACI,mBAA6E,SAAgB,OAC7F,mBAAkB,gBAAQ,OAC1B,mBACA,SACJ,OACI,mBAAkB,gBAAQ,OAC1B,mBAA0B,S,uBAAkC,OAChE,OACA,gBAEA,kBACI,cACI,sBAGJ,OACJ,OACJ,OACJ,O,6CAxBa,+CACkB,yBAGL,qBAEa,wDAAkD,qBAG7E,4FAG0B,uCAEG,6CAIrB,6C,qCA5CxB,QACI,gBACI,gBACI,gBACK,uH,qBADL,OAEJ,OACA,gBACI,gBACI,cAAwB,gIACpB,QACJ,OACA,gBACI,eACI,SACJ,OACJ,OACA,gBACJ,OACA,2BAIJ,OACJ,OACA,0BA2BJ,O,mCAhDmC,sDAMf,6BAII,+EAGL,wDAEsC,gHAMxB,kCCd9B,IAAMI,EAAN,IAAMA,EAAN,WAKH,WACW9B,EACC+B,EACAC,2BAFD,KAAAhC,SACC,KAAA+B,UACA,KAAAC,kBART,iGAemB7B,G,4KACZE,KAAKL,OAAOM,SAAS,CAAC,YAAcH,I,kDAhB3C,oCAmBiBD,EAAOC,G,kKACwBA,OAAzCC,EAAI,YAAoBF,EAAOC,G,SAC/BE,KAAKL,OAAOM,SAAS,CAACF,EAAEG,OAAQ,CAACC,YAAaJ,EAAEK,S,kDArBvD,yCAwBgBwB,GAAQA,WACvB5B,KAAK2B,gBAAgBE,mBAAmB,CAACC,QAAS9B,KAAKQ,SAASY,GAAIW,WAAYH,EAAQR,KAAKY,WAAUC,YACnGjC,EAAK2B,gBAAgBO,4BAA4B,CAACJ,QAAS9B,EAAKQ,SAASY,KAAKY,WAAUG,YACpFnC,EAAK0B,QAAQU,qBAAqBD,GAC9BnC,EAAKqC,kBAAkBT,GACvBA,EAAQU,YAAcV,EAAQU,YAAYC,QAAOC,YAAI,MAAC,OAAAA,EAAEpB,MAAoB,QAAlB,EAAKpB,EAAKQ,oBAAQ,WAAEY,OAE9EQ,EAAQU,YAAYG,KAAKzC,EAAKQ,kBA/B3C,wCA0CeoB,GAAQA,WACtB,OAAOA,EAAQU,YAAYhC,MAAKkC,YAAI,MAAC,OAAAA,EAAEpB,MAAoB,QAAlB,EAAKpB,EAAKQ,oBAAQ,WAAEY,SA3C9D,8BA8CKe,GACJ,OAAOA,iBAAGO,QAAQ,iBAAkB,UA/CrC,M,oCAAMjB,GAA0B,gC,uBAA1BA,EAA0B,0xBDXvC,gBACI,gCAoDJ,Q,MApDkB,2C,ulDEAd,mBAA2D,qFACvD,mBAAU,eAAI,OACd,eAAM,kBAAO,OACjB,Q,qCACA,8BAAmB,uEAAuD,Q,qBAEtE,wB,KAAa,oB,yBACb,QACI,kCACA,oCACJ,Q,kBAF2B,8BAAe,uBACb,8BAAe,wB,yBAG5C,QACI,qCACJ,Q,kBAD6B,gDAAiC,wB,sBAGlE,cACI,kBAAoB,2BAAgB,OACxC,QCAG,IAAMkB,EAAN,IAAMA,EAAN,WAcH,WACYC,EACDjD,EACC+B,EACAC,EACAzB,EACA2C,EACAC,sCANA,KAAAF,eACD,KAAAjD,SACC,KAAA+B,UACA,KAAAC,kBACA,KAAAzB,QACA,KAAA2C,cACA,KAAAC,iBApBZ,KAAAC,MAAQ,CAACC,OAAQ,GAAIC,UAAW,IAChC,KAAAC,eAAiB,GACjB,KAAAC,OAAS,IAIT,KAAAC,gBACA,KAAAC,eACA,KAAAC,QAAU,GACV,KAAAC,aAAe,OACf,KAAAC,cAAgC,GAChC,KAAAC,iBAWIzD,KAAKQ,SAAWR,KAAK6C,YAAYa,YAEjC1D,KAAKwD,cAAcf,KACfzC,KAAKE,MAAMC,YAAY6B,WAAUG,Y,QAC7BnC,EAAK2D,OAAwC,QAAlC,EAAG3D,EAAKE,MAAM0D,SAASzD,uBAAW,WAAEwD,OAC/C3D,EAAKoD,aAAepD,EAAKL,OAAOkE,IAAIC,SAAS,YAC7C9D,EAAK+D,YAA6C,QAAlC,EAAG/D,EAAKE,MAAM0D,SAASzD,uBAAW,WAAEgB,IAChDnB,EAAK2D,OACL3D,EAAKgE,qBAAqB,CAACL,OAAQ3D,EAAK2D,OAAQL,QAAStD,EAAKsD,UAE9DtD,EAAKiE,cAAc,CAACN,OAAQ3D,EAAK2D,OAAQL,QAAStD,EAAKsD,QAASnC,IAAKnB,EAAK+D,kBAjCvF,mGA6C0B,IAAbT,EAAa,uDAAH,GACtBtD,KAAKsD,QAAUA,EACftD,KAAKuD,aAAe,UAChBvD,KAAK2D,OACL3D,KAAKgE,qBAAqB,CAACL,OAAQ3D,KAAK2D,OAAQL,QAAStD,KAAKsD,UAE9DtD,KAAKiE,cAAc,CAACX,QAAStD,KAAKsD,YAnDvC,oCAuDWlD,GAAOA,WACjBA,EAASJ,KAAK8C,eAAeY,UAAUtD,GAEvCJ,KAAK4C,aAAasB,IAAI,OAAD,QACjBC,cAAgBnE,KAAKoD,aAAmB,EAAJ,EACpCgB,SAAUpE,KAAKoD,aAAe,EAAI,GAC/BhD,IACJ4B,WAAUC,YACTjC,EAAK+C,MAAQd,OA/DlB,2CAmEkB7B,GAAOA,I,EAAAA,OAExBA,EAASJ,KAAK8C,eAAeY,UAAUtD,GACvCJ,KAAKyD,iBAELzD,KAAK2B,gBAAgB0C,iBAAiB,OAAD,QAAEvC,QAAsB,QAAf,EAAE9B,KAAKQ,oBAAQ,WAAEY,IAAOhB,IAAS4B,WAAUC,YACrFjC,EAAKyD,iBACLzD,EAAKkD,eAAiBjB,OA1E3B,uC,MAgFC,OAAwB,QAAjB,EAAAjC,KAAK+C,MAAMC,kBAAM,WAAEsB,QAAS,GAC9BtE,KAAK2D,QAAU3D,KAAKkD,eAAe5C,MAAKC,YAACA,OAAIA,EAAEyC,OAAOsB,OAAS,MACvC,YAAtBtE,KAAKuD,eAA+BvD,KAAKyD,gBAlFjD,oCAgGCzD,KAAKwD,cAAce,SAAQ/B,YAACA,OAAIA,EAAEgC,qBAhGnC,M,oCAAM7B,GAAmB,wE,uBAAnBA,EAAmB,sWDnBhC,gBACI,yBAIA,oCACA,gBACI,8BACA,+BAKA,+BAGJ,OACA,sBAGJ,Q,MAnBsC,wCAIoB,mCAErB,qCACf,iDAKA,gDAIb,2F,2bEhBL,gBACI,wBACA,kBAA+B,wBAAa,OAChD,Q,MAFiB,6B,0BAFrB,gBACI,uBAIA,gBACI,kBACI,mBACA,cACI,sGACA,cAAmE,+BAAoB,OAC3F,OACJ,OACJ,OACJ,Q,kBAbiC,6CAIxB,gDAEW,qCCGb,IAAM8B,GAAN,KAAMA,GAAN,WASH,WACYC,2BAAA,KAAAA,MANZ,KAAAC,UAAY,OAEZ,KAAAC,QAAU,IANP,wDAeCC,QAAQC,IAAI9E,KAAK+E,YAflB,mCAkBS,WACFlF,EAAQmF,SAASC,qBAAqB,SAAS,GACrDjF,KAAK2E,UAAY,UACjB3E,KAAKkF,OAAS,mBAAQrF,EAAOG,KAAK4E,SAAS,WACvC5E,EAAKkF,OAAOvE,SAAW,WAKnB,IAJA,IAAMwE,EAAQnF,EAAKoF,UAAUzE,SAAS0E,MAAM,KACxC7C,EAAI,EACJ8C,EAAI,EAEDH,EAAMb,OAAS,GAClB9B,GAAK8C,EAAIC,SAASJ,EAAMK,MAAO,IAC/BF,GAAK,GAET,OAAO9C,GAIX,WAAQiD,eAAe,YAAa,MACpCzF,EAAKkF,OAAOQ,UAAU,CAClBC,MAAO,sBACPC,SAAU,eACVC,SAAU,OAGd,WAAQC,iBAAiB,gBAI7B9F,KAAKkF,OAAOa,GAAG,kBAAkB,WAC7B/F,EAAK2E,UAAY,cAGrB3E,KAAKkF,OAAOa,GAAG,SAAUC,YACPhG,EAAKkF,OAAOe,QAC1BjG,EAAK2E,UAAY,cAErB3E,KAAK0E,IAAIwB,kBAtDV,wCA2DClG,KAAKmG,iBA3DN,M,oCAAM1B,IAAsB,Y,wBAAtBA,GAAsB,yfDVnC,uB,KAAuB,yB,iQEWhB,IAAM2B,GCWAC,GDXN,KAAMD,GAAN,WAMH,aAAa,wBANV,wDAUC,IAAMvG,EAAQmF,SAASC,qBAAqB,SAAS,GACrDjF,KAAK+E,SAAW,IAAU,kBAAoB/E,KAAKoF,UAAUkB,SAC7DzG,EAAM0G,aAAa,MAAOvG,KAAK+E,cAZhC,M,oCAAMqB,K,wBAAAA,GAA2B,6NEXxC,gBACI,kBAEA,gBACJ,S,qTDkBO,KAAMC,GAAN,WAwBH,WACYG,EACA5D,EACAC,EACAnB,EACAgD,EACA+B,2BALA,KAAAD,KACA,KAAA5D,eACA,KAAAC,cACA,KAAAnB,UACA,KAAAgD,MACA,KAAA+B,gBA3BZ,KAAAC,gBAEA,KAAAC,eAEA,KAAAC,yBAA2B,GAGlB,KAAAC,eACA,KAAAC,gBAAkB,KAClB,KAAAC,cAAgB,KAChB,KAAAC,SACA,KAAAC,kBACA,KAAAC,eACA,KAAAC,cAAgB,KAER,KAAAC,aAAe,IAAI,IACjB,KAAAC,eAAiB,IAAI,IACnB,KAAAC,UAAY,IAAI,IApBlC,wD,MAoCCtH,KAAKQ,SAAWR,KAAK6C,YAAYa,YACjC1D,KAAKuH,gBAAkBvH,KAAKwH,qBAE5BxH,KAAKyH,kBAAoBzH,KAAKwG,GAAGkB,MAAM,CACnCtG,GAAI,CAAC,IACLuG,QAAS,CAAC3H,KAAKQ,SAASY,IACxBwG,QAAS,CAAC,GAAI,KAAWC,UACzBC,SAAU,CAAC9H,KAAKoF,UAAUhE,IAC1B2G,WAAY,CAAC,GACbC,cAAe,CAAC,GAChBC,YAAa,CAAC,GACdC,SAAU,CAAC,KAGXlI,KAAKkH,cACLlH,KAAKmI,cAAgB,KAAwB,QAArB,EAAGnI,KAAK+G,yBAAa,WAAEqB,KAAKtI,UAAW,IAC/DE,KAAKyH,kBAAkBY,WAAW,CAACT,QAAS5H,KAAKmI,mBApDtD,oCAyDU,WAET,GADAnI,KAAK2G,eACD3G,KAAKyH,kBAAkBa,MAAO,CAE9B,GAAItI,KAAKgH,MACLhH,KAAKyH,kBAAkBY,WAAW,CAC9BL,cAAehI,KAAK8G,gBAAgB1F,GACpC2G,WAAY/H,KAAK8G,gBAAgBsB,KAAKhH,GACtC8G,SAAU,SAGX,GAAIlI,KAAKiH,eACZjH,KAAKyH,kBAAkBY,WAAW,CAC9BL,cAAehI,KAAKmH,cAAc/F,GAClC2G,WAAY/H,KAAKmH,cAAciB,KAAKhH,GACpC8G,SAAU,SAEX,GAAIlI,KAAKkH,YAAa,CACzB,IACMA,EAAclH,KAAKuI,YAAYC,MAAM9F,QAAQ1C,KAAKmI,cADhC,kCAAoCnI,KAAKmI,cAAgB,aAEjFnI,KAAKyH,kBAAkBY,WAAW,CAC9BL,cAAehI,KAAK8G,gBAAgB1F,GACpC6G,YAAajI,KAAK+G,cAAc3F,GAChC2G,WAAY/H,KAAK8G,gBAAgBsB,KAAKhH,GACtCwG,QAASV,EACTgB,SAAU,IAKlB,GAAIlI,KAAK6G,YAAa,CAElB,GAAI7G,KAAKmH,cAAe,CACpB,IACMD,EAAclH,KAAKuI,YAAYC,MAAM9F,QAAQ1C,KAAKmI,cADhC,kCAAoCnI,KAAKmI,cAAgB,aAEjFnI,KAAKyH,kBAAkBY,WAAW,CAACT,QAASV,IAIhDlH,KAAK4C,aAAa6F,mBAAmBzI,KAAKyH,kBAAkBe,OAAOxG,WAAUC,YACzEjC,EAAKqH,eAAeqB,KAAKzG,GACzBjC,EAAKyH,kBAAkBvD,IAAI,WAAWyE,gBAI1C3I,KAAK4C,aAAagG,gBAAgB5I,KAAKyH,kBAAkBe,OAAOxG,WAAUC,YACtEjC,EAAK0G,gBACL1G,EAAKoH,aAAasB,KAAKzG,GACvBjC,EAAKyH,kBAAkBvD,IAAI,WAAWyE,cAzGnD,iCAgHC3I,KAAK0G,gBACL1G,KAAKyH,kBAAkBvD,IAAI,WAAWyE,SAClC3I,KAAK6G,aAAe7G,KAAKgH,OAAShH,KAAKkH,cACvClH,KAAKsH,UAAUoB,SAnHpB,2CAyHC,MAAO,iBAAmB1I,KAAKgH,MAAQ,QAAU,WAAa,QAzH/D,wCAiIC,GAAIhH,KAAK6G,YAAa,CAClB,IAAMe,EAAU5H,KAAK8G,gBAAgBc,QACjC5H,KAAKmH,gBACLnH,KAAKmI,cAAgBP,EAAQiB,UACzBjB,EAAQkB,YAAY,KACpBlB,EAAQkB,YAAY,OAG5B9I,KAAKyH,kBAAkBY,WAAW,CAC9BT,QAAS5H,KAAKyG,cAAc/C,UAAUkE,EAAQlF,QAAQ,aAAc,KACpEtB,GAAIpB,KAAK8G,gBAAgB1F,KAE7BpB,KAAK0G,gBACL1G,KAAK0E,IAAIwB,mBA9Id,kCA6HC,OAAOlG,KAAKyH,kBAAkBvD,IAAI,eA7HnC,M,oCAAMmC,IAA0B,gE,wBAA1BA,GAA0B,gE,MAAA,K,g3BEtBvC,iBACI,gBACI,gB,qBACA,kBACA,2BACI,uBACU,qDAC0B,OACxC,OACJ,OACA,gBACI,gBACI,oBAA2C,gCAAS,EAAA0C,cAAY,kBAAM,OACtE,qBAAQ,gCAAS,EAAAC,iBAC4B,SAC7C,OACJ,OACJ,OACJ,Q,MAlBM,sCAEsB,uEAGuB,8CAMtC,uCAE6C,mDACD,iD,o/BCRV,e,sCAkB/B,qCAIyB,qEACc,O,qBALd,8BAAuB,gBAAvB,CAAuB,oCAAvB,CAAuB,4BAAvB,CAAuB,kC,sCAQxD,eACG,qFACC,mBAAU,QAAuE,OACjF,eAAM,QAAkC,OAC5C,O,qBAFc,sFACJ,kDC1BX,IAAMC,GCDAC,GDCN,KAAMD,GAAN,WAkBH,WACYpG,EACDlD,2BADC,KAAAkD,cACD,KAAAlD,SATD,KAAAwJ,cAAgB,IAAI,IACpB,KAAA/B,aAAe,IAAI,IACnB,KAAAgC,cAAgB,IAAI,IACpB,KAAAC,mBAAqB,IAAI,IAQ/BrJ,KAAKQ,SAAWR,KAAK6C,YAAYa,YAtBlC,0FA4BM4F,GACL,OAAOA,EAAElB,KAAKhH,KAAOpB,KAAKoF,UAAUmE,YA7BrC,4CAgCmBD,GAClB,IAAME,EAAMF,EAAEG,QAAQnF,OACtB,MAAO,QAAQkF,GAAOA,EAAM,EAAI,WAAa,YAlC9C,sCAqCaF,GACZtJ,KAAKoJ,cAAcV,KAAKY,KAtCzB,qCAyCYI,GACX1J,KAAKoH,aAAasB,KAAKgB,KA1CxB,sCA6CaJ,GACZtJ,KAAKmJ,cAAcT,KAAKY,KA9CzB,2CAiDkBA,GAAW,IAARK,IAAQ,yDAC5B3J,KAAKqJ,mBAAmBX,KAAK,CAACY,IAAGK,YAlDlC,iDAqDwBL,GAAEA,WACnBM,EAAkBN,EAAEO,SAASvJ,MAAKP,YAACA,OAAIA,EAAEqB,KAAOpB,EAAKQ,SAASY,MACpE,OAAOwI,iBAAiBE,iBAvDzB,uCA0DcD,EAAUE,GACvB,OAAOF,EAAStH,QAAOxC,YAACA,OAAIA,iBAAG+J,eAAeC,MAAWzF,SA3D1D,kCA8DS0F,GACR,OAAOA,EAAKC,WAAa,IAAMD,EAAKE,YA/DrC,sCAkEmBpK,G,uKAClBE,KAAKL,OAAOwK,cAAc,IAAK,CAACC,oBAAmBA,IAAQC,MAAK,kBAAW,kJACvE,OADuE,SACjErK,KAAKL,OAAOM,SAAS,CAAC,YAAcH,IAD6B,2F,oDAnE5E,M,oCAAMmJ,IAAsB,sB,wBAAtBA,GAAsB,+sC,GAAA,MDTnC,gBACI,gB,qBACA,gBACI,gBACI,gBACK,gCAAS,EAAAqB,gBAAA,uEACV,QAA+B,qBACnC,OACA,gBAA0B,Q,uBAAoC,OAClE,OAEA,iBAEA,iBACI,iBACI,gBAAgC,gCAAS,EAAAC,qBAAA,cACqB,OAC9D,mBAA2B,SAAiD,OAC5E,gBAAuC,gCAAS,EAAAA,qBAAA,iBACoB,OACpE,mBAA2B,SAAoD,OACnF,OACA,kBACI,mBAAoB,gCAAS,EAAAC,gBAAA,cAA0B,iBAAK,OAC5D,6CAMJ,OACJ,OACA,uBAKJ,OACJ,Q,kJArCwC,sGAGA,6CAExB,yEAAmE,2CAE7C,+CAGC,iDAKpB,wBACwB,qEAExB,2BACwB,wEAKF,0KAOD,kG,ogEExBjC,KAAMtB,GAAN,WAQH,WACYrG,2BAAA,KAAAA,cALF,KAAA4H,gBAAkB,IAAI,IACtB,KAAAC,OAAS,IAAI,IALpB,wDAcC1K,KAAKQ,SAAWR,KAAK6C,YAAYa,cAdlC,oCAmBW4F,GACVtJ,KAAKyK,gBAAgB/B,KAAKY,KApB3B,oCAuBWA,GACVtJ,KAAK0K,OAAOhC,KAAKY,OAxBlB,M,oCAAMJ,IAAuB,Y,wBAAvBA,GAAuB,6R,GAAA,MCRpC,gBAEI,mBACI,mBAAU,oBAAS,OACvB,OACA,0BACI,mBAAsB,gCAAS,EAAAE,cAAA,cAC3B,mBAAU,eAAI,OACd,eAAM,gBAAI,OACd,OACA,oBAAsB,gCAAS,EAAAuB,cAAA,cAC3B,oBAAU,kBAAM,OAChB,gBAAM,kBAAM,OAChB,OACJ,OACJ,Q,mBAb4B,sC,6FCqBI,iCAEqB,sEAAgC,0EACS,MAC9D,O,gCAJqB,mB,sCAZ7B,iBACI,gBACI,gCAKoB,uFAAiD,qEAAjD,CAAiD,kHAER,OACjE,OACA,gBACI,uCAKJ,OAEJ,O,yCAjB4B,0BAAiB,wBAAjB,CAAiB,uCAAjB,CAAiB,4BAAjB,CAAiB,oCAAjB,CAAiB,gCAAjB,CAAiB,kBAWhB,qD,sCAQ7B,qCAGyB,4EAAsC,+DAG/D,O,yCANyB,uBAAoB,kCAApB,CAAoB,oBAApB,CAAoB,kBAApB,CAAoB,0B,0BAtBjD,QACI,wBAqBA,4CAOJ,Q,iCA5BmC,0FAuBN,6D,sCASjC,iCACqB,sEAAgC,0EAErD,O,gCAHqB,mB,sCAzC7B,gBACI,gBACI,+BAEiD,uFAAiD,qEAAjD,CAAiD,uEAAjD,CAAiD,2EAEhC,OAClE,gBACI,gCA8BJ,OACJ,OACA,gBACI,uCAIJ,OACJ,O,wCA7C4B,oCACA,0BAAa,wBAAb,CAAa,gCAAb,CAAa,4BAAb,CAAa,oCAAb,CAAa,YAKZ,0CACH,kCAiCiB,uD,sCAM3C,qCAGyB,4EAAsC,iEAE/D,O,sBALyB,uBAAoB,oCAApB,CAAoB,0B,0BAhDjD,QACI,wBA+CA,2CAMJ,Q,gCArDqC,yCAiDR,iECpC1B,IAAMC,GAAN,KAAMA,GAAN,WAgBH,WACYlJ,EACAkB,EACAC,EACAgI,2BAHA,KAAAnJ,UACA,KAAAkB,eACA,KAAAC,cACA,KAAAgI,SAhBZ,KAAArH,cAAgC,GAChC,KAAAsH,iBACA,KAAAC,wBACA,KAAAC,eACA,KAAAC,aAEA,KAAArL,eAAiB,IAGR,KAAAsL,cAAgB,GAChB,KAAArE,eAQL7G,KAAKQ,SAAWR,KAAK6C,YAAYa,YAtBlC,0FA6BM4F,GACL,OAAOA,EAAElB,KAAKhH,KAAOpB,KAAKoF,UAAUmE,YA9BrC,kCAiCSD,GACR,OAAOA,EAAElB,KAAKhH,KAAOpB,KAAKQ,SAASY,KAlCpC,yCAqCgBsI,GAAEA,WACjB1J,KAAKkL,cAAgBxB,EACrB1J,KAAK6G,eACL7G,KAAKiL,aACLjL,KAAK8G,gBAAkB4C,EAAEpJ,MAAK6K,YAAK,MAAC,OAAAA,EAAG/J,MAA2B,QAAzB,EAAKpB,EAAK8G,2BAAe,WAAE1F,OACpEpB,KAAK+G,cAAgB2C,EAAEpJ,MAAKgJ,YAAI,MAAC,OAAAA,EAAElI,MAAyB,QAAvB,EAAKpB,EAAK+G,yBAAa,WAAE3F,SA1C/D,oCA6CWkI,GAAmD,IAAhD8B,EAAgD,wDAAvBC,EAAuB,wDACxDD,GAAoBC,EAIdA,GACPrL,KAAKiL,aACLjL,KAAK+G,cAAgBuC,IAErBtJ,KAAK8K,cAAgB9K,KAAK8G,kBAAoBwC,IAAMtJ,KAAK8K,cACzD9K,KAAK8G,gBAAkBwC,IARvBtJ,KAAK6G,aAAe7G,KAAK6G,YACzB7G,KAAK8K,eAAiB9K,KAAK6G,YAC3B7G,KAAK8G,gBAAkBwC,KAjD5B,mCA2DUA,EAAGvJ,GACZC,KAAK+K,qBAAuB/K,KAAK+G,gBAAkBhH,IAAMC,KAAK+K,qBAC9D/K,KAAK8G,gBAAkBwC,EACvBtJ,KAAK+G,cAAgBhH,IA9DtB,oCAkEWuJ,GAAEA,WACZtJ,KAAKwD,cAAcf,KAAKzC,KAAK6K,OAAOS,KAAK,MAA6BC,cAAcvJ,WAAUwJ,YACtFA,GACAxL,EAAK4C,aAAa6I,mBAAmB,CACjC3J,QAAS9B,EAAKQ,SAASY,GACvBA,GAAIkI,EAAElI,GACN0G,SAAUwB,EAAExB,WACb9F,WAAUC,YACTjC,EAAKkL,cAAgBjJ,EACrBjC,EAAK8G,gBAAkB7E,EAAG3B,MAAK6K,YAAK,MAAC,OAAAA,EAAG/J,MAA2B,QAAzB,EAAKpB,EAAK8G,2BAAe,WAAE1F,gBA3ElF,mCAiFUsI,GAAEA,WACX1J,KAAKkL,cAAgBxB,EACrB1J,KAAK8K,iBACL9K,KAAK+K,wBACL/K,KAAKgL,eACLhL,KAAK8G,gBAAkB4C,EAAEpJ,MAAKgJ,YAACA,OAAIA,EAAElI,KAAOpB,EAAK8G,gBAAgB1F,QAtFlE,oCAyFWkI,GACVtJ,KAAKgL,aAAehL,KAAKgL,YACzBhL,KAAK8G,gBAAkBwC,IA3FxB,yCA8FgBI,GAAEA,WACXtJ,EAASJ,KAAK0L,YAAYhC,EAAEJ,EAAGI,EAAEC,OAGvC3J,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAa+I,mBAAmBvL,GAAQ4B,WAAUC,YAC3EjC,EAAKkL,cAAgBjJ,EACrBjC,EAAKgL,eACLhL,EAAK8G,gBAAkB9G,EAAKkL,cAAc5K,MAAKsL,YAAO,MAAC,OAAAA,EAAKxK,MAA2B,QAAzB,EAAKpB,EAAK8G,2BAAe,WAAE1F,aArG9F,kCAyGSkI,EAAGK,GACX,IAAMvJ,EAAS,CACX0H,SAAUwB,EAAExB,SACZ+D,WAAYvC,EAAElI,GACdU,QAAS9B,KAAKQ,SAASY,GACvBuI,MAAO,EACPmC,SAAU,EACVC,MAAOzC,EAAEyC,MACTC,SAAU1C,EAAE0C,UAEVC,EAAOjM,KAAKkM,2BAA2B5C,GAa7C,OAVAlJ,EAAO2L,MAAQhL,KAAKoL,IAAI,GAAGF,iBAAMtC,SAAUL,EAAEyC,OAASzC,EAAEyC,OACxD3L,EAAO4L,SAAWjL,KAAKoL,IAAI,GAAGF,iBAAMH,YAAaxC,EAAE0C,UAAY1C,EAAE0C,UAG7DrC,EACAvJ,EAAOuJ,SAAUsC,iBAAMtC,OAEvBvJ,EAAO0L,YAAaG,iBAAMH,UAGvB1L,IAhIR,uCAmIcyJ,EAAUE,GACvB,OAAOF,EAAStH,QAAOxC,YAACA,OAAIA,iBAAG+J,eAAeC,MAAWzF,SApI1D,iDAwIwBsD,GAAQA,I,EAAAA,OACzBgC,EAAkC,QAAnB,EAAGhC,EAAQiC,oBAAQ,WAAEvJ,MAAKP,YAACA,OAAIA,EAAEqB,KAAOpB,EAAKQ,SAASY,MAC3E,OAAOwI,iBAAiBE,iBA1IzB,qCA6IYR,G,MACX,OAAQA,EAAElI,MAA2B,QAAzB,EAAKpB,KAAK8G,2BAAe,WAAE1F,MAAOpB,KAAK8K,eAAkB9K,KAAK8K,gBAAkB9K,KAAK6G,cA9IlG,mCAiJUyC,GACT,OAAOtJ,KAAKgL,aAAehL,KAAK8G,kBAAoBwC,IAlJrD,oCAsJCtJ,KAAKwD,cAAce,SAAQ/B,YAACA,OAAIA,EAAEgC,qBAtJnC,M,oCAAMoG,IAA0B,0C,wBAA1BA,GAA0B,2xCDfvC,gBACI,gCAuDJ,Q,MAxDgC,0CACd,0C,08BEMN,oBACI,uCACJ,Q,uBACA,oBACI,+CACJ,Q,0BAIJ,iBACI,iBACJ,Q,kBADiC,+E,sCAG7B,oBAA0D,oEAA4B,4BACtF,Q,sCAaQ,sBAA6C,gFACzC,QACA,sBAAwB,iBAAM,OAClC,O,0BAFI,8B,uBAWZ,oBAA6D,+DAE7D,QCnCL,IAAMwB,GAAN,KAAMA,GAAN,WAcH,WACY5F,EACA6F,2BADA,KAAA7F,KACA,KAAA6F,SAdS,KAAAC,UAAY,IAAI,IAGrC,KAAA3F,eACS,KAAA4F,mBAA+B,CAAC,KAAO,MAEhD,KAAApJ,OAAS,IAIT,KAAAqJ,eAAiB,KAMbxM,KAAKyM,iBAAmBzM,KAAKwG,GAAGkB,MAAM,CAClCxG,KAAM,CAAC,GAAI,CAAC,KAAW2G,SAAU,KAAW6E,UAAU,OACtDC,KAAM,CAAC,GAAI,KAAW9E,UACtB+E,UAAW,CAAC,IACZ9E,SAAU,KAtBf,wDA2BC9H,KAAKyM,iBAAiBpE,WAAW,OAAD,QAC5BP,SAAU9H,KAAKoF,UAAUhE,IACtBpB,KAAKoF,cA7Bb,0BAiCCyH,GACA,IAAMC,EAAQD,EAAMC,MACdtE,EAAQqE,EAAMrE,OAEfA,GAAS,IAAIuE,SACqB,IAA/B/M,KAAKoF,UAAUuH,KAAKrI,OACpBtE,KAAKqM,OAAOpG,MAAM,gDAElBjG,KAAKoF,UAAUuH,KAAKlK,KAAK,CAACvB,KAAMsH,EAAMuE,SACtC/M,KAAKyM,iBAAiBpE,WAAW,CAACsE,KAAM3M,KAAKoF,UAAUuH,SAO3DG,IACAA,EAAMtE,MAAQ,MAlDnB,6BAsDIrH,GACH,IAAM6L,EAAQhN,KAAKoF,UAAUuH,KAAKM,QAAQ9L,GAEtC6L,GAAS,IACThN,KAAKoF,UAAUuH,KAAKO,OAAOF,EAAO,GAClChN,KAAKyM,iBAAiBpE,WAAW,CAACsE,KAAM3M,KAAKoF,UAAUuH,UA3D5D,wCAgEC3M,KAAKyM,iBAAiBpE,WAAW,CAACuE,UAAW,KAC7C5M,KAAKoF,UAAUwH,UAAY,KAjE5B,sCAoEalD,GACZ1J,KAAKmN,cAAgBzD,EAAE0D,OAAOC,MAAM,GACpCrN,KAAKyM,iBAAiBpE,WAAW,CAACuE,UAAW5M,KAAKmN,cAAcjM,SAtEjE,oCA4EC,GAFAlB,KAAKyM,iBAAiBpE,WAAW,CAACsE,KAAM3M,KAAKoF,UAAUuH,OACvD3M,KAAK2G,eACD3G,KAAKyM,iBAAiBnE,MAAO,CAC7B,IAAMgF,EAAW,IAAIC,SACrB,IAAK,IAAMC,KAASxN,KAAKyM,iBAAiBjE,MAElC8E,EAASG,OAAOD,EADN,SAAVA,EACuBxN,KAAKyM,iBAAiBjE,MAAMgF,GAE5BE,KAAKC,UAAU3N,KAAKyM,iBAAiBjE,MAAMgF,KAGtExN,KAAKmN,eACLG,EAASG,OAAO,uBAAwBzN,KAAKmN,cAAenN,KAAKmN,cAAcjM,MAEnFlB,KAAKsM,UAAU5D,KAAK4E,MAxFzB,yEAgGS5D,GACR1J,KAAKmN,cAAgBzD,EAAE,GACvB1J,KAAKyM,iBAAiBpE,WAAW,CAACuE,UAAW5M,KAAKmN,cAAcjM,WAlGjE,M,oCAAMkL,IAAyB,uB,wBAAzBA,GAAyB,sgC,GAAA,MDbtC,iBACI,gBAEI,gBACI,yBACI,kBACJ,OACA,6BAGA,6BAGJ,OACJ,OACA,gBACI,uBAGA,gBACI,2BAEA,yBAAmE,sCAAe,EAAAwB,gBAAf,CAA6B,gCAClB,EAAAC,YAAA,MAE9E,OACA,oBAAmB,kCAAU,EAAAC,gBAAA,MAA7B,OACJ,OACJ,OACA,kBAEI,kBACI,6BACI,+BACI,8BAIA,uBAGO,gDAAwB,EAAAC,IAAA,MAH/B,OAIJ,OACA,uBAAsB,mDAAuC,OAEjE,OACA,8BAGJ,OAEA,kBACI,qBAAuB,gCAAS,EAAAC,iBAC5B,oBAAU,mBAAO,OACjB,gBAAM,wBAAY,OACtB,OACJ,OACJ,OACJ,Q,oBA1DM,qCAOiB,wFAGA,0EAMc,2CAIK,2CAEpB,wCAAyB,+BAAzB,CAAyB,8CAImB,0BAQpC,yCAKH,kCAA2B,sDAO/B,kE,g2GE7BP,iBACK,sHACD,kBAA6B,iBAAM,OACvC,Q,sCAjBR,QAEI,gBACK,sIAED,gBACI,gB,qBACJ,OAEA,gBACI,cAAsB,sIAAiD,QAAc,OACrF,eAAuB,QAAsB,OACjD,OAEA,yBAIJ,OACJ,O,oCAjBgC,0CAIf,+CAIkE,qBAChD,6BAGO,gE,0BAjBlD,gBACI,aAAI,QAAqB,OACzB,gBACI,iCAoBJ,OACJ,Q,kBAvBQ,kCAEc,+C,6EAwBlB,iBAEI,gBACI,iBAAwC,0F,qBAAxC,OACJ,OAEA,gBACI,eAAsB,QAAc,OACpC,eAEC,QAAsB,OACvB,iBACI,mBACI,SACJ,OACA,mBAAkB,gBAAQ,OAC1B,mBAA0B,S,uBAAgC,OAC9D,OACJ,OACJ,O,+BAhBa,+CAIiB,qBACM,wCAA2B,2CAEtD,6BAGO,4FAGsB,uC,0BAjB1C,iBACI,0BAqBJ,Q,mBArBiC,0BCZ1B,IAAMC,GAAN,KAAMA,GAAN,WAgBH,WACY/N,EACAgO,EACAtL,EACAC,EACDlD,EACCkL,2BALA,KAAA3K,QACA,KAAAgO,mBACA,KAAAtL,eACA,KAAAC,cACD,KAAAlD,SACC,KAAAkL,SAfZ,KAAAsD,kBACA,KAAAC,iBAAmB,GAEnB,KAAAjL,OAAS,IAGT,KAAAkL,aAAeC,GAAA,EAAYC,WAWvBvO,KAAKQ,SAAWR,KAAK6C,YAAYa,YAxBlC,wDA2BO,I,IAAA,OACN1D,KAAKwO,UAAYxO,KAAKE,MAAM0D,SAASzD,YACrCH,KAAKyO,UAAyB,QAAf,EAACzO,KAAKwO,qBAAS,WAAEpN,IAChCpB,KAAK0O,WAA2B,QAAjB,EAAG1O,KAAKwO,qBAAS,WAAEhN,YAClCxB,KAAKmO,iBAAmBnO,KAAK0O,WAEzB1O,KAAKmO,gBACLnO,KAAKkO,iBAAiBS,QAAQ,CAACnN,YAAaxB,KAAK0O,aAAa1M,WAAUC,YACpEjC,EAAK4O,aAAe3M,KAI5BjC,KAAK4C,aAAasB,IAAI,CAAC2K,MAAO,MAAkC7M,WAAUC,YACtEjC,EAAKoO,iBAAmBnM,EAAGe,OAC3B6B,QAAQC,IAAI7C,QAzCjB,oCA8CWpC,GAAyB,WAAlB6O,EAAkB,uDAAL,KAExBtO,EAAS,CAACgB,GAAIvB,EAAMuB,GAAII,YAAakN,GAE3C1O,KAAKL,OAAOwK,cAAc,IAAK,CAACC,oBAAmBA,IAAQC,MAAK,kBAAW,kJACvE,OADuE,SACjErK,KAAKL,OAAOM,SAAS,CAJjB,gBAI0B,CAACE,YAAaC,IADqB,6FAlD5E,8CAwDqBP,EAAO6O,GAAWA,WACtC1O,KAAK6K,OAAOS,KAAK,MAA6BC,cAAcvJ,WAAUwJ,YAC9DA,GACAxL,EAAKkO,iBAAiBY,wBAAwB,CAC1CtN,YAAakN,EACb5G,SAAUjI,EAAMuB,KACjBY,WAAUC,YACT,IAAM8M,EAAgB/O,EAAK4O,aAAa5L,OAAOiK,QAAQpN,GACvDG,EAAK4O,aAAa5L,OAASf,EAAGe,OAC9B,IAAMgM,EAAYhP,EAAK4O,aAAa5L,OAAO+L,GACvCC,GACAhP,EAAKiP,cAAcD,aAnEpC,M,oCAAMf,IAAyB,+D,wBAAzBA,GAAyB,2sBDftC,uBA0BA,wB,MA1B2B,8EA0BG,6C,koEE1B9B,0BAAuC,2EAAuC,Q,uBAa1D,eAA2C,yCAA8B,Q,sCAErE,eAAkD,4FAC9C,QAAa,O,0BAAb,8B,0BAFR,QACI,sBAEJ,Q,mBAFO,0C,sCA+BP,oBAEQ,wFACJ,mBAAU,eAAI,OACd,eAAM,uBAAY,OACtB,Q,0BAPJ,iBACI,eAAuB,QAAmB,OAC1C,2BAMJ,Q,mBAP2B,sDAEf,wH,sCAMZ,oCACwB,4EAAuC,O,sBADvC,+B,0BAQ5B,iBAEI,iB,qBACA,cACI,eAAwB,QAA0B,OAClD,eAA6B,QAAwC,OACzE,OACJ,Q,mBANK,mEACgC,wEAEL,uCACK,wD,sBAIjC,gC,sCAGA,qCAAiD,oEACV,O,sBADyC,+B,sCAtExF,QACI,gBACI,gCAEgC,qCAEpC,OAEA,iBACI,iBACI,wBACA,gCAIJ,OAEA,iBACI,iBAA6B,+EAAgC,WACzD,gBACA,aAAG,SAAmB,OAC1B,OACA,kBAA6B,+EAAgC,cACzD,gBAEA,aAAG,SAAsB,OAC7B,OACA,kBAA6B,yEACzB,gBACA,aAAG,iBAAK,OACZ,OACA,kBAA6B,iFAEzB,gBACA,aAAG,SAA6D,OACpE,OAGJ,OACJ,OACA,kBACI,yBASA,4CAEJ,OACA,kBACI,mBAA0B,SAAoE,OAC9F,mBAAkB,gBAAQ,OAC1B,mBAAmB,S,uBAAoC,OAC3D,OACA,yBAQA,kBACI,0CACJ,OACA,kBACI,6CAEA,0BAEA,sCAEJ,OACJ,O,qBA3E6B,sCAAuB,4DAEc,sCAMhD,+EACQ,6EAQkB,mFACzB,gCAIA,yFACA,mCAOF,+FAEE,sGAOmB,qCASkB,oCAItB,yHAEP,iDAG4C,gEAQxC,qCAGE,uCAEZ,4BAAe,6DAEH,sCAAuB,kC,yBAMxD,0B,kBAAgC,uC,sBAChC,gCCjED,IAAMiB,GAAN,KAAMA,GAAN,WAiBH,WACYhP,EACA0C,EACDjD,EACCkD,EACDsM,EACC9C,EACA+C,EACAC,EACAxE,2BARA,KAAA3K,QACA,KAAA0C,eACD,KAAAjD,SACC,KAAAkD,cACD,KAAAsM,OACC,KAAA9C,SACA,KAAA+C,SACA,KAAAC,eACA,KAAAxE,SAxBZ,KAAA1H,OAAS,IAGT,KAAAmM,oBAAsB,CAAC3F,MAAO,EAAGmC,SAAU,EAAGpL,MAAO,GAAI6O,QAAOA,GAChE,KAAAC,qBAAuB,IAEvB,KAAAC,gBACA,KAAAC,cAAgB,IAAaA,gBAE7B,KAAAC,qBAEA,KAAAzE,cAAgB,GAChB,KAAA0E,gBAAkB,OAClB,KAAApM,cAAgC,GAa5BxD,KAAKQ,SAAWR,KAAK6C,YAAYa,YA5BlC,wDA+BO,WAKN1D,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAaiN,aAF3B,CAACzO,GADApB,KAAKE,MAAM0D,SAASzD,YAAYiB,KAGeY,WAAUC,YACrEjC,EAAKoF,UAAYnD,EACjBjC,EAAKqP,aAAaS,SAAS7N,EAAGf,MAC1BlB,EAAKmP,KAAKY,aACV/P,EAAKsP,oBAAsBtP,EAAKgQ,yBAAyB/N,GACzDjC,EAAKiQ,iBAAiBhO,GACtBjC,EAAKkQ,cAAcjO,GACnBjC,EAAKmQ,qBA3Cd,+CAmDsB/K,GAAUA,I,MAAAA,OACzBkK,EAAsBlK,iBAAW/E,WAAWC,MAAK8P,YAACA,OAAIA,EAAEhP,KAAOpB,EAAKQ,SAASY,MACnF,OAAKkO,EAOM,CAAC3F,MAJsC,QAAnC,EAAG2F,EAAoB7O,wBAAY,WAAEkJ,MAIjCmC,SAHkC,QAAnC,EAAGwD,EAAoB7O,wBAAY,WAAEqL,SAG1BpL,MAFX4O,EAAoB7O,aAAaC,MAAQ,QAAU,GAEjC6O,UADkB,QAAlC,EAACD,iBAAqB7O,wBAAY,WAAE8O,SAL7CvP,KAAKsP,sBAtDjB,uCAgEcrN,GAAGA,WAEXjC,KAAKsP,oBAAoBC,QAC1BvP,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAayN,YAF/B,CAACvO,QAAS9B,KAAKQ,SAASY,GAAI0G,SAAU7F,EAAGb,KAEUY,WAAWG,YACrEnC,EAAKoF,UAAYjD,QApE1B,kCAyESiD,EAAWkL,GACftQ,KAAKmP,KAAKY,YAEV3K,EAAYpF,KAAKuQ,cAAcD,EAAQlL,GAEvCpF,KAAK4C,aAAa4N,YAAY,CAC1B1I,SAAU1C,EAAUhE,GACpBU,QAAS9B,KAAKQ,SAASY,GACvB2K,MAAO3G,EAAU2G,MACjBC,SAAU5G,EAAU4G,SACpBrC,MAAO3J,KAAKsP,oBAAoB3F,MAChCmC,SAAU9L,KAAKsP,oBAAoBxD,SACnCpL,MAAO0E,EAAU1E,QAClBsB,WAAUC,iBAIbjC,KAAKqM,OAAOpG,MAAM,6CA1FvB,oCA8FWqK,EAAQlL,GAiBlB,MAhBe,SAAXkL,GACAtQ,KAAKsP,oBAAoB3F,QAAU3J,KAAKsP,oBAAoB3F,MACxD3J,KAAKsP,oBAAoBxD,WACzB1G,EAAU4G,UAAmC,IAAvB5G,EAAU4G,SAAiB,GAAK,GAE1DhM,KAAKsP,oBAAoBxD,SAAW,EACpC1G,EAAU2G,OAAS/L,KAAKsP,oBAAoB3F,MAAQ,GAAK,IAGzD3J,KAAKsP,oBAAoBxD,WAAa9L,KAAKsP,oBAAoBxD,SAC3D9L,KAAKsP,oBAAoB3F,QACzBvE,EAAU2G,OAA6B,IAApB3G,EAAU2G,MAAc,GAAK,GAEpD/L,KAAKsP,oBAAoB3F,MAAQ,EACjCvE,EAAU4G,UAAYhM,KAAKsP,oBAAoBxD,SAAW,GAAK,GAE5D1G,IA/GR,oCAkHWnD,G,MACJ7B,EAAS,CAAC0B,QAAS9B,KAAKQ,SAASY,GAAI0G,SAAU7F,EAAGb,GAAIuL,KAAoB,QAAhB,EAAE3M,KAAKoF,qBAAS,WAAEuH,MAClF3M,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAasN,cAAc9P,GAAQ4B,WAAUG,mBApH3E,qCAyHkBjB,G,4KACXlB,KAAKL,OAAOM,SAAS,CAAC,UAAW,CAACE,YAAa,CAACgB,IAAKD,K,kDA1H5D,gCA6HOkE,GAAUA,WAEhBpF,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAa6N,UAAU,CAChD3I,SAAU1C,EAAUhE,GACpBU,QAAS9B,KAAKQ,SAASY,GACvBV,MAA0C,UAAnCV,KAAKsP,oBAAoB5O,MAAoB,EAAI,IACzDsB,WAAUC,YACTjC,EAAKsP,oBAAoB5O,MAAQuB,EAAGvB,MAAQ,QAAU,SApI3D,uCAwIcgJ,GAAEA,WACf1J,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAa8N,iBAAiBhH,GACtD1H,WAAUC,YACPjC,EAAKoF,UAAYnD,EACjBjC,EAAKqP,aAAaS,SAAS7N,EAAGf,MAC9BlB,EAAKyP,sBA7Id,oCAiJU,WACTzP,KAAK4P,gBAAkB,UACvB5P,KAAKwD,cAAcf,KAAKzC,KAAK4C,aAAa+N,iBAAiB,CAAC7I,SAAU9H,KAAKoF,UAAUhE,KAAKY,WAAUC,YAChGjC,EAAKkL,cAAgBjJ,EACrBjC,EAAK4P,gBAAkB,iBArJ5B,mCAyJUlG,GACT1J,KAAK2P,qBACL3P,KAAKkL,cAAgBxB,IA3JtB,qCA8JkBxI,G,4KACXlB,KAAKL,OAAOM,SAAS,CAAC,UAAW,CAACE,YAAa,CAACgB,IAAKD,K,kDA/J5D,gDAkKuBkE,GACtB,IAAMwL,EAAQxL,EAAUxD,QAAQiP,kBAChC,OAAOD,EAAQ,eAA2B,IAAVA,EAAc,GAAK,OApKpD,6CAwKC5Q,KAAK6K,OAAOS,KAAK,IAA4B,CACzCwF,MAAO,QACPC,OAAQ,QACR/G,KAAM,CAACgH,SAAUC,OAAOC,SAASC,QAEhC5F,cAAcvJ,WAAUC,kBA7K9B,+EAqLCjC,KAAKwD,cAAce,SAAQ/B,YAACA,OAAIA,EAAEgC,qBArLnC,M,oCAAM0K,IAAkB,4F,wBAAlBA,GAAkB,iqCDnB/B,iCACA,gBACI,gBACI,kCA8EJ,OACA,gBACI,gCACA,yCACJ,OACJ,Q,MAtFe,+BAGO,iCAgFA,iCACS,wC,81DE5DP,gBAAoC,4FAChC,eAAM,QAAY,OACtB,O,0BADU,sB,sCAvB1B,gBACI,gBACI,gBAAwC,gH,qBAAxC,OACA,iBAAuB,QAAkB,OAC7C,OACA,gBACI,eAAkB,QAAc,OAChC,iBACI,mBAA6E,SAAsB,OACnG,mBAAkB,gBAAQ,OAC1B,mBACI,SACJ,OACA,mBAAkB,gBAAQ,OAC1B,mBAA0B,S,uBAAkC,OAChE,OACA,gBACG,SACH,OAEA,kBACI,cACI,wBAGJ,OACJ,OACJ,OACJ,O,0BA1Ba,+CACkB,yBAGL,qBAEa,qFAAkD,6BAGzE,4FAGsB,uCAG3B,oCAKS,6C,0BAvBxB,QACI,yBA6BJ,Q,mBA7B2C,iD,0BAF/C,gBACI,gCA+BJ,Q,kBA/BkB,gCCaX,IAAMkC,GCLAC,GDKN,KAAMD,GAAN,WAQH,WACYxO,EACDjD,EACC+B,EACAC,EACAzB,EACA2C,2BALA,KAAAD,eACD,KAAAjD,SACC,KAAA+B,UACA,KAAAC,kBACA,KAAAzB,QACA,KAAA2C,cAXZ,KAAAK,eAAiB,GACjB,KAAAC,OAAS,IAJN,wDAkBO,WAENnD,KAAKQ,SAAWR,KAAK6C,YAAYa,YAEjC1D,KAAK4C,aAAa0O,mBAAmB,CAACxP,QAAS9B,KAAKQ,SAASY,KAAKY,WAAUC,YACxEjC,EAAKuR,WAAatP,OAvBvB,oCA2BiBpC,EAAOC,G,kKACwBA,OAAzCC,EAAI,YAAoBF,EAAOC,G,SAC/BE,KAAKL,OAAOM,SAAS,CAACF,EAAEG,OAAQ,CAACC,YAAaJ,EAAEK,S,kDA7BvD,qCAgCkBc,G,4KACXlB,KAAKL,OAAOM,SAAS,CAAC,UAAW,CAACE,YAAa,CAACgB,IAAKD,K,oDAjC5D,M,oCAAMkQ,IAAwB,8D,wBAAxBA,GAAwB,6fDdrC,uB,KAAsB,2B,+TESf,KAAMC,GAAN,WAkBH,aAAa,wBAjBb,KAAAG,OAAS,CACLC,UAASA,EACTC,eAAcA,EACdZ,MAAO,IACPC,OAAQ,IACRY,OAAMA,EACNC,QAAS,CACLC,OAAQ,CACJC,OAAMA,EACNjS,OAAMA,EACN6M,UAAW,IACXqF,OAAMA,KAZf,mGAyBC/R,KAAKkF,OAAS,mBAAQF,SAASgN,eAAe,SAAUhS,KAAKwR,QAAQ,WAIjE,IAAMS,EAAM,kBAAoB,WAAQC,QACpC,wBAA0B,WAAQC,iBAAiB,UACnD,kBAAoBC,GAAA,QACxB,WAAQtN,IAAImN,MACb,eAGH,IAAI/M,EAASlF,KAAKkF,OAElBlF,KAAKkF,OAAOa,GAAG,gBAAgB,WAG3BlB,QAAQC,IAAI,uBAAwBI,EAAOmN,qBAzChD,M,oCAAMhB,K,wBAAAA,GAAoB,kICTjC,mB,2CCEI,mB,mBAAiC,4B,0BADrC,gBACI,0BAMJ,Q,kBANqD,yD,yBASjD,mB,kBAAiC,4BCDrC,ICFaiB,GDwCAC,GEJAC,GFlCPC,GAAiB,CACnB,CACIC,KAAM,MACNC,WCLKL,GAAN,WAKH,WACYM,2BAAA,KAAAA,YAHZ,KAAAC,cAHG,wFAaInJ,GACH,IACMoJ,EADgBpJ,EAAEqJ,cACSC,QAAQ,QACzChT,KAAK6D,IAAMiP,EACX9S,KAAKiT,iBAAiBH,GACtBjO,QAAQC,IAAIgO,KAlBb,+BAsBMpJ,GACL,IAAIwJ,EAAOxJ,EAAE0D,OAAO5E,MACpBxI,KAAK6D,IAAMqP,EACXrO,QAAQC,IAAI9E,KAAKmT,cAAcD,IAC3BlT,KAAKoT,eAAeF,IACpBA,EAAOlT,KAAKqT,uBAAuBH,GACnClT,KAAKiT,iBAAiBC,IAGtBlT,KAAKiT,iBAAiBC,KA/B3B,qCAmCYrP,GACX,IAAMyP,EAAI,2HACV,QAAIzP,EAAI0P,MAAMD,IACHzP,EAAI0P,MAAMD,GAAG,KAtCzB,oCA2CWzP,GAEV,IAAMyP,EAACA,YAAG,kGAAHA,QAGP,OADAzO,QAAQC,IAAI,MAAOjB,EAAKA,EAAI0P,MAAMD,GAAG,MACjCzP,EAAI0P,MAAMD,MACDzP,EAAI0P,MAAMD,GAAG,KAjD3B,6CAsDoBzP,GAGnB,OADoCA,EADD0P,MAAM,wGAElC1P,EAAIwB,MAAM,KAAK,GAAG3C,QAAQ,YAAa,aAzD/C,uCA4DcwQ,GACTlT,KAAKoT,eAAeF,KACpBlT,KAAK6S,cACLK,EAAOlT,KAAKqT,uBAAuBH,IAEvClT,KAAKwT,QAAUxT,KAAK4S,UAAUa,+BAA+BP,OAjE9D,K,uCAAMZ,IAAiB,Y,wBAAjBA,GAAiB,yiCFR9B,kBAAuD,iCAAS,EAAAoB,OAAA,KAAT,CAAwB,6BAAW,EAAAC,SAAA,MAA1F,OACA,uBASA,gBACI,0BAKJ,Q,MAfK,kCAUgD,2D,mLCIjD,CACIjB,KAAM,OACNC,UAAW,IAEf,CACID,KAAM,GACNC,UAAW,EACXiB,UAAW,OACX5J,KAAM,CACF6J,MAAO,WAGf,CACInB,KAAM,OACNC,UAAW,GACX3I,KAAM,CACF6J,MAAO,eAGf,CACInB,KAAM,QACNC,UAAW,GACXmB,YAAa,CAAC,MACd9J,KAAM,CACF6J,MAAO,kBASZ,KAAMtB,GAAN,uC,qBAAMA,K,qDAAAA,KAAmB,SAHnB,CAAC,IAAawB,SAAStB,KACtB,O,iBEFP,KAAMD,GAAN,uC,qBAAMA,K,qDAAAA,KAAY,SANZ,CACL,IACA,GACA,S","file":"x","sourcesContent":["<div id=\"regular-video-list-container\">\r\n    <div class=\"video-container\" *ngFor=\"let video of items.videos; trackBy: trackByElement\">\r\n        <div class=\"thumbnail\">\r\n            <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, video.user.username)\">\r\n            <span class=\"live-now\" *ngIf=\"video.status==='live'\">Live now</span>\r\n            <span class=\"duration\" *ngIf=\"video.status!=='live'\">{{video.duration}}</span>\r\n        </div>\r\n        <div class=\"details\">\r\n            <h4 class=\"title\">{{video.name}}</h4>\r\n            <div class=\"shortened-details\">\r\n                <div class=\"user-avatar avatarClass\">\r\n                    <img class=\"avatar\" [src]=\"video.channel.avatar|getImgPath: 'avatars'\">\r\n                </div>\r\n                <span class=\"channel-name\" [routerLink]=\"'/channels/'+video.user.username\">\r\n                    {{video.user.channel.name}}\r\n                </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? video.participants + ' watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n            </div>\r\n            <p class=\"shortened-description\">\r\n                {{video.description}}\r\n            </p>\r\n\r\n            <div class=\"saved-video\" *ngIf=\"checkIfSavedByCurrentUser(video)\">\r\n                <mat-icon>turned_in</mat-icon>\r\n                <span>Saved</span>\r\n            </div>\r\n\r\n            <div class=\"tags\">\r\n                <ul>\r\n                    <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                        <span>{{tag.name}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"is-new-video\" *ngIf=\"checkIfNewVideo(video)\">\r\n                <span class=\"new\">New</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\nimport {Router} from '@angular/router';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'app-show-regular-list',\r\n    templateUrl: './show-regular-list.component.html',\r\n    styleUrls: ['./show-regular-list.component.scss']\r\n})\r\nexport class ShowRegularListComponent implements OnInit {\r\n\r\n    @Input() items;\r\n    @Input() authUser;\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    checkIfSavedByCurrentUser(video) {\r\n        return video.users_vids.find(v => v.username === this.authUser?.username && v.users_videos.saved);\r\n    }\r\n\r\n    checkIfNewVideo(video) {\r\n        const duration = moment.duration(moment().diff(video.created_at));\r\n        return Math.floor(duration.asDays()) < 7;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-container\" *ngFor=\"let playlist of items.playlists\">\r\n    <ng-container *ngIf=\"playlist.videos.length > 0\">\r\n        <div class=\"thumbnail-container\" (click)=\"openPlaylistPage(playlist, playlist.videos[0].id)\">\r\n            <div class=\"thumbnail\">\r\n                <div class=\"short-details\">\r\n                    <mat-icon>playlist_add_check</mat-icon>\r\n                    <p class=\"name\">{{playlist.name}}</p>\r\n                    <p class=\"video-count\">{{playlist.videos.length + (playlist.videos.length === 1 ? ' video' : ' videos')}}</p>\r\n                </div>\r\n                <img [src]=\"playlist.thumbnail|getImgPath\">\r\n            </div>\r\n            <div class=\"fake-bg thumbnail\"></div>\r\n        </div>\r\n        <div class=\"details\">\r\n\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-show-playlists-list',\r\n    templateUrl: './show-playlists-list.component.html',\r\n    styleUrls: ['./show-playlists-list.component.scss']\r\n})\r\nexport class ShowPlaylistsListComponent implements OnInit {\r\n\r\n    @Input('items') items;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openPlaylistPage(playlist, firstVideoId) {\r\n        const route = 'videos/play';\r\n        const params = {id: firstVideoId, playlist_id: playlist.id};\r\n        await this.router.navigate([route], {queryParams: params});\r\n    }\r\n\r\n}\r\n","<div id=\"search-results-container\">\r\n    <ng-container *ngFor=\"let channel of channelsVideos\">\r\n        <div class=\"channel-item\">\r\n            <div class=\"thumbnail\">\r\n                <img class=\"newAvatar\" [src]=\"channel.avatar|getImgPath:'avatars'\"\r\n                     (click)=\"openChannelPage(channel.user?.username)\">\r\n            </div>\r\n            <div class=\"info\">\r\n                <div class=\"infoPart\">\r\n                    <p class=\"channel-name\" (click)=\"openChannelPage(channel?.user?.username)\">\r\n                        {{channel.name}}\r\n                    </p>\r\n                    <div class=\"shortened-details\">\r\n                        <p class=\"video-count video-countStyle\">\r\n                            {{channel.videos.length + (channel.videos.length === 1 ? ' video' : ' videos')}}\r\n                        </p>\r\n                    </div>\r\n                    <p [innerHTML]=\"getDesc(channel.description)\"></p>\r\n                </div>\r\n                <button class=\"btn subscribe-to-channel-btn\" *ngIf=\"channel?.user?.username !== authUser?.username\"\r\n                        [class.subscribed]=\"checkIfSubscribed(channel)\"\r\n                        (click)=\"subscribeToChannel(channel)\">{{checkIfSubscribed(channel) ? 'Subscribed' : 'Subscribe'}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"video-container\" *ngFor=\"let video of channel.videos\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, channel.user.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\" [routerLink]=\"'/channels/'+channel.user.username\">{{channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\" [innerHTML]=\"video.description\">\r\n                </p>\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-search-results',\r\n    templateUrl: './show-search-results.component.html',\r\n    styleUrls: ['./show-search-results.component.scss']\r\n})\r\nexport class ShowSearchResultsComponent implements OnInit {\r\n\r\n    @Input('channelsVideos') channelsVideos;\r\n    @Input('authUser') authUser;\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        await this.router.navigate(['channels/' + username]);\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    subscribeToChannel(channel) {\r\n        this.channelsService.subscribeToChannel({user_id: this.authUser.id, channel_id: channel.id}).subscribe(dt => {\r\n            this.channelsService.getUserChannelSubscriptions({user_id: this.authUser.id}).subscribe(d => {\r\n                this.subject.setUserSubscriptions(d);\r\n                if (this.checkIfSubscribed(channel)) {\r\n                    channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id);\r\n                } else {\r\n                    channel.subscribers.push(this.authUser);\r\n                }\r\n                // console.log(channel.subscribers)\r\n                // channel.subscribers = channel.subscribers.filter(s => s.id !== this.authUser?.id).concat([this.authUser]);\r\n                // console.log(channel.subscribers)\r\n\r\n                // this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n            });\r\n        });\r\n    }\r\n\r\n    checkIfSubscribed(channel) {\r\n        return channel.subscribers.find(s => s.id === this.authUser?.id);\r\n    }\r\n\r\n    getDesc(d) {\r\n        return d?.replace(/<br\\s*[\\/]?>/gi, '\\n');\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"all-videos\">\r\n    <button class=\"filter-toggle-btn\" *ngIf=\"isFiltersShown()\" (click)=\"showFilters = !showFilters\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Filters</span>\r\n    </button>\r\n    <app-video-filters (filter)=\"getFilteredList($event)\" *ngIf=\"showFilters\"></app-video-filters>\r\n    <div id=\"videos-list\">\r\n        <mat-spinner [diameter]=\"20\" *ngIf=\"loadingVideos\"></mat-spinner>\r\n        <ng-container *ngIf=\"!search && !loadingVideos\">\r\n            <app-show-regular-list [items]=\"items\" [authUser]=\"authUser\"></app-show-regular-list>\r\n            <app-show-playlists-list [items]=\"items\" [authUser]=\"authUser\"></app-show-playlists-list>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"search && !loadingVideos\">\r\n            <app-show-search-results [channelsVideos]=\"channelsVideos\" [authUser]=\"authUser\"></app-show-search-results>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"search && channelsVideos?.length === 0\">\r\n        <span class=\"error\">No results found</span>\r\n    </div>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL} from '@core/constants/global';\r\nimport * as moment from 'moment';\r\nimport {ActivatedRoute, ActivationEnd, Data, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {filter, map, tap} from 'rxjs/operators';\r\nimport {checkIfObjectEmpty} from '@core/helpers/check-if-object-empty';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {FilterOutFalsyValuesFromObjectPipe} from '@shared/pipes/filter-out-falsy-values-from-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-videos',\r\n    templateUrl: './show-videos.component.html',\r\n    styleUrls: ['./show-videos.component.scss']\r\n})\r\nexport class ShowVideosComponent implements OnInit, OnDestroy {\r\n    items = {videos: [], playlists: []};\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    selectedTag;\r\n    authUser;\r\n    showTrending = false;\r\n    showFilters = false;\r\n    filters = {};\r\n    filterStatus = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n    loadingVideos = false;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private getExactParams: FilterOutFalsyValuesFromObjectPipe\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n\r\n        this.subscriptions.push(\r\n            this.route.queryParams.subscribe(d => {\r\n                this.search = this.route.snapshot.queryParams?.search;\r\n                this.showTrending = this.router.url.includes('trending');\r\n                this.selectedTag = this.route.snapshot.queryParams?.tag;\r\n                if (this.search) {\r\n                    this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n                } else {\r\n                    this.getVideosList({search: this.search, filters: this.filters, tag: this.selectedTag});\r\n                }\r\n            }));\r\n\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n    }\r\n\r\n    getFilteredList(filters = {}) {\r\n        this.filters = filters;\r\n        this.filterStatus = 'applied';\r\n        if (this.search) {\r\n            this.searchChannelsVideos({search: this.search, filters: this.filters});\r\n        } else {\r\n            this.getVideosList({filters: this.filters});\r\n        }\r\n    }\r\n\r\n    getVideosList(params) {\r\n        params = this.getExactParams.transform(params);\r\n\r\n        this.videoService.get({\r\n            withPlaylists: !this.showTrending ? 1 : 0,\r\n            trending: this.showTrending ? 1 : 0,\r\n            ...params\r\n        }).subscribe(dt => {\r\n            this.items = dt;\r\n        });\r\n    }\r\n\r\n    searchChannelsVideos(params) {\r\n\r\n        params = this.getExactParams.transform(params);\r\n        this.loadingVideos = true;\r\n\r\n        this.channelsService.searchWithVideos({user_id: this.authUser?.id, ...params}).subscribe(dt => {\r\n            this.loadingVideos = false;\r\n            this.channelsVideos = dt;\r\n        });\r\n    }\r\n\r\n\r\n    isFiltersShown() {\r\n        return this.items.videos?.length > 0 ||\r\n            (this.search && this.channelsVideos.find(v => v.videos.length > 0))\r\n            || this.filterStatus === 'applied' && !this.loadingVideos;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n}\r\n","<div class=\"container\" *ngIf=\"videoUrl\">\r\n    <div class=\"loading-spinner\" *ngIf=\"videoInit==='pending'\">\r\n        <mat-spinner [diameter]=\"15\"></mat-spinner>\r\n        <span style=\"margin-left:10px\">Loading video</span>\r\n    </div>\r\n    <div [hidden]=\"videoInit!=='finished'\">\r\n        <video id=\"player\" class=\"video-js\" controls preload=\"auto\" autoplay data-setup='{}'>\r\n            <source [src]=\"videoUrl\" type=\"video/mp4\">\r\n            <p class=\"vjs-no-js\">\r\n                To view this video please enable JavaScript, and consider upgrading to a web browser that\r\n                <a href=\"https://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a>\r\n            </p>\r\n        </video>\r\n    </div>\r\n</div>\r\n","import {AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport videojs from 'video.js';\r\nimport watermark from 'videojs-watermark';\r\n\r\n@Component({\r\n    selector: 'app-video-js-player',\r\n    templateUrl: './video-js-player.component.html',\r\n    styleUrls: ['./video-js-player.component.scss']\r\n})\r\nexport class VideoJsPlayerComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    @Input() videoUrl;\r\n    // videoUrl = 'http://localhost:3001/uploads/videos/Andrea_Corr_Shame_On_You_HD.mp4';\r\n    videoInit = 'idle';\r\n\r\n    options = VIDEOJS_PLAYER_OPTIONS;\r\n    player: videojs.Player;\r\n\r\n    constructor(\r\n        private cdr: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.videoUrl)\r\n    }\r\n\r\n    initPlayer() {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoInit = 'pending';\r\n        this.player = videojs(video, this.options, () => {\r\n            this.player.duration = () => {\r\n                const parts = this.videoData.duration.split(':');\r\n                let s = 0;\r\n                let m = 1;\r\n\r\n                while (parts.length > 0) {\r\n                    s += m * parseInt(parts.pop(), 10);\r\n                    m *= 60;\r\n                }\r\n                return s;\r\n\r\n            };\r\n\r\n            videojs.registerPlugin('watermark', watermark);\r\n            this.player.watermark({\r\n                image: 'assets/img/logo.png',\r\n                position: 'bottom-right',\r\n                fadeTime: null\r\n            });\r\n\r\n            videojs.deregisterPlugin('watermark');\r\n\r\n        });\r\n\r\n        this.player.on('loadedmetadata', () => {\r\n            this.videoInit = 'finished';\r\n        });\r\n\r\n        this.player.on('error', (err) => {\r\n            const error = this.player.error();\r\n            this.videoInit = 'finished';\r\n        });\r\n        this.cdr.detectChanges();\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initPlayer();\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport watermark from 'videojs-watermark';\r\nimport 'videojs-watermark/dist/videojs-watermark.css';\r\nimport videojs from 'video.js';\r\n\r\n@Component({\r\n    selector: 'app-video-regular-player',\r\n    templateUrl: './video-regular-player.component.html',\r\n    styleUrls: ['./video-regular-player.component.scss']\r\n})\r\nexport class VideoRegularPlayerComponent implements OnInit {\r\n\r\n    @Input() videoData;\r\n    videoUrl;\r\n    player;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoUrl = API_URL + 'uploads/videos/' + this.videoData.filename;\r\n        video.setAttribute('src', this.videoUrl);\r\n    }\r\n\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {FixTextLineBreaksPipe} from '@shared/pipes/fix-text-line-breaks.pipe';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-form',\r\n    templateUrl: './video-comments-form.component.html',\r\n    styleUrls: ['./video-comments-form.component.scss']\r\n})\r\nexport class VideoCommentsFormComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    videoCommentsForm: FormGroup;\r\n    inputFocused = false;\r\n    authUser;\r\n    isSubmitted = false;\r\n    replyUsername;\r\n    originalFormattedComment = '';\r\n\r\n\r\n    @Input() editComment = false;\r\n    @Input() selectedComment = null;\r\n    @Input() selectedReply = null;\r\n    @Input() reply = false;\r\n    @Input() isReplyComment = false;\r\n    @Input() reply2Reply = false;\r\n    @Input() parentComment = null;\r\n    @ViewChild('cEditable') cEditable;\r\n    @Output('added') commentAdded = new EventEmitter();\r\n    @Output('updated') commentUpdated = new EventEmitter();\r\n    @Output('cancelled') cancelled = new EventEmitter();\r\n\r\n    placeholderText;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private subject: SubjectService,\r\n        private cdr: ChangeDetectorRef,\r\n        private fixLineBreaks: FixTextLineBreaksPipe\r\n    ) {\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n        this.placeholderText = this.getPlaceholderText();\r\n\r\n        this.videoCommentsForm = this.fb.group({\r\n            id: [''],\r\n            from_id: [this.authUser.id],\r\n            comment: ['', Validators.required],\r\n            video_id: [this.videoData.id],\r\n            to_user_id: [0],\r\n            to_comment_id: [0],\r\n            to_reply_id: [0],\r\n            is_reply: [0]\r\n        });\r\n\r\n        if (this.reply2Reply) {\r\n            this.replyUsername = '@' + this.selectedReply?.user.username + ' ';\r\n            this.videoCommentsForm.patchValue({comment: this.replyUsername});\r\n        }\r\n\r\n    }\r\n\r\n    saveComment() {\r\n        this.isSubmitted = true;\r\n        if (this.videoCommentsForm.valid) {\r\n            // Reply add\r\n            if (this.reply) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n                // Reply edit\r\n            } else if (this.isReplyComment) {\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.parentComment.id,\r\n                    to_user_id: this.parentComment.user.id,\r\n                    is_reply: 1\r\n                });\r\n            } else if (this.reply2Reply) {\r\n                const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                this.videoCommentsForm.patchValue({\r\n                    to_comment_id: this.selectedComment.id,\r\n                    to_reply_id: this.selectedReply.id,\r\n                    to_user_id: this.selectedComment.user.id,\r\n                    comment: reply2Reply,\r\n                    is_reply: 1\r\n                });\r\n            }\r\n\r\n            // Comment & reply actions\r\n            if (this.editComment) {\r\n\r\n                if (this.parentComment) {\r\n                    const updatedUsername = '<strong class=\"reply-username\">' + this.replyUsername + '</strong>';\r\n                    const reply2Reply = this.commentCtrl.value.replace(this.replyUsername, updatedUsername);\r\n                    this.videoCommentsForm.patchValue({comment: reply2Reply});\r\n                }\r\n\r\n\r\n                this.videoService.updateVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.commentUpdated.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            } else {\r\n\r\n                this.videoService.addVideoComment(this.videoCommentsForm.value).subscribe(dt => {\r\n                    this.inputFocused = false;\r\n                    this.commentAdded.emit(dt);\r\n                    this.videoCommentsForm.get('comment').reset();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.inputFocused = false;\r\n        this.videoCommentsForm.get('comment').reset();\r\n        if (this.editComment || this.reply || this.reply2Reply) {\r\n            this.cancelled.emit();\r\n        }\r\n    }\r\n\r\n\r\n    getPlaceholderText() {\r\n        return 'Add a public ' + (this.reply ? 'reply' : 'comment') + '...';\r\n    }\r\n\r\n    get commentCtrl() {\r\n        return this.videoCommentsForm.get('comment');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.editComment) {\r\n            const comment = this.selectedComment.comment;\r\n            if (this.parentComment) {\r\n                this.replyUsername = comment.substring(\r\n                    comment.lastIndexOf('@'),\r\n                    comment.lastIndexOf(' ')\r\n                );\r\n            }\r\n            this.videoCommentsForm.patchValue({\r\n                comment: this.fixLineBreaks.transform(comment.replace(/<[^>]*>?/gm, '')),\r\n                id: this.selectedComment.id\r\n            });\r\n            this.inputFocused = true;\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"video-container\">\r\n    <video controls autoplay></video>\r\n\r\n    <img class=\"watermark\" src=\"assets/img/logo.png\">\r\n</div>\r\n","<form [formGroup]=\"videoCommentsForm\" class=\"w-100\">\r\n    <div class=\"d-flex mt-3 comment-input-container\">\r\n        <img class=\"avatar\" [src]=\"authUser.channel.avatar|getImgPath:'avatars'\">\r\n        <input type=\"hidden\" formControlName=\"comment\">\r\n        <mat-form-field floatLabel=\"never\">\r\n            <textarea matInput cdkTextareaAutosize [placeholder]=\"placeholderText\" class=\"comment-input\" #cEditable\r\n                      (focus)=\"inputFocused = true\"\r\n                      formControlName=\"comment\"></textarea>\r\n        </mat-form-field>\r\n    </div>\r\n    <div class=\"d-flex justify-content-end buttonsPart\">\r\n        <div [hidden]=\"!inputFocused\">\r\n            <button class=\"btn text-btn\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n            <button (click)=\"saveComment()\" type=\"button\" [class.green-bg]=\"videoCommentsForm.valid\"\r\n                    class=\"ml-3 px-2 btn enter replyBtn\">{{reply ? 'Reply' : 'Comment'}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","<div class=\"d-flex comments_part_below\">\r\n    <img class=\"avatar avatar-comments\" [src]=\"comment.user?.channel.avatar|getImgPath:'avatars'\">\r\n    <div class=\"details\">\r\n        <div class=\"d-flex align-items-center mb-2 detailsPart\">\r\n            <div class=\"mr-3 user-name\" [class.author.px-2]=\"isAuthor(comment)\"\r\n                 (click)=\"openChannelPage(comment?.user?.username)\">\r\n                {{getFullName(comment?.user)}} <i class=\"fas fa-check-circle ml-1\" *ngIf=\"isAuthor(comment)\"></i>\r\n            </div>\r\n            <div class=\"comment-date\">{{comment.created_at | dateFromNow}}</div>\r\n        </div>\r\n\r\n        <div class=\"comment-text mb-2\" [innerHTML]=\"comment.comment\">\r\n        </div>\r\n        <div class=\"likes-reply\">\r\n            <div class=\"comments-like mb-2\">\r\n                <i class=\"fa fa-thumbs-up mr-1\" (click)=\"likeDislikeCommentFn(comment)\"\r\n                   [class.liked]=\"checkUserCommentConnection(comment)?.liked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'liked') }} </span>\r\n                <i class=\"fa fa-thumbs-down ml-3 mr-1\" (click)=\"likeDislikeCommentFn(comment, false)\"\r\n                   [class.disliked]=\"checkUserCommentConnection(comment)?.disliked\"></i>\r\n                <span class=\"likes-count\"> {{getReactorsCount(comment.reactors, 'disliked') }} </span>\r\n            </div>\r\n            <div class=\"reply-container\">\r\n                <span class=\"reply\" (click)=\"selectCommentFn(comment)\">Reply</span>\r\n                <app-video-comments-form [videoData]=\"videoData\" [reply]=\"reply\"\r\n                                         *ngIf=\"showReplyForm && (comment.id===selectedComment?.id ||comment.id == selectedReply?.id)\"\r\n                                         [selectedComment]=\"selectedComment\" [reply2Reply]=\"reply2Reply\"\r\n                                         [selectedReply]=\"selectedReply\"\r\n                                         (added)=\"commentAddedFn($event)\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n            </div>\r\n        </div>\r\n        <p class=\"replies-toggler mt-3\" *ngIf=\"comment?.replies?.length > 0\"\r\n           (click)=\"toggleRepliesFn(comment)\">\r\n            <mat-icon>expand_{{showReplies && selectedComment === comment ? 'more' : 'less'}}</mat-icon>\r\n            <span>{{getRepliesTogglerText(comment)}}</span>\r\n        </p>\r\n    </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-single-comment',\r\n    templateUrl: './single-comment.component.html',\r\n    styleUrls: ['./single-comment.component.scss']\r\n})\r\nexport class SingleCommentComponent implements OnInit {\r\n\r\n    @Input() comment;\r\n    @Input() videoData;\r\n    @Input() showReplyForm;\r\n    @Input() selectedComment;\r\n    @Input() selectedReply;\r\n    @Input() showReplies;\r\n    @Input() reply;\r\n    @Input() reply2Reply;\r\n\r\n    @Output() toggleReplies = new EventEmitter();\r\n    @Output() commentAdded = new EventEmitter();\r\n    @Output() selectComment = new EventEmitter();\r\n    @Output() likeDislikeComment = new EventEmitter();\r\n\r\n    authUser;\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    getRepliesTogglerText(c) {\r\n        const len = c.replies.length;\r\n        return `View ${len + (len > 1 ? ' replies' : ' reply')}`;\r\n    }\r\n\r\n    selectCommentFn(c) {\r\n        this.selectComment.emit(c);\r\n    }\r\n\r\n    commentAddedFn(e) {\r\n        this.commentAdded.emit(e);\r\n    }\r\n\r\n    toggleRepliesFn(c) {\r\n        this.toggleReplies.emit(c);\r\n    }\r\n\r\n    likeDislikeCommentFn(c, liked = true) {\r\n        this.likeDislikeComment.emit({c, liked});\r\n    }\r\n\r\n    checkUserCommentConnection(c) {\r\n        const foundInReactors = c.reactors.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n    getFullName(data) {\r\n        return data.first_name + ' ' + data.last_name;\r\n    }\r\n\r\n    async openChannelPage(username) {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate(['channels/' + username])\r\n        );\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\n\r\n@Component({\r\n    selector: 'app-comment-actions',\r\n    templateUrl: './comment-actions.component.html',\r\n    styleUrls: ['./comment-actions.component.scss']\r\n})\r\nexport class CommentActionsComponent implements OnInit {\r\n    authUser;\r\n\r\n    @Input() comment;\r\n    @Output() commentSelected = new EventEmitter();\r\n    @Output() remove = new EventEmitter();\r\n\r\n\r\n    constructor(\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n\r\n\r\n    selectComment(c) {\r\n        this.commentSelected.emit(c);\r\n    }\r\n\r\n    removeComment(c) {\r\n        this.remove.emit(c);\r\n    }\r\n\r\n\r\n}\r\n","<div class=\"more-actions\">\r\n\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"selectComment(comment)\">\r\n            <mat-icon>edit</mat-icon>\r\n            <span>Edit</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"removeComment(comment)\">\r\n            <mat-icon>delete</mat-icon>\r\n            <span>Delete</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","<div class=\"comments-container\" [hidden]=\"videoComments.length === 0\">\r\n    <ng-container *ngFor=\"let c of videoComments\">\r\n        <div class=\"comment d-flex mt-4\" *ngIf=\"isCommentShown(c)\">\r\n            <div class=\"left-group\" [class.w-100]=\"editComment\">\r\n                <app-single-comment [comment]=\"c\" [videoData]=\"videoData\" [showReplyForm]=\"showReplyForm\"\r\n                                    [showReplies]=\"showReplies\" [selectedComment]=\"selectedComment\"\r\n                                    class=\"w-100\" [reply]=\"true\" (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                    (commentAdded)=\"commentAdded($event)\" (toggleReplies)=\"toggleReplies($event)\"\r\n                                    (selectComment)=\"selectComment($event, true)\"></app-single-comment>\r\n                <div class=\"replies\" [hidden]=\"!isReplyShown(c)\">\r\n                    <ng-container *ngFor=\"let reply of c.replies\">\r\n                        <div class=\"d-flex reply mt-4\" *ngIf=\"reply.id!==selectedReply?.id || !editReply\">\r\n                            <div class=\"left-group\">\r\n                                <app-single-comment [comment]=\"reply\" [videoData]=\"videoData\"\r\n                                                    [showReplyForm]=\"showReplyToReplyForm\"\r\n                                                    [showReplies]=\"showReplies\"\r\n                                                    [selectedComment]=\"selectedComment\"\r\n                                                    [selectedReply]=\"selectedReply\" [reply2Reply]=\"true\"\r\n                                                    (likeDislikeComment)=\"likeDislikeComment($event)\"\r\n                                                    (commentAdded)=\"commentAdded($event)\" class=\"w-100\"\r\n                                                    (selectComment)=\"replyToReply(c, reply)\"></app-single-comment>\r\n                            </div>\r\n                            <div class=\"right-group\">\r\n                                <app-comment-actions [comment]=\"reply\"\r\n                                                     *ngIf=\"isMyComment(reply) && !editReply\"\r\n                                                     (remove)=\"removeComment($event)\"\r\n                                                     (commentSelected)=\"selectComment($event, false,true)\">\r\n                                </app-comment-actions>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedReply\"\r\n                                                 class=\"w-100\" [isReplyComment]=\"true\" [parentComment]=\"c\"\r\n                                                 *ngIf=\"editReply && reply.id===selectedReply.id\"\r\n                                                 (updated)=\"getUpdatedComments($event)\"\r\n                                                 (cancelled)=\"editReply = false\"\r\n                                                 [videoData]=\"videoData\">\r\n                        </app-video-comments-form>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-group\">\r\n                <app-comment-actions [comment]=\"c\" *ngIf=\"isMyComment(c) && !editComment\"\r\n                                     (remove)=\"removeComment($event)\"\r\n                                     (commentSelected)=\"selectComment($event)\">\r\n                </app-comment-actions>\r\n            </div>\r\n        </div>\r\n        <app-video-comments-form [editComment]=\"true\" [selectedComment]=\"selectedComment\"\r\n                                 class=\"edit-comment-form w-100\"\r\n                                 *ngIf=\"editComment && c.id===selectedComment.id\"\r\n                                 (updated)=\"getUpdatedComments($event)\" (cancelled)=\"editComment = false\"\r\n                                 [videoData]=\"videoData\">\r\n        </app-video-comments-form>\r\n    </ng-container>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {Subscription} from 'rxjs';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-video-comments-list',\r\n    templateUrl: './video-comments-list.component.html',\r\n    styleUrls: ['./video-comments-list.component.scss'],\r\n    // changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VideoCommentsListComponent implements OnInit, OnDestroy {\r\n\r\n    authUser;\r\n    selectedComment;\r\n    subscriptions: Subscription[] = [];\r\n    showReplyForm = false;\r\n    showReplyToReplyForm = false;\r\n    showReplies = false;\r\n    editReply = false;\r\n    selectedReply;\r\n    trackByElement = trackByElement;\r\n\r\n    @Input() videoData;\r\n    @Input() videoComments = [];\r\n    @Input() editComment = false;\r\n\r\n    constructor(\r\n        private subject: SubjectService,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n\r\n    isAuthor(c) {\r\n        return c.user.id === this.videoData.author_id;\r\n    }\r\n\r\n    isMyComment(c) {\r\n        return c.user.id === this.authUser.id;\r\n    }\r\n\r\n    getUpdatedComments(e) {\r\n        this.videoComments = e;\r\n        this.editComment = false;\r\n        this.editReply = false;\r\n        this.selectedComment = e.find(cm => cm.id === this.selectedComment?.id);\r\n        this.selectedReply = e.find(c => c.id === this.selectedReply?.id);\r\n    }\r\n\r\n    selectComment(c, replyBtnClicked = false, replyCommentSelected = false) {\r\n        if (!replyBtnClicked && !replyCommentSelected) {\r\n            this.editComment = !this.editComment;\r\n            this.showReplyForm = !this.editComment;\r\n            this.selectedComment = c;\r\n        } else if (replyCommentSelected) {\r\n            this.editReply = true;\r\n            this.selectedReply = c;\r\n        } else {\r\n            this.showReplyForm = this.selectedComment !== c || !this.showReplyForm;\r\n            this.selectedComment = c;\r\n        }\r\n    }\r\n\r\n    replyToReply(c, r) {\r\n        this.showReplyToReplyForm = this.selectedReply !== r || !this.showReplyToReplyForm;\r\n        this.selectedComment = c;\r\n        this.selectedReply = r;\r\n    }\r\n\r\n\r\n    removeComment(c) {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.videoService.removeVideoComment({\r\n                    user_id: this.authUser.id,\r\n                    id: c.id,\r\n                    video_id: c.video_id\r\n                }).subscribe(dt => {\r\n                    this.videoComments = dt;\r\n                    this.selectedComment = dt.find(cm => cm.id === this.selectedComment?.id);\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.videoComments = e;\r\n        this.showReplyForm = false;\r\n        this.showReplyToReplyForm = false;\r\n        this.showReplies = true;\r\n        this.selectedComment = e.find(c => c.id === this.selectedComment.id);\r\n    }\r\n\r\n    toggleReplies(c) {\r\n        this.showReplies = !this.showReplies;\r\n        this.selectedComment = c;\r\n    }\r\n\r\n    likeDislikeComment(e) {\r\n        const params = this.buildParams(e.c, e.liked);\r\n\r\n\r\n        this.subscriptions.push(this.videoService.updateCommentLikes(params).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.showReplies = true;\r\n            this.selectedComment = this.videoComments.find(comm => comm.id === this.selectedComment?.id);\r\n        }));\r\n    }\r\n\r\n    buildParams(c, liked) {\r\n        const params = {\r\n            video_id: c.video_id,\r\n            comment_id: c.id,\r\n            user_id: this.authUser.id,\r\n            liked: 0,\r\n            disliked: 0,\r\n            likes: c.likes,\r\n            dislikes: c.dislikes\r\n        };\r\n        const conn = this.checkUserCommentConnection(c);\r\n\r\n        // Avoiding negative values here\r\n        params.likes = Math.max(0, conn?.liked ? --c.likes : +c.likes);\r\n        params.dislikes = Math.max(0, conn?.disliked ? --c.dislikes : +c.dislikes);\r\n\r\n\r\n        if (liked) {\r\n            params.liked = +!conn?.liked;\r\n        } else {\r\n            params.disliked = +!conn?.disliked;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    getReactorsCount(reactors, reaction) {\r\n        return reactors.filter(r => r?.users_comments[reaction]).length;\r\n    }\r\n\r\n\r\n    checkUserCommentConnection(comment) {\r\n        const foundInReactors = comment.reactors?.find(r => r.id === this.authUser.id);\r\n        return foundInReactors?.users_comments;\r\n    }\r\n\r\n    isCommentShown(c) {\r\n        return (c.id !== this.selectedComment?.id && !this.showReplyForm) || this.showReplyForm || !this.editComment;\r\n    }\r\n\r\n    isReplyShown(c) {\r\n        return this.showReplies && this.selectedComment === c;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<form [formGroup]=\"videoDetailsForm\" id=\"tags-form\">\r\n    <div class=\"left-group\">\r\n\r\n        <div id=\"video-name\">\r\n            <mat-form-field>\r\n                <input matInput formControlName=\"name\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"isSubmitted && videoDetailsForm.get('name').hasError('required')\">\r\n                The video name is required\r\n            </mat-error>\r\n            <mat-error *ngIf=\"videoDetailsForm.get('name').hasError('maxlength')\">\r\n                Not more than 12 characters please\r\n            </mat-error>\r\n        </div>\r\n    </div>\r\n    <div class=\"center-group\">\r\n        <div class=\"image-container\" *ngIf=\"videoData.thumbnail\">\r\n            <img class=\"saved-thumbnail\" [src]=\"apiUrl+ 'uploads/thumbnails/'+videoData.thumbnail\">\r\n        </div>\r\n        <div class=\"actions-container\">\r\n            <button id=\"change-thumbnail\" *ngIf=\"videoData.thumbnail\" (click)=\"removeThumbnail()\">Change thumbnail\r\n            </button>\r\n            <dropzone [config]=\"dropzoneConfig\" [hidden]=\"videoData.thumbnail\" (removedFile)=\"removeImage()\"\r\n                      id=\"video-thumbnail-dropzone\" class=\"single\" #dropzone (thumbnail)=\"onAddedFile($event)\"\r\n                      [message]=\"'Click or drag an image to upload'\">\r\n            </dropzone>\r\n            <input type=\"file\" (change)=\"changeThumbnail($event)\" [hidden]=\"true\">\r\n        </div>\r\n    </div>\r\n    <div class=\"right-group video-tags-right-part\">\r\n\r\n        <div id=\"video-tags\">\r\n            <mat-form-field class=\"example-chip-list\">\r\n                <mat-chip-list #tagList formControlName=\"tags\">\r\n                    <mat-chip *ngFor=\"let tag of videoData.tags\" (removed)=\"remove(tag)\">\r\n                        {{tag.name}}\r\n                        <mat-icon matChipRemove>cancel</mat-icon>\r\n                    </mat-chip>\r\n                    <input placeholder=\"Tags...\" #chipsInput\r\n                           [matChipInputFor]=\"tagList\"\r\n                           [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                           (matChipInputTokenEnd)=\"add($event)\">\r\n                </mat-chip-list>\r\n                <mat-hint align=\"end\">Please press 'Enter' after the tag name</mat-hint>\r\n\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"videoData.tags.length ===0 && isSubmitted\">Please provide some tags describing your live\r\n                video\r\n            </mat-error>\r\n        </div>\r\n\r\n        <div class=\"actions actions-video\">\r\n            <button id=\"save-tags\" (click)=\"saveDetails()\">\r\n                <mat-icon>checked</mat-icon>\r\n                <span>Save changes</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {MatChipInputEvent} from '@angular/material/chips';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {API_URL, TAG_CHARACTERS_LIMIT} from '@core/constants/global';\r\nimport {DROPZONE_CONFIG} from 'ngx-dropzone-wrapper';\r\n\r\n@Component({\r\n    selector: 'app-video-details-form',\r\n    templateUrl: './video-details-form.component.html',\r\n    styleUrls: ['./video-details-form.component.scss']\r\n})\r\nexport class VideoDetailsFormComponent implements OnInit {\r\n    @Input('videoData') videoData;\r\n    @Output('formReady') formReady = new EventEmitter();\r\n    videoDetailsForm: FormGroup;\r\n\r\n    isSubmitted = false;\r\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n    apiUrl = API_URL;\r\n\r\n    thumbnailFile;\r\n\r\n    dropzoneConfig = DROPZONE_CONFIG;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private toastr: ToastrService\r\n    ) {\r\n        this.videoDetailsForm = this.fb.group({\r\n            name: ['', [Validators.required, Validators.maxLength(TAG_CHARACTERS_LIMIT)]],\r\n            tags: [[], Validators.required],\r\n            thumbnail: [''],\r\n            video_id: []\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.videoDetailsForm.patchValue({\r\n            video_id: this.videoData.id,\r\n            ...this.videoData\r\n        });\r\n    }\r\n\r\n    add(event: MatChipInputEvent): void {\r\n        const input = event.input;\r\n        const value = event.value;\r\n\r\n        if ((value || '').trim()) {\r\n            if (this.videoData.tags.length === 3) {\r\n                this.toastr.error('We don\\'t support more than 3 tags per video');\r\n            } else {\r\n                this.videoData.tags.push({name: value.trim()});\r\n                this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n            }\r\n\r\n            // this.saveTags();\r\n        }\r\n\r\n        // Reset the input value\r\n        if (input) {\r\n            input.value = '';\r\n        }\r\n    }\r\n\r\n    remove(tag): void {\r\n        const index = this.videoData.tags.indexOf(tag);\r\n\r\n        if (index >= 0) {\r\n            this.videoData.tags.splice(index, 1);\r\n            this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        }\r\n    }\r\n\r\n    removeThumbnail() {\r\n        this.videoDetailsForm.patchValue({thumbnail: ''});\r\n        this.videoData.thumbnail = '';\r\n    }\r\n\r\n    changeThumbnail(e) {\r\n        this.thumbnailFile = e.target.files[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n    saveDetails() {\r\n        this.videoDetailsForm.patchValue({tags: this.videoData.tags});\r\n        this.isSubmitted = true;\r\n        if (this.videoDetailsForm.valid) {\r\n            const formData = new FormData();\r\n            for (const field in this.videoDetailsForm.value) {\r\n                if (field !== 'tags') {\r\n                    formData.append(field, this.videoDetailsForm.value[field]);\r\n                } else {\r\n                    formData.append(field, JSON.stringify(this.videoDetailsForm.value[field]));\r\n                }\r\n            }\r\n            if (this.thumbnailFile) {\r\n                formData.append('video_thumbnail_file', this.thumbnailFile, this.thumbnailFile.name);\r\n            }\r\n            this.formReady.emit(formData);\r\n        }\r\n    }\r\n\r\n    removeImage() {\r\n\r\n    }\r\n\r\n    onAddedFile(e) {\r\n        this.thumbnailFile = e[0];\r\n        this.videoDetailsForm.patchValue({thumbnail: this.thumbnailFile.name});\r\n    }\r\n\r\n}\r\n","<div class=\"playlist-wrap\" *ngIf=\"playlistOpened && playlistData && playlistData.videos.length > 0\">\r\n    <h2>{{playlistData.name}}</h2>\r\n    <div class=\"list-wrap\">\r\n        <ng-container *ngFor=\"let video of playlistData.videos\">\r\n\r\n            <div class=\"playlist-video\" [class.selected]=\"videoId === video.id\"\r\n                 (click)=\"openVideoPage(video, playlistData?.id)\">\r\n\r\n                <div class=\"thumbnail-container\">\r\n                    <img [src]=\"video.thumbnail|getImgPath\">\r\n                </div>\r\n\r\n                <div class=\"details-container\">\r\n                    <p class=\"video-name\" (click)=\"openVideoPage(video, playlistData?.id)\">{{video.name}}</p>\r\n                    <p class=\"main-text-3\">{{video.channel.name}}</p>\r\n                </div>\r\n\r\n                <div class=\"remove-btn-container\" *ngIf=\"authUser.id === playlistData.channel.id\"\r\n                     (click)=\"removeVideoFromPlaylist(video,playlistId)\">\r\n                    <span class=\"material-icons\">delete</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"suggested-videos\" *ngFor=\"let video of videoSuggestions;let ind = index\">\r\n    <div class=\"suggested-video\" *ngIf=\"ind < 5\">\r\n\r\n        <div class=\"thumbnail-container\">\r\n            <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video)\">\r\n        </div>\r\n\r\n        <div class=\"details-container\">\r\n            <p class=\"video-name\">{{video.name}}</p>\r\n            <p class=\"channel-sub-name\" [routerLink]=\"'/channels/'\"\r\n               [queryParams]=\"{username: video.user.username}\"\r\n            >{{video.channel.name}}</p>\r\n            <div class=\"details-row\">\r\n                <span class=\"watchers-count\">\r\n                    {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                </span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"upload-time\">{{video.created_at|dateFromNow}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<!--<div [hidden]=\"isProduction\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--    <img class=\"ads\" src=\"assets/img/ads.png\">-->\r\n<!--</div>-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PlaylistsService} from '@core/services/playlists.service';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {API_URL, DEFAULT_VIDEO_SUGGESTIONS_COUNT} from '@core/constants/global';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {environment} from '@env';\r\n\r\n@Component({\r\n    selector: 'app-video-suggestions',\r\n    templateUrl: './video-suggestions.component.html',\r\n    styleUrls: ['./video-suggestions.component.scss']\r\n})\r\nexport class VideoSuggestionsComponent implements OnInit {\r\n\r\n    urlParams;\r\n    videoId;\r\n    playlistId;\r\n    playlistData;\r\n\r\n    playlistOpened = false;\r\n    videoSuggestions = [];\r\n\r\n    apiUrl = API_URL;\r\n    authUser;\r\n\r\n    isProduction = environment.production;\r\n\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private playlistsService: PlaylistsService,\r\n        private videoService: VideoService,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public router: Router,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.urlParams = this.route.snapshot.queryParams;\r\n        this.videoId = +this.urlParams?.id;\r\n        this.playlistId = this.urlParams?.playlist_id;\r\n        this.playlistOpened = !!this.playlistId;\r\n\r\n        if (this.playlistOpened) {\r\n            this.playlistsService.getById({playlist_id: this.playlistId}).subscribe(dt => {\r\n                this.playlistData = dt;\r\n            });\r\n        }\r\n\r\n        this.videoService.get({limit: DEFAULT_VIDEO_SUGGESTIONS_COUNT}).subscribe(dt => {\r\n            this.videoSuggestions = dt.videos;\r\n            console.log(dt)\r\n        });\r\n\r\n    }\r\n\r\n    openVideoPage(video, playlistId = null) {\r\n        const route = '/videos/play';\r\n        const params = {id: video.id, playlist_id: playlistId};\r\n\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(async () =>\r\n            await this.router.navigate([route], {queryParams: params})\r\n        );\r\n\r\n    }\r\n\r\n    removeVideoFromPlaylist(video, playlistId) {\r\n        this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.playlistsService.removeVideoFromPlaylist({\r\n                    playlist_id: playlistId,\r\n                    video_id: video.id\r\n                }).subscribe(dt => {\r\n                    const oldVideoIndex = this.playlistData.videos.indexOf(video);\r\n                    this.playlistData.videos = dt.videos;\r\n                    const nextVideo = this.playlistData.videos[oldVideoIndex];\r\n                    if (nextVideo) {\r\n                        this.openVideoPage(nextVideo);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","<app-user-tags *ngIf=\"auth.loggedIn()\" (tagSelected)=\"getVideosByTag($event)\"></app-user-tags>\r\n<div class=\"ads-block\">\r\n    <div class=\"ads-block-left\">\r\n        <ng-container *ngIf=\"videoData\">\r\n            <div class=\"videoWrap\">\r\n                <app-video-js-player [videoData]=\"videoData\"\r\n                                     [videoUrl]=\"apiUrl + 'uploads/videos/' + videoData.filename\"></app-video-js-player>\r\n                                                <app-video-regular-player [videoData]=\"videoData\"></app-video-regular-player>\r\n                <!--                                <app-vjs-player [videoData]=\"videoData\" [options]=\"videoJSPlayerOptions\"></app-vjs-player>-->\r\n            </div>\r\n\r\n            <div class=\"main-tags\">\r\n                <div class=\"main-tags-text\">\r\n                    <span *ngIf=\"videoData.tags?.length === 0\">No tags defined for this video</span>\r\n                    <ng-container *ngIf=\"videoData.tags?.length > 0\">\r\n                        <p *ngFor=\"let tag of videoData.tags\" class=\"tag\" (click)=\"openVideoByTag(tag.name)\">\r\n                            #{{tag.name}}</p>\r\n                    </ng-container>\r\n                </div>\r\n\r\n                <div class=\"main-tags-like\">\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'like')\">\r\n                        <i class=\"fas fa-thumbs-up\" [class.liked]=\"userVideoConnection?.liked\"></i>\r\n                        <p>{{videoData.likes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"updateLikes(videoData, 'dislike')\">\r\n                        <i class=\"fas fa-thumbs-down\"\r\n                           [class.disliked]=\"userVideoConnection?.disliked\"></i>\r\n                        <p>{{videoData.dislikes}}</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"openSocialShareModal()\">\r\n                        <i class=\"fas fa-share-alt\"></i>\r\n                        <p>Share</p>\r\n                    </div>\r\n                    <div class=\"main-tags-share\" (click)=\"saveVideo(videoData)\"\r\n                         [class.saved]=\"userVideoConnection?.saved === 'saved'\">\r\n                        <i class=\"fas fa-plus-square\"></i>\r\n                        <p>{{userVideoConnection?.saved === 'saved' ? 'Saved' : 'Save'}}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div class=\"tags-container\">\r\n                <div class=\"editable-details\" *ngIf=\"!showTagsForm\">\r\n                    <p class=\"video-title\">{{videoData?.name}}</p>\r\n                    <button id=\"add-tags\"\r\n                            *ngIf=\"auth.loggedIn() && !showTagsForm && authUser?.id === videoData.author_id\"\r\n                            (click)=\"showTagsForm = !showTagsForm\">\r\n                        <mat-icon>edit</mat-icon>\r\n                        <span>Edit details</span>\r\n                    </button>\r\n                </div>\r\n                <app-video-details-form [videoData]=\"videoData\" *ngIf=\"showTagsForm\"\r\n                                        (formReady)=\"saveVideoDetails($event)\"></app-video-details-form>\r\n            </div>\r\n            <div class=\"details-row\">\r\n                <span class=\"views-count\">{{videoData?.views + ' view' + (videoData?.views === 1 ? '' : 's')}}</span>\r\n                <span class=\"dot\">&middot;</span>\r\n                <span class=\"date\">{{videoData.created_at|dateFromNow}}</span>\r\n            </div>\r\n            <div class=\"channel-block\"\r\n                 [routerLink]=\"'/channels/'+videoData.users_vids[0].username\"  *ngIf=\"videoData?.channel\">\r\n                <img alt=\"avatar\" class=\"avatar\" [src]=\"videoData.channel.avatar|getImgPath:'avatars'\">\r\n                <div>\r\n                    <p class=\"channel-name\">{{videoData.channel.name}}</p>\r\n                    <p class=\"subscribers-count\">{{buildSubscribersCountText(videoData)}}</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-side\">\r\n                <app-video-suggestions *ngIf=\"isSmallScreen\"></app-video-suggestions>\r\n            </div>\r\n            <div class=\"comments-block\">\r\n                <app-video-comments-form *ngIf=\"auth.loggedIn()\" (added)=\"commentAdded($event)\" [videoData]=\"videoData\"\r\n                                         class=\"w-100\"></app-video-comments-form>\r\n                <mat-spinner [diameter]=\"15\"\r\n                             [hidden]=\"!auth.loggedIn() || commentsLoading === 'finished'\"></mat-spinner>\r\n                <app-video-comments-list [videoData]=\"videoData\"\r\n                                         [videoComments]=\"videoComments\"></app-video-comments-list>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"ads-block-right\">\r\n        <app-chat-box *ngIf=\"videoData\" [messages]=\"videoData.messages\"></app-chat-box>\r\n        <app-video-suggestions *ngIf=\"!isSmallScreen\"></app-video-suggestions>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {API_URL, VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {AuthService} from '@core/services/auth.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport IsResponsive from '@core/helpers/is-responsive';\r\nimport {Subscription} from 'rxjs';\r\nimport {LoaderService} from '@core/services/loader.service';\r\nimport {Title} from '@angular/platform-browser';\r\nimport {SocialShareDialogComponent} from '@core/components/modals/social-share-dialog/social-share-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-play-video',\r\n    templateUrl: './play-video.component.html',\r\n    styleUrls: ['./play-video.component.scss']\r\n})\r\nexport class PlayVideoComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    videoData;\r\n    apiUrl = API_URL;\r\n\r\n    authUser;\r\n    userVideoConnection = {liked: 0, disliked: 0, saved: '', viewed: false};\r\n    videoJSPlayerOptions = VIDEOJS_PLAYER_OPTIONS;\r\n\r\n    showTagsForm = false;\r\n    isSmallScreen = IsResponsive.isSmallScreen();\r\n\r\n    commentsRefreshed = false;\r\n    formValue;\r\n    videoComments = [];\r\n    commentsLoading = 'idle';\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private getAuthUser: GetAuthUserPipe,\r\n        public auth: AuthService,\r\n        private toastr: ToastrService,\r\n        private loader: LoaderService,\r\n        private titleService: Title,\r\n        private dialog: MatDialog\r\n    ) {\r\n        this.authUser = this.getAuthUser.transform();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const videoId = this.route.snapshot.queryParams.id;\r\n        const params = {id: videoId};\r\n\r\n        this.subscriptions.push(this.videoService.getVideoById(params).subscribe(dt => {\r\n            this.videoData = dt;\r\n            this.titleService.setTitle(dt.name);\r\n            if (this.auth.loggedIn()) {\r\n                this.userVideoConnection = this.checkUserVideoConnection(dt);\r\n                this.updateViewsCount(dt);\r\n                this.indexUserTags(dt);\r\n                this.getComments();\r\n            }\r\n        }));\r\n\r\n\r\n    }\r\n\r\n\r\n    checkUserVideoConnection(videoData) {\r\n        const userVideoConnection = videoData?.users_vids.find(u => u.id === this.authUser.id);\r\n        if (!userVideoConnection) {\r\n            return this.userVideoConnection;\r\n        } else {\r\n            const liked = userVideoConnection.users_videos?.liked;\r\n            const disliked = userVideoConnection.users_videos?.disliked;\r\n            const saved = userVideoConnection.users_videos.saved ? 'saved' : '';\r\n            const viewed = !!userVideoConnection?.users_videos?.viewed;\r\n            return {liked, disliked, saved, viewed};\r\n        }\r\n    }\r\n\r\n    updateViewsCount(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id};\r\n        if (!this.userVideoConnection.viewed) {\r\n            this.subscriptions.push(this.videoService.updateViews(params).subscribe((d) => {\r\n                this.videoData = d;\r\n            }));\r\n        }\r\n    }\r\n\r\n    updateLikes(videoData, action) {\r\n        if (this.auth.loggedIn()) {\r\n\r\n            videoData = this.getLikesState(action, videoData);\r\n\r\n            this.videoService.updateLikes({\r\n                video_id: videoData.id,\r\n                user_id: this.authUser.id,\r\n                likes: videoData.likes,\r\n                dislikes: videoData.dislikes,\r\n                liked: this.userVideoConnection.liked,\r\n                disliked: this.userVideoConnection.disliked,\r\n                saved: videoData.saved\r\n            }).subscribe(dt => {\r\n\r\n            });\r\n        } else {\r\n            this.toastr.error('Please log in first to take this action');\r\n        }\r\n    }\r\n\r\n    getLikesState(action, videoData) {\r\n        if (action === 'like') {\r\n            this.userVideoConnection.liked = +!this.userVideoConnection.liked;\r\n            if (this.userVideoConnection.disliked) {\r\n                videoData.dislikes += videoData.dislikes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.disliked = 0;\r\n            videoData.likes += this.userVideoConnection.liked ? 1 : -1;\r\n\r\n        } else {\r\n            this.userVideoConnection.disliked = +!this.userVideoConnection.disliked;\r\n            if (this.userVideoConnection.liked) {\r\n                videoData.likes += videoData.likes === 0 ? 0 : -1;\r\n            }\r\n            this.userVideoConnection.liked = 0;\r\n            videoData.dislikes += this.userVideoConnection.disliked ? 1 : -1;\r\n        }\r\n        return videoData;\r\n    }\r\n\r\n    indexUserTags(dt) {\r\n        const params = {user_id: this.authUser.id, video_id: dt.id, tags: this.videoData?.tags};\r\n        this.subscriptions.push(this.videoService.indexUserTags(params).subscribe(d => {\r\n\r\n        }));\r\n    }\r\n\r\n    async openVideoByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    saveVideo(videoData) {\r\n\r\n        this.subscriptions.push(this.videoService.saveVideo({\r\n            video_id: videoData.id,\r\n            user_id: this.authUser.id,\r\n            saved: this.userVideoConnection.saved === 'saved' ? 0 : 1\r\n        }).subscribe(dt => {\r\n            this.userVideoConnection.saved = dt.saved ? 'saved' : '';\r\n        }));\r\n    }\r\n\r\n    saveVideoDetails(e) {\r\n        this.subscriptions.push(this.videoService.saveVideoDetails(e)\r\n            .subscribe(dt => {\r\n                this.videoData = dt;\r\n                this.titleService.setTitle(dt.name);\r\n                this.showTagsForm = false;\r\n            }));\r\n    }\r\n\r\n    getComments() {\r\n        this.commentsLoading = 'loading';\r\n        this.subscriptions.push(this.videoService.getVideoComments({video_id: this.videoData.id}).subscribe(dt => {\r\n            this.videoComments = dt;\r\n            this.commentsLoading = 'finished';\r\n        }));\r\n    }\r\n\r\n    commentAdded(e) {\r\n        this.commentsRefreshed = true;\r\n        this.videoComments = e;\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n    buildSubscribersCountText(videoData) {\r\n        const count = videoData.channel.subscribers_count;\r\n        return count + ' subscriber' + (count === 1 ? '' : 's');\r\n    }\r\n\r\n    openSocialShareModal() {\r\n        this.dialog.open(SocialShareDialogComponent, {\r\n            width: '500px',\r\n            height: '400px',\r\n            data: {shareUrl: window.location.href}\r\n        })\r\n            .afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"videos-list\" *ngIf=\"userVideos\">\r\n    <ng-container *ngIf=\"!search\">\r\n        <div class=\"video-container flex-wrap\" *ngFor=\"let video of userVideos.users_vids\">\r\n            <div class=\"thumbnail\">\r\n                <img [src]=\"video.thumbnail|getImgPath\" (click)=\"openVideoPage(video, userVideos.username)\">\r\n                <span class=\"duration\">{{video.duration}}</span>\r\n            </div>\r\n            <div class=\"details\">\r\n                <h4 class=\"title\">{{video.name}}</h4>\r\n                <div class=\"shortened-details\">\r\n                    <span class=\"channel-name\" [routerLink]=\"'/channels/'+video?.user?.username\">{{video.channel.name}}</span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"watchers-count\">\r\n                        {{video.status === 'live' ? '17k watching' : video.views + ' view' + (video.views === 1 ? '' : 's')}}\r\n                    </span>\r\n                    <span class=\"dot\">&middot;</span>\r\n                    <span class=\"upload-time\">{{video.created_at | dateFromNow}}</span>\r\n                </div>\r\n                <p class=\"shortened-description\">\r\n                   {{video.description}}\r\n                </p>\r\n\r\n                <div class=\"tags\">\r\n                    <ul>\r\n                        <li *ngFor=\"let tag of video?.tags\" (click)=\"getVideosByTag(tag.name)\">\r\n                            <span>{{tag.name}}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {GetAuthUserPipe} from '@shared/pipes/get-auth-user.pipe';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {buildPlayVideoRoute} from '@core/helpers/build-play-video-route';\r\n\r\n@Component({\r\n    selector: 'app-show-saved-videos',\r\n    templateUrl: './show-saved-videos.component.html',\r\n    styleUrls: ['./show-saved-videos.component.scss']\r\n})\r\nexport class ShowSavedVideosComponent implements OnInit {\r\n\r\n    userVideos;\r\n    channelsVideos = [];\r\n    apiUrl = API_URL;\r\n    search;\r\n    authUser;\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        public router: Router,\r\n        private subject: SubjectService,\r\n        private channelsService: ChannelsService,\r\n        private route: ActivatedRoute,\r\n        private getAuthUser: GetAuthUserPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.authUser = this.getAuthUser.transform();\r\n\r\n        this.videoService.getUserSavedVideos({user_id: this.authUser.id}).subscribe(dt => {\r\n            this.userVideos = dt;\r\n        });\r\n    }\r\n\r\n    async openVideoPage(video, username) {\r\n        const r = buildPlayVideoRoute(video, username);\r\n        await this.router.navigate([r.route], {queryParams: r.params});\r\n    }\r\n\r\n    async getVideosByTag(name) {\r\n        await this.router.navigate(['videos'], {queryParams: {tag: name}});\r\n    }\r\n\r\n}\r\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\r\nimport videojs from 'video.js';\r\nimport * as RecordRTC from 'recordrtc';\r\n\r\n@Component({\r\n    selector: 'app-videojs-test',\r\n    templateUrl: './videojs-test.component.html',\r\n    styleUrls: ['./videojs-test.component.scss']\r\n})\r\nexport class VideojsTestComponent implements OnInit, AfterViewInit {\r\n    config = {\r\n        controls: true,\r\n        bigPlayButton: false,\r\n        width: 320,\r\n        height: 240,\r\n        fluid: false,\r\n        plugins: {\r\n            record: {\r\n                audio: true,\r\n                video: true,\r\n                maxLength: 110,\r\n                debug: true\r\n            }\r\n        }\r\n    };\r\n    player;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.player = videojs(document.getElementById('video'), this.config, () => {\r\n            // console.log('player ready! id:', el);\r\n\r\n            // print version information at startup\r\n            const msg = 'Using video.js ' + videojs.VERSION +\r\n                ' with videojs-record ' + videojs.getPluginVersion('record') +\r\n                ' and recordrtc ' + RecordRTC.version;\r\n            videojs.log(msg);\r\n        }, () => {\r\n        });\r\n\r\n        let player = this.player;\r\n\r\n        this.player.on('finishRecord', () => {\r\n            // the blob object contains the recorded data that\r\n            // can be downloaded by the user, stored on server etc.\r\n            console.log('finished recording: ', player.recordedData);\r\n            // player.record().saveAs({'video': 'my-video-file-name.webm'});\r\n        });\r\n\r\n    }\r\n}\r\n","<video id=\"video\" class=\"video-js\" playsinline></video>\r\n","<input id=\"url-input\" placeholder=\"Paste the url here\" (paste)=\"getUrl($event)\" (change)=\"checkUrl($event)\">\n<div *ngIf=\"isValidUrl\" class=\"video-container\">\n    <iframe width=\"560\" height=\"315\" [src]=\"safeUrl\" *ngIf=\"safeUrl && isYoutubeVideo(url)\" title=\"YouTube video player\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen></iframe>\n\n\n</div>\n\n<div class=\"video-container\">\n    <iframe width=\"560\" height=\"500\" [src]=\"safeUrl\" *ngIf=\"safeUrl && !isYoutubeVideo(url)\"\n            title=\"YouTube video player\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen></iframe>\n</div>\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowVideosComponent} from '@app/videos/show-videos/show-videos.component';\r\nimport {PlayVideoComponent} from '@app/videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from '@app/videos/show-saved-videos/show-saved-videos.component';\r\nimport {AuthGuard} from '@core/guards/auth.guard';\r\nimport {VideojsTestComponent} from '@app/videos/videojs-test/videojs-test.component';\r\nimport {AddVideoComponent} from '@app/videos/add-video/add-video.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'add',\r\n        component: AddVideoComponent\r\n    },\r\n    {\r\n        path: 'test',\r\n        component: VideojsTestComponent\r\n    },\r\n    {\r\n        path: '',\r\n        component: ShowVideosComponent,\r\n        pathMatch: 'full',\r\n        data: {\r\n            title: 'Videos',\r\n        }\r\n    },\r\n    {\r\n        path: 'play',\r\n        component: PlayVideoComponent,\r\n        data: {\r\n            title: 'Play Video',\r\n        }\r\n    },\r\n    {\r\n        path: 'saved',\r\n        component: ShowSavedVideosComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n            title: 'Saved Videos',\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class VideosRoutingModule {\r\n}\r\n\r\n","import {Component, OnInit} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-add-video',\n    templateUrl: './add-video.component.html',\n    styleUrls: ['./add-video.component.scss']\n})\nexport class AddVideoComponent implements OnInit {\n    url;\n    safeUrl;\n    isValidUrl = false;\n\n    constructor(\n        private sanitizer: DomSanitizer\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    getUrl(e: ClipboardEvent) {\n        const clipboardData = e.clipboardData;\n        const pastedText = clipboardData.getData('text');\n        this.url = pastedText;\n        this.constructSafeUrl(pastedText);\n        console.log(pastedText);\n\n    }\n\n    checkUrl(e) {\n        let text = e.target.value;\n        this.url = text;\n        console.log(this.isTikTokVideo(text))\n        if (this.isYoutubeVideo(text)) {\n            text = this.transformUrlForYoutube(text);\n            this.constructSafeUrl(text);\n        } else {\n            // this.isValidUrl = false;\n            this.constructSafeUrl(text);\n        }\n    }\n\n    isYoutubeVideo(url) {\n        const p = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\n        if (url.match(p)) {\n            return url.match(p)[1];\n        }\n        return false;\n    }\n\n    isTikTokVideo(url) {\n        // const p = /^(https?:\\/\\/(?:(?:www|m)\\.(?:tiktok.com)\\/(?:v|embed|trending)(?:\\/)?(?:\\?shareId=)?)(?<id>[\\da-z]+))?$/;\n        const p = /https?:\\/\\/(?:(?:www|m)\\.(?:tiktok.com)\\/(?:v|embed|trending)(?:\\/)?(?:\\?shareId=)?)(?<id>[\\da-z]+)/;\n\n        console.log('aaa', url, url.match(p)[1])\n        if (url.match(p)) {\n            return !!url.match(p)[1];\n        }\n        return false;\n    }\n\n    transformUrlForYoutube(url) {\n        const youTubeIdFromLink = (u) => u.match(/(?:https?:\\/\\/)?(?:www\\.|m\\.)?youtu(?:be)?\\.(?:com|be)(?:\\/watch\\/?\\?v=|\\/embed\\/|\\/)([^\\s&\\?\\/\\#]+)/)[1];\n        const youTubeId = youTubeIdFromLink(url);\n        return url.split('&')[0].replace('/watch?v=', '/embed/');\n    }\n\n    constructSafeUrl(text) {\n        if (this.isYoutubeVideo(text)) {\n            this.isValidUrl = true;\n            text = this.transformUrlForYoutube(text);\n        }\n        this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(text);\n    }\n\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {VideosRoutingModule} from './videos-routing.module';\r\nimport {ShowVideosComponent} from './show-videos/show-videos.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\n\r\nimport {PlayVideoComponent} from '../videos/play-video/play-video.component';\r\nimport {ShowSavedVideosComponent} from './show-saved-videos/show-saved-videos.component';\r\nimport {VideoSuggestionsComponent} from './play-video/video-suggestions/video-suggestions.component';\r\nimport { VideoDetailsFormComponent } from './play-video/video-details-form/video-details-form.component';\r\nimport { ShowRegularListComponent } from './show-videos/show-regular-list/show-regular-list.component';\r\nimport { ShowSearchResultsComponent } from './show-videos/show-search-results/show-search-results.component';\r\nimport { ShowPlaylistsListComponent } from './show-videos/show-playlists-list/show-playlists-list.component';\r\nimport { VideoCommentsFormComponent } from './play-video/video-comments-form/video-comments-form.component';\r\nimport { VideoCommentsListComponent } from './play-video/video-comments-list/video-comments-list.component';\r\nimport { CommentActionsComponent } from './play-video/video-comments-list/comment-actions/comment-actions.component';\r\nimport { SingleCommentComponent } from './play-video/video-comments-list/single-comment/single-comment.component';\r\nimport { VideojsTestComponent } from './videojs-test/videojs-test.component';\nimport { AddVideoComponent } from './add-video/add-video.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowVideosComponent,\r\n        PlayVideoComponent,\r\n        ShowSavedVideosComponent,\r\n        VideoSuggestionsComponent,\r\n        VideoDetailsFormComponent,\r\n        ShowRegularListComponent,\r\n        ShowSearchResultsComponent,\r\n        ShowPlaylistsListComponent,\r\n        VideoCommentsFormComponent,\r\n        VideoCommentsListComponent,\r\n        CommentActionsComponent,\r\n        SingleCommentComponent,\r\n        VideojsTestComponent,\r\n        AddVideoComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        VideosRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class VideosModule {\r\n}\r\n"]}