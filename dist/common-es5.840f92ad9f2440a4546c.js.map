{"version":3,"sources":["webpack:///src/app/shared/components/video-filters/video-filters.component.ts","webpack:///src/app/shared/components/video-filters/video-filters.component.html","webpack:///src/app/core/services/playlists.service.ts","webpack:///src/app/core/helpers/pattern-validator.ts","webpack:///src/app/shared/components/video-js-player/video-js-player.component.ts","webpack:///src/app/shared/components/video-js-player/video-js-player.component.html","webpack:///src/app/core/constants/patterns.ts"],"names":["VideoFiltersComponent","videoService","ifObjectEmpty","subjectService","filters","selectedFilters","subscriptions","trackByElement","filterAction","this","push","getToggleFiltersData","subscribe","dt","emit","group","name","value","PlaylistsService","httpClient","params","post","get","put","patternValidator","pattern","control","test","patternInvalid","VideoJsPlayerComponent","cdr","videoInit","options","console","log","videoUrl","video","document","getElementsByTagName","player","duration","parts","videoData","split","s","m","length","parseInt","pop","registerPlugin","watermark","image","position","fadeTime","deregisterPlugin","on","err","error","detectChanges","initPlayer","TEXT_ONLY_PATTERN_WITHOUT_SPECIALS","NUMBER_AFTER_TEXT_PATTERN","NO_SPACE_PATTERN","NUMBERS_ONLY","FOUR_DIGIT_NUMBERS_ONLY","EMAIL_PATTERN","METL_URL_PATTERN"],"mappings":"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","file":"x","sourcesContent":["import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {VIDEO_FILTERS} from '@core/constants/global';\r\nimport {VideoService} from '@core/services/video.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {Subscription} from 'rxjs';\r\nimport {SubjectService} from '@core/services/subject.service';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-video-filters',\r\n    templateUrl: './video-filters.component.html',\r\n    styleUrls: ['./video-filters.component.scss']\r\n})\r\nexport class VideoFiltersComponent implements OnInit {\r\n    filters = VIDEO_FILTERS;\r\n    selectedFilters = {};\r\n    subscriptions: Subscription[] = [];\r\n    trackByElement = trackByElement;\r\n\r\n    @Output('filter') filterAction = new EventEmitter();\r\n\r\n    constructor(\r\n        private videoService: VideoService,\r\n        private ifObjectEmpty: CheckForEmptyObjectPipe,\r\n        private subjectService: SubjectService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscriptions.push(this.subjectService.getToggleFiltersData().subscribe(dt => {\r\n            this.selectedFilters = {};\r\n            this.filterAction.emit(this.selectedFilters);\r\n        }));\r\n    }\r\n\r\n    applyFilter({name, value}, group) {\r\n        this.selectedFilters[group] = {name, value};\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n    removeFilter({name, value}, group) {\r\n        delete this.selectedFilters[group];\r\n        // if (this.ifObjectEmpty.transform(this.selectedFilters)) {\r\n        // this.selectedFilters = {};\r\n        // }\r\n\r\n        this.filterAction.emit(this.selectedFilters);\r\n    }\r\n\r\n}\r\n","<div class=\"filter-groups\">\r\n    <ng-container *ngFor=\"let filter of filters; trackBy:trackByElement\">\r\n\r\n        <div class=\"filter-group\">\r\n            <p class=\"filter-name\">{{filter.group.name}}</p>\r\n            <mat-divider></mat-divider>\r\n            <ul>\r\n                <li class=\"filter-item\" *ngFor=\"let item of filter.items\"\r\n                    [class.selected]=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                    <span (click)=\"applyFilter(item, filter.group.value)\">{{item.name}}</span>\r\n                    <button mat-icon-button class=\"remove-filter\" (click)=\"removeFilter(item, filter.group.value)\"\r\n                            *ngIf=\"selectedFilters && item.name === selectedFilters[filter.group.value]?.name\">\r\n                        <mat-icon>clear</mat-icon>\r\n                    </button>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {API_URL} from '@core/constants/global';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PlaylistsService {\r\n\r\n    constructor(\r\n        private httpClient: HttpClient\r\n    ) {\r\n    }\r\n\r\n    addPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add`, params);\r\n    }\r\n\r\n    addVideosToPlaylist(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-videos`, params);\r\n    }\r\n\r\n    addVideoToOtherPlaylists(params) {\r\n        return this.httpClient.post<any>(`${API_URL}playlists/add-video-to-other-playlists`, params);\r\n    }\r\n\r\n    get(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get`, {params});\r\n    }\r\n\r\n    getById(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/get-by-id`, {params});\r\n    }\r\n\r\n    searchPlaylists(params) {\r\n        return this.httpClient.get<any>(`${API_URL}playlists/search`, {params});\r\n    }\r\n\r\n    updatePrivacy(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-privacy`, params);\r\n    }\r\n\r\n    updateVideoPosition(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-video-position`, params);\r\n    }\r\n\r\n    updatePlaylistInfo(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/update-playlist-info`, params);\r\n    }\r\n\r\n    changePlaylistThumbnail(params) {\r\n        return this.httpClient.put<any>(`${API_URL}playlists/change-thumbnail`, params);\r\n    }\r\n\r\n    removeVideoFromPlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove-video`, {params});\r\n    }\r\n\r\n    removePlaylist(params) {\r\n        return this.httpClient.delete<any>(`${API_URL}playlists/remove`, {params});\r\n    }\r\n}\r\n","import {AbstractControl, ValidatorFn, FormGroup} from '@angular/forms';\r\n\r\nexport function patternValidator(pattern): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } => {\r\n    const value = control.value;\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    return !pattern.test(value) ? {patternInvalid: {pattern}} : null;\r\n  };\r\n}\r\n","import {AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {VIDEOJS_PLAYER_OPTIONS} from '@core/constants/global';\r\nimport videojs from 'video.js';\r\nimport watermark from 'videojs-watermark';\r\n\r\n@Component({\r\n    selector: 'app-video-js-player',\r\n    templateUrl: './video-js-player.component.html',\r\n    styleUrls: ['./video-js-player.component.scss']\r\n})\r\nexport class VideoJsPlayerComponent implements OnInit, AfterViewInit {\r\n    @Input() videoData;\r\n    @Input() videoUrl;\r\n    // videoUrl = 'http://localhost:3001/uploads/videos/Andrea_Corr_Shame_On_You_HD.mp4';\r\n    videoInit = 'idle';\r\n\r\n    options = VIDEOJS_PLAYER_OPTIONS;\r\n    player: videojs.Player;\r\n\r\n    constructor(\r\n        private cdr: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.videoUrl);\r\n    }\r\n\r\n    initPlayer() {\r\n        const video = document.getElementsByTagName('video')[0];\r\n        this.videoInit = 'pending';\r\n        this.player = videojs(video, this.options, () => {\r\n            this.player.duration = () => {\r\n                const parts = this.videoData.duration.split(':');\r\n                let s = 0;\r\n                let m = 1;\r\n\r\n                while (parts.length > 0) {\r\n                    s += m * parseInt(parts.pop(), 10);\r\n                    m *= 60;\r\n                }\r\n                return s;\r\n            };\r\n\r\n            videojs.registerPlugin('watermark', watermark);\r\n            this.player.watermark({\r\n                image: 'assets/img/logo.png',\r\n                position: 'bottom-right',\r\n                fadeTime: null\r\n            });\r\n\r\n            videojs.deregisterPlugin('watermark');\r\n\r\n        });\r\n\r\n        this.player.on('loadedmetadata', () => {\r\n            this.videoInit = 'finished';\r\n        });\r\n\r\n        this.player.on('error', (err) => {\r\n            const error = this.player.error();\r\n            this.videoInit = 'finished';\r\n        });\r\n        this.cdr.detectChanges();\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initPlayer();\r\n    }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"videoUrl\">\r\n    <div class=\"loading-spinner\" *ngIf=\"videoInit==='pending'\">\r\n        <mat-spinner [diameter]=\"15\"></mat-spinner>\r\n        <span style=\"margin-left:10px\">Loading video</span>\r\n    </div>\r\n    <div [hidden]=\"videoInit!=='finished'\">\r\n        <video id=\"player\" class=\"video-js\" controls preload=\"auto\" autoplay data-setup='{}'>\r\n            <source [src]=\"videoUrl\" type = \"video/mpeg\">\r\n            <source [src]=\"videoUrl\" type=\"video/mp4\">\r\n            <source [src]=\"videoUrl\" type = \"video/x-matroska\">\r\n            <p class=\"vjs-no-js\">\r\n                To view this video please enable JavaScript, and consider upgrading to a web browser that\r\n                <a href=\"https://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a>\r\n            </p>\r\n        </video>\r\n    </div>\r\n</div>\r\n","export const TEXT_ONLY_PATTERN_WITHOUT_SPECIALS = /^[^`~!@#$%^&*()_+={}\\[\\]|\\\\:;“’<,>.?๐฿0-9]*$/;\r\nexport const NUMBER_AFTER_TEXT_PATTERN = /^[a-zA-Z ]/;\r\nexport const NO_SPACE_PATTERN = /^\\S*$/;\r\nexport const NUMBERS_ONLY = /^[0-9]*$/;\r\nexport const FOUR_DIGIT_NUMBERS_ONLY = /^[0-9]{4}$/;\r\nexport const TEXT_ONLY_WITH_SPECIALS_PATTERN = /^[a-zA-Z -/]*$/;\r\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nexport const METL_URL_PATTERN = /(http|https):\\/\\/metl.tv(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\nexport const URL_PATTERN = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\n"]}