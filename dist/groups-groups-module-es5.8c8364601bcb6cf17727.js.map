{"version":3,"sources":["webpack:///src/app/core/components/modals/create-new-group-dialog/invite-chanel/invite-channel.component.ts","webpack:///src/app/core/components/modals/create-new-group-dialog/invite-chanel/invite-channel.component.html","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.html","webpack:///src/app/core/components/modals/create-new-group-dialog/create-new-group-dialog.component.ts","webpack:///src/app/shared/directives/fix-group-page-url.directive.ts","webpack:///src/app/groups/show-groups/group-item/group-item.component.html","webpack:///src/app/groups/show-groups/group-item/group-item.component.ts","webpack:///src/app/shared/components/loading/loading.component.ts","webpack:///src/app/shared/components/loading/loading.component.html","webpack:///src/app/groups/show-groups/show-groups.component.html","webpack:///src/app/groups/show-groups/show-groups.component.ts","webpack:///src/app/shared/directives/disable-control-properly.directive.ts","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.html","webpack:///src/app/core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component.ts","webpack:///src/app/groups/single-group/single-group.component.html","webpack:///src/app/groups/single-group/single-group.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component.ts","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.html","webpack:///src/app/groups/single-group/people-tab/admins-list/admins-list.component.ts","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.html","webpack:///src/app/groups/single-group/people-tab/group-members-list/group-members-list.component.ts","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.html","webpack:///src/app/groups/single-group/people-tab/member-requests-list/member-requests-list.component.ts","webpack:///src/app/groups/single-group/people-tab/people-tab.component.html","webpack:///src/app/groups/single-group/people-tab/people-tab.component.ts","webpack:///src/app/groups/single-group/media-tab/media-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.ts","webpack:///src/app/groups/single-group/about-tab/about-tab.component.html","webpack:///src/app/groups/single-group/media-tab/media-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.html","webpack:///src/app/groups/single-group/posts-tab/posts-tab.component.ts","webpack:///src/app/groups/single-group/edit-group/edit-group.component.html","webpack:///src/app/groups/single-group/edit-group/edit-group.component.ts","webpack:///src/app/groups/groups-routing.module.ts","webpack:///src/app/groups/groups.module.ts"],"names":["InviteChannelComponent","_channelsService","_userInfoService","_unsubscribe$","Subject","_usersInviteData","this","_getAuthInfo","getSubscriptionUser","getUserChannelSubscriptions","user_id","authUser","id","pipe","takeUntil","subscribe","data","usersConnection","console","log","_userInfo","userData","includes","push","CreateNewGroupDialogComponent","FixGroupPageUrlDirective","fb","_dialog","dialog","groupsService","socketService","groupsStore","uploadFile","lowerCaseRemoveSpaces","dontWord","words","addDescriptionSectionShow","step","coverShowImg","avatarShowImg","discardORSave","subscriptions","_initForm","groupForm","group","name","required","custom_name","privacy","description","creator_id","username","event","shape","open","maxWidth","maxHeight","height","width","title","file","target","files","afterClosed","dt","imageCoverFile","blob","reader","FileReader","onload","e","coverImgSrc","result","toString","readAsDataURL","imageAvatarFile","avatarImgSrc","avatar","cover","fdCover","FormData","append","_imgCoverSuccess","path","fdAvatar","_imgAvatarSuccess","_wordCount","text","nativeElement","value","split","length","patchValue","transform","valid","formValue","addGroup","close","closeDialog","submitForm","router","url","navigate","LoadingComponent","GroupItemComponent","replace","ShowGroupsComponent","DisableControlProperlyDirective","_groupsService","chatService","userStore","_fb","groups","searchKeyValue","isPrivate","dataSource$","groupsState$","state$","trackGroups","_formBuilder","_getGroupList","filterGroup","get","searchKey","radioButton","checkboxButton","checked","eventTarget","filterData","group_type","getGroupList","search","onlyMy","groups$","type","filter","g","selectedGroup","navigateByUrl","next","complete","openModal","myGroupFilter","handleChange","_filterSearchKey","control","condition","GroupMembersInvitationDialogComponent","usersMessagesStore","usersService","getArraysDifference","userContacts","selectedContacts","initForm","contactsInviteForm","contacts","array","getContactsFormGroup","formArray","usersMessages","map","c","index","foundInSelected","find","sc","foundInGroup","group_members","m","connectionWithGroup","connectionContainer","groups_members","confirmed","accepted","status","foundControl","contactCtrls","controls","addGroupMembers","group_id","member_ids","inviteToNewPageGroup","invited_members","from_user","msg","first_name","last_name","changeGroup","indexOf","forEach","s","unsubscribe","sendInvitationsToContacts","SingleGroupComponent","route","isEmptyObj","loading","isOwnGroup","groupTabs","groupPrivacy","userGroupConnStatus","trackSelectedGroup","getSelectedGroup","getAcceptedJoinPageGroup","getConfirmedJoinGroup","getIgnoredJoinGroup","getJoinGroup","getRemovedSavedMember","getLeftGroup","selectedGroup$","getUserGroupConnStatus","params","passedGroupName","_getGroupById","getGroupFromServer","getGroupById","selectGroup","joinGroup","link","rest","leaveGroup","member_id","setGroups","leavePageGroup","leavePageGroupNotify","member","leftGroups","removeFromPageGroupNotify","component","GroupMembersActionsMenuComponent","notificationsStore","adminRequestSent","moderatorRequestSent","sendMakeAdminRequest","removeGroupMember","removeFromPageGroup","removeAdminPrivileges","removePageGroupAdminPrivileges","is_admin","is_moderator","removeMember","AdminsListComponent","admin","user","connection","admins","a","isGroupCreator","authUserGroupConnection","getUserGroupConnection","GroupMembersListComponent","getAcceptedPageGroupAdminRequest","getDeclinedPageGroupAdminRequest","notification","updateNotifications","MemberRequestsListComponent","confirmGroupJoin","d","confirmJoinGroup","ignoreGroupJoin","ignoreJoinGroup","MediaTabComponent","AboutTabComponent","PeopleTabComponent","members","requestedMembers","getRemovedPageGroupAdminPrivileges","filterMembers","PostsTabComponent","postsService","trackByElement","getGroupPosts","groupPosts$","EditGroupComponent","GroupsRoutingModule","GroupsModule","routes","_route","_patchInitialValueForm","editGroupForm","nameGroup","_groupId","Boolean","invalid","UPDATE_FORM_DATA_GROUP","updateGroup","createImage","addDescriptionHideShow","updateGGroupInfo","children","forChild"],"mappings":"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","file":"x","sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ChanelInterface, CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {ChannelsService} from '@core/services/channels.service';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-invite-channel',\r\n    templateUrl: './invite-channel.component.html',\r\n    styleUrls: ['invite-channel.component.scss']\r\n})\r\n\r\nexport class InviteChannelComponent implements OnInit, OnDestroy {\r\n    private usersConnection: any;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private authUser: CurrentUserData;\r\n    private _usersInviteData = [];\r\n    public channelSubscriptionMembers: ChanelInterface[];\r\n\r\n\r\n    constructor(\r\n        private _channelsService: ChannelsService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getSubscriptionUser();\r\n    }\r\n\r\n    private getSubscriptionUser() {\r\n        this._channelsService.getUserChannelSubscriptions({user_id: this.authUser.id})\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe((data: any) => {\r\n                this.usersConnection = data;\r\n                console.log(this.usersConnection);\r\n            });\r\n    }\r\n\r\n    private _getAuthInfo(): void {\r\n        this._userInfoService._userInfo\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe((data) => {\r\n                this.authUser = data;\r\n            });\r\n    }\r\n\r\n    public inviteUserInGroup(userData: any): void {\r\n        if (this._usersInviteData === [] || !this._usersInviteData.includes(userData)) {\r\n            this._usersInviteData.push(userData);\r\n            console.log('Concat Data ', this._usersInviteData);\r\n        } else {\r\n            console.log('Concat Data ', this._usersInviteData);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n}\r\n","<div class=\"invite-channel-members-wrapper\">\r\n    <mat-icon class=\"mat-icon-close\">\r\n        close\r\n    </mat-icon>\r\n    <div class=\"invite-channel-members-section-filter\">\r\n        <input type=\"text\" placeholder=\"Search\">\r\n        <mat-icon>\r\n            search\r\n        </mat-icon>\r\n    </div>\r\n    <div class=\"top-members-section\">\r\n        <div class=\"top-members-section-title\">\r\n            <h4>Top communities / channel or your Friends</h4>\r\n        </div>\r\n        <div class=\"members-block\">\r\n<!--            <div class=\"member\" *ngFor=\"let user of usersConnection\">-->\r\n<!--                <div class=\"images-members\">-->\r\n<!--                    <img [src]=\"user.avatar  | getImgPath:'images'\" alt=\"\">-->\r\n<!--                    <span class=\"member-name\">{{user.name}} </span>-->\r\n<!--                </div>-->\r\n<!--                <button class=\"invite-btn\" (click)=\"inviteUserInGroup(user)\">-->\r\n<!--                    <mat-icon>-->\r\n<!--                        {{'add'}}-->\r\n<!--                    </mat-icon>-->\r\n<!--                    <span>-->\r\n<!--                        Invite-->\r\n<!--                    </span>-->\r\n<!--                </button>-->\r\n<!--            </div>-->\r\n        </div>\r\n    </div>\r\n    <!--    <div class=\"other-channel-section\">-->\r\n    <!--        <div class=\"other-members-section-title\">-->\r\n    <!--            <h4>Other-channel</h4>-->\r\n    <!--        </div>-->\r\n    <!--        <div class=\"members-block\">-->\r\n    <!--            <div class=\"member\">-->\r\n    <!--                <div class=\"images-members\">-->\r\n    <!--                    <img src=\"assets/img/chatUser1.png\" alt=\"\">-->\r\n    <!--                    <span class=\"member-name\">Name Surname</span>-->\r\n    <!--                </div>-->\r\n    <!--                <button class=\"invite-btn\">-->\r\n    <!--                    <mat-icon>-->\r\n    <!--                        {{'add'}}-->\r\n    <!--                    </mat-icon>-->\r\n    <!--                    <span>-->\r\n    <!--                        Invite-->\r\n    <!--                    </span>-->\r\n    <!--                </button>-->\r\n    <!--            </div>-->\r\n    <!--        </div>-->\r\n    <!--    </div>-->\r\n    <div class=\"invite-btn\">\r\n        <button>Ok</button>\r\n    </div>\r\n</div>\r\n","<div class=\"dialog-container\">\r\n    <div class=\"close-btn-wrap\">\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n    <div class=\"dialog-header\">\r\n        <h3>Create a new group</h3>\r\n    </div>\r\n    <!--    <div id=\"admin-info\">-->\r\n    <!--        <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">-->\r\n    <!--        <strong>{{authUser.first_name + ' ' + authUser.last_name}}</strong>-->\r\n    <!--    </div>-->\r\n    <form [formGroup]=\"groupForm\">\r\n        <div class=\"step\" *ngIf=\"step === 1\">\r\n            <div class=\"field-row\">\r\n                <input\r\n                    id=\"group-name-input\"\r\n                    formControlName=\"name\"\r\n                    placeholder=\"Group name\">\r\n            </div>\r\n            <div class=\"add-description-action\" (click)=\"addDescriptionHideShow()\">\r\n                <mat-icon [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    {{!addDescriptionSectionShow ? 'add' : 'close'}}\r\n                </mat-icon>\r\n                <span [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    ADD DESCRIPTION\r\n                </span>\r\n            </div>\r\n            <div class=\"field-row\" *ngIf=\"addDescriptionSectionShow\">\r\n\r\n                <textarea\r\n                    #text\r\n                    (keydown)=\"_validatorDescription()\"\r\n                    formControlName=\"description\"\r\n                    placeholder=\"Type Text here...\"\r\n                    class=\"form-group-textarea\"></textarea>\r\n            </div>\r\n            <div class=\"border\"></div>\r\n            <div class=\"field-row\">\r\n                <label>Please choose Mode of Group</label>\r\n                <mat-radio-group\r\n                    aria-label=\"Select an option\"\r\n                    formControlName=\"privacy\">\r\n\r\n                    <mat-radio-button [value]=\"0\"\r\n                                      name=\"privacy\"\r\n                    >Public\r\n                    </mat-radio-button>\r\n                    <mat-radio-button [value]=\"1\"\r\n                                      name=\"privacy\"\r\n                    >Private\r\n                    </mat-radio-button>\r\n                </mat-radio-group>\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"add-cover-avatar\" *ngIf=\"step === 2\">\r\n            <div class=\"add-cover-avatar-title\">\r\n                <h2>Please choose cover images for your group</h2>\r\n            </div>\r\n            <div class=\"images-box\">\r\n                <div class=\"images-cover\">\r\n                    <img class=\"images-cover-create\" *ngIf=\"!coverShowImg\" [src]=\"coverImg|getImgPath:'images'\" alt=\"\">\r\n                    <img class=\"images-cover-create\" *ngIf=\"coverShowImg\" [src]=\"coverImgSrc\" alt=\"\">\r\n                    <input type=\"file\" #coverChangeImg hidden (change)=\"createImage($event, 'square')\">\r\n                    <button (click)=\"coverChangeImg.click()\" class=\"position-btn\">\r\n                        <mat-icon>\r\n                            create\r\n                        </mat-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"images-avatar\">\r\n                    <img *ngIf=\"avatarImgSrc\" [src]=\"avatarImgSrc\" alt=\"\">\r\n                    <mat-icon *ngIf=\"!avatarImgSrc\">add_a_photo</mat-icon>\r\n                    <input type=\"file\" #avatarChangeImg hidden (change)=\"createImage($event, 'circle')\">\r\n                    <button (click)=\"avatarChangeImg.click()\" class=\"position-btn\">\r\n                        <mat-icon>\r\n                            create\r\n                        </mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div class=\"images-save-btn-box\" *ngIf=\"(avatarImgSrc && discardORSave) || (coverImgSrc && discardORSave)\">\r\n                <button class=\"save-btn\" (click)=\"saveAvatarImage(avatarImgSrc,coverImgSrc)\">Save</button>\r\n                <button class=\"discard-btn\" (click)=\"remuveAvatarImage('','')\">DISCARD</button>\r\n            </div>\r\n<!--            <div class=\"invite-group\" [ngClass]=\"{'m-60':!avatarImgSrc}\">-->\r\n<!--                <div class=\"invite-group-section-title\">-->\r\n<!--                    <h3 style=\"font-size: 14px;\">Please invite members for your group</h3>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"images-members_and-invite-members-action\">-->\r\n<!--                    <div class=\"images-members\">-->\r\n<!--                        <div class=\"images-members-img\">-->\r\n<!--                            <img src=\"assets/img/chatUser1.png\" alt=\"\">-->\r\n<!--                            <mat-icon>-->\r\n<!--                                add-->\r\n<!--                            </mat-icon>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                    <div class=\"invite-members-action\">-->\r\n<!--                        <button class=\"invite-members-btn\" (click)=\"inviteChanelMembersDialog()\">-->\r\n<!--                            <mat-icon>-->\r\n<!--                                plus-->\r\n<!--                            </mat-icon>-->\r\n<!--                            <span>-->\r\n<!--                                Invite-->\r\n<!--                            </span>-->\r\n<!--                        </button>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n        </div>\r\n        <div class=\"button-wrap\">\r\n            <button class=\"back\" (click)=\"backStep()\" *ngIf=\"step === 2\">Back</button>\r\n            <button class=\"submit\" (click)=\"submitForm()\">Create</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {ImgEditCropperComponent} from '@core/components/modals/img-edit-cropper/img-edit-cropper.component';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {InviteChannelComponent} from '@core/components/modals/create-new-group-dialog/invite-chanel';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-create-new-group-dialog',\r\n    templateUrl: './create-new-group-dialog.component.html',\r\n    styleUrls: ['./create-new-group-dialog.component.scss']\r\n})\r\nexport class CreateNewGroupDialogComponent implements OnInit {\r\n    @ViewChild('text') text: ElementRef;\r\n    private dontWord = ['a', 'the', 'an', ''];\r\n    private _wordCount: any;\r\n    public words = 0;\r\n    public groupForm: FormGroup;\r\n    public addDescriptionSectionShow = false;\r\n    public step = 1;\r\n    public coverShowImg = false;\r\n    public avatarShowImg = false;\r\n    public discardORSave = false;\r\n    private word: string [];\r\n    public coverImgSrc;\r\n    public avatarImgSrc;\r\n    private imageCoverFile;\r\n    private imageAvatarFile;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private _imgCoverSuccess;\r\n    private _imgAvatarSuccess;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private fb: FormBuilder,\r\n        private _dialog: MatDialog,\r\n        private _userInfoService: UserInfoService,\r\n        private dialog: MatDialogRef<CreateNewGroupDialogComponent>,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService,\r\n        private groupsStore: GroupsStoreService,\r\n        private uploadFile: VideoService,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n        // console.log(this.authUser,\"HRach\");\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-types\r\n    get coverImg(): Boolean {\r\n        return false;\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-types\r\n    get profileImg(): Boolean {\r\n        return false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._initForm();\r\n    }\r\n\r\n    private _initForm() {\r\n        this.groupForm = this.fb.group({\r\n            name: ['', Validators.required],\r\n            custom_name: ['', Validators.required],\r\n            privacy: [0, Validators.required],\r\n            description: ['', Validators.required],\r\n            creator_id: this.authUser.id,\r\n            username: this.authUser.username\r\n        });\r\n    }\r\n\r\n    public addDescriptionHideShow(): void {\r\n        this.addDescriptionSectionShow = !this.addDescriptionSectionShow;\r\n    }\r\n\r\n    public backStep(): void {\r\n        this.step = 1;\r\n    }\r\n\r\n    public createImage(event, shape) {\r\n        const file = event.target.files[0];\r\n        this._dialog.open(ImgEditCropperComponent, {\r\n            maxWidth: '60vw',\r\n            maxHeight: '70vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {\r\n                title: 'Profile Image Cropper',\r\n                shape,\r\n                file\r\n            }\r\n        }).afterClosed()\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    if (dt.shape === 'square') {\r\n                        this.imageCoverFile = dt.blob;\r\n                        this.coverShowImg = true;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.coverImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageCoverFile);\r\n                    }\r\n                    if (dt.shape === 'circle') {\r\n                        this.imageAvatarFile = dt.blob;\r\n                        this.avatarShowImg = true;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.avatarImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageAvatarFile);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    public inviteChanelMembersDialog() {\r\n        this._dialog.open(InviteChannelComponent, {\r\n            height: '600px',\r\n            width: '400px',\r\n            // data: {\r\n            //     title: 'Profile Image Cropper',\r\n            //     shape,\r\n            //     file\r\n            // }\r\n        });\r\n    }\r\n\r\n    public saveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n        if (this.coverShowImg) {\r\n            const fdCover = new FormData();\r\n            fdCover.append('image', this.imageCoverFile);\r\n            fdCover.append('belonging', 'group_cover_img');\r\n            fdCover.append('duration', '');\r\n            this.uploadFile.uploadFile(fdCover, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgCoverSuccess = data.path;\r\n                console.log(this._imgCoverSuccess);\r\n            });\r\n        }\r\n        if (this.avatarShowImg) {\r\n            const fdAvatar = new FormData();\r\n            fdAvatar.append('image', this.imageAvatarFile);\r\n            fdAvatar.append('belonging', 'group_avatar_img');\r\n            fdAvatar.append('duration', '');\r\n            this.uploadFile.uploadFile(fdAvatar, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgAvatarSuccess = data.path;\r\n                console.log(this._imgAvatarSuccess);\r\n            });\r\n        }\r\n    }\r\n\r\n    public remuveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n    }\r\n\r\n    public _validatorDescription() {\r\n        this._wordCount = this.text ? this.text.nativeElement.value.split(/\\s+/) : 0;\r\n\r\n        switch (this._wordCount) {\r\n            case this._wordCount.includes('a'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            case this._wordCount.includes('the'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            case this._wordCount.includes('an'):\r\n                this.words = this._wordCount ? this._wordCount.length - 1 : 0;\r\n                break;\r\n            default:\r\n                this.words = this._wordCount ? this._wordCount.length : 0;\r\n            // code block\r\n        }\r\n\r\n        console.log(this.words);\r\n        this.words = 0;\r\n    }\r\n\r\n    public submitForm(): void {\r\n        this.step++;\r\n        this.groupForm.patchValue({custom_name: this.lowerCaseRemoveSpaces.transform(this.groupForm.value.name)});\r\n        if (this.groupForm.valid && this.step === 3) {\r\n            console.log(this._imgAvatarSuccess, this._imgCoverSuccess, 'Images');\r\n            const formValue = {\r\n                ...this.groupForm.value,\r\n                avatar: this._imgAvatarSuccess,\r\n                cover: this._imgCoverSuccess,\r\n            };\r\n            this.groupsService.addGroup(formValue);\r\n        // .subscribe(async (dt) => {\r\n        //         console.log(dt,\"hrach\");\r\n        //         const selectedGroup = dt.find(d => formValue.name === d.name);\r\n        //         this.groupsStore.setGroups(dt);\r\n        //         this.groupsStore.selectGroup(selectedGroup);\r\n        //         this.socketService.setNewPageGroup(formValue);\r\n        //\r\n        //\r\n        //     });\r\n            this.dialog.close(this.groupForm.value);\r\n            this.step = 1;\r\n        }\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close(null);\r\n    }\r\n\r\n}\r\n","import {Directive, HostListener, Input} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {Router} from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[appNavigateToFixedGroupUrl]'\r\n})\r\nexport class FixGroupPageUrlDirective {\r\n\r\n    @Input() name;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private router: Router\r\n    ) {\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    async onClick() {\r\n        const url = '/groups/' + this.name + '/people';\r\n        await this.router.navigate([this.lowerCaseRemoveSpaces.transform(url)]);\r\n    }\r\n\r\n}\r\n","<!-- Group list item start-->\r\n<div appNavigateToFixedGroupUrl [name]=\"group.id\" class=\"groupMessageDiv\">\r\n    <!-- Group list item avatar start-->\r\n    <div class=\"img-wrap\">\r\n        <img class=\"groupMessageImg\" *ngIf=\"!group.avatar\" [src]=\"group.avatar|getImgPath:'group_avatars'\">\r\n        <img class=\"groupMessageImg\" *ngIf=\"group.avatar\" [src]=\"group.avatar|getImgPath:'images'\">\r\n    </div>\r\n    <!-- Group list item avatar end-->\r\n\r\n    <!-- Group list item name start-->\r\n    <div class=\"group-name-wrap\">\r\n\r\n        <!-- Group name start-->\r\n        <strong>{{group.name}}</strong>\r\n        <!-- Group name end-->\r\n\r\n        <!-- Group privacy start-->\r\n        <mat-icon *ngIf=\"group.privacy === 1\">enhanced_encryption</mat-icon>\r\n        <!-- Group privacy end-->\r\n    </div>\r\n    <!-- Group list item name end-->\r\n</div>\r\n<!-- Group list item end-->\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\n\r\n@Component({\r\n    selector: 'app-group-item',\r\n    templateUrl: './group-item.component.html',\r\n    styleUrls: ['./group-item.component.scss']\r\n})\r\nexport class GroupItemComponent implements OnInit {\r\n    @Input() group;\r\n\r\n    constructor(\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getUrl() {\r\n        const url = '/groups/' + this.group.id.replace(' /g', '_') + '/about';\r\n        return this.lowerCaseRemoveSpaces.transform(url);\r\n    }\r\n\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-loading',\r\n    templateUrl: 'loading.component.html',\r\n    styleUrls: ['loading.component.scss']\r\n})\r\n\r\nexport class LoadingComponent {\r\n\r\n}\r\n","<figure>\r\n    <div></div><div></div>\r\n    <div></div><div></div>\r\n    <div></div><div></div>\r\n    <div></div><div></div>\r\n</figure>\r\n","<!--create group button start-->\r\n<div class=\"row\">\r\n    <button id=\"create-group-btn\" (click)=\"openModal()\">Create new group</button>\r\n</div>\r\n<!--create group button end-->\r\n<form [formGroup]=\"filterGroup\">\r\n    <!--radio button filter start-->\r\n    <div class=\"filter-groups-section\">\r\n\r\n        <div class=\"filter-groups-section-radio_button\">\r\n            <!--   Filter Radio  value  all start-->\r\n            <input\r\n                type=\"radio\"\r\n\r\n                formControlName=\"radioButton\"\r\n                (change)=\"myGroupFilter($event.target)\"\r\n                value=\"\"\r\n                id=\"all\">\r\n            <label for=\"all\">All</label>\r\n            <!--   Filter Radio  value  all start-->\r\n\r\n            <!--   Filter Radio  value  my_group start-->\r\n            <input\r\n                type=\"radio\"\r\n                (change)=\"myGroupFilter($event.target)\"\r\n                value=\"true\"\r\n\r\n                formControlName=\"radioButton\"\r\n                id=\"my_group\">\r\n            <label for=\"my_group\">My groups</label>\r\n            <!--   Filter Radio  value  my_group start-->\r\n\r\n            <!--   Filter checkbox  value  privat_group start-->\r\n            <input\r\n                type=\"checkbox\"\r\n                formControlName=\"checkboxButton\"\r\n                (change)=\"handleChange($event.target)\"\r\n                value=\"false\"\r\n                id=\"privat_groups\">\r\n            <label for=\"privat_groups\">{{!isPrivate ? 'Public' : 'Private'}} groups</label>\r\n            <!--   Filter checkbox  value  privat_group start-->\r\n        </div>\r\n\r\n\r\n    </div>\r\n    <!--radio button filter end-->\r\n\r\n    <!--Search filter start-->\r\n    <div class=\"filter-groups-section_search\">\r\n        <input type=\"text\"\r\n               placeholder=\"Search\"\r\n               (keyup)=\"_filterSearchKey($event.target)\"\r\n               formControlName=\"searchKey\">\r\n        <mat-icon>\r\n            search\r\n        </mat-icon>\r\n    </div>\r\n    <!--Search filter end-->\r\n</form>\r\n<!--Group List start-->\r\n<ng-container *ngIf=\"( dataSource$ | async) as state\">\r\n    <ul class=\"ulBorderBottom\" *ngIf=\"state.groups.length && !state.loading\">\r\n\r\n        <li class=\"group-item-wrap\" *ngFor=\"let group of state.groups\">\r\n            <app-group-item [group]=\"group\"></app-group-item>\r\n        </li>\r\n\r\n    </ul>\r\n    <div class=\"no_result\" *ngIf=\"state.groups.length == 0 && !state.loading\">\r\n        <div class=\"no_result-img\">\r\n            <img src=\"assets/img/Error-amico.svg\" alt=\"amico\">\r\n        </div>\r\n        <div class=\"no_result-title\">\r\n            <h2>No Result Found</h2>\r\n        </div>\r\n        <div class=\"no_result-desc\">\r\n            <span>\r\n                We can`t find any item matching\r\n            </span>\r\n            <span>\r\n                your search\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"( state.loading)\" style=\"height: 400px;position: relative;\">\r\n        <app-loading></app-loading>\r\n    </div>\r\n</ng-container>\r\n<!--Group List end-->\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {UserStoreService} from '@core/services/stores/user-store.service';\nimport {Observable, Subject} from 'rxjs';\nimport {CreateNewGroupDialogComponent} from '@core/components/modals/create-new-group-dialog/create-new-group-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ChatService} from '@core/services/chat.service';\nimport {SocketIoService} from '@core/services/socket-io.service';\nimport {Router} from '@angular/router';\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\nimport {CurrentUserData} from '@core/interfaces';\nimport {UserInfoService} from '@core/services/user-info.service';\nimport {takeUntil} from 'rxjs/operators';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {GroupsService} from '@core/services/groups.service';\nimport {GroupInitialStateInterface} from '@core/interfaces/group.interface';\n\n@Component({\n    selector: 'app-show-groups',\n    templateUrl: './show-groups.component.html',\n    styleUrls: ['./show-groups.component.scss']\n})\nexport class ShowGroupsComponent implements OnInit, OnDestroy {\n    public filterGroup: FormGroup | undefined;\n    public dataSource$: Observable<GroupInitialStateInterface>;\n    public authUser: CurrentUserData;\n    private _unsubscribe$ = new Subject<void>();\n    private groups = [];\n    private searchKeyValue = '';\n    public isPrivate = false;\n\n    constructor(\n        public groupsStore: GroupsStoreService,\n        private _groupsService: GroupsService,\n        private chatService: ChatService,\n        private userStore: UserStoreService,\n        private socketService: SocketIoService,\n        public router: Router,\n        private dialog: MatDialog,\n        private _fb: FormBuilder,\n        private _userInfoService: UserInfoService,\n    ) {\n        this._getAuthInfo();\n        this.dataSource$ = this._groupsService.groupsState$.state$;\n    }\n\n    ngOnInit(): void {\n        this.trackGroups();\n        this._formBuilder();\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    private _formBuilder(): void {\n        this.filterGroup = this._fb.group({\n            searchKey: [''],\n            radioButton: [''],\n            checkboxButton: [false],\n        });\n    }\n\n    public handleChange(e): void {\n        this.isPrivate = e.checked;\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    public myGroupFilter(e): void {\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    public _filterSearchKey(eventTarget): any {\n        this.searchKeyValue = eventTarget.value;\n        this._getGroupList(this.searchKeyValue, this.filterGroup.get('radioButton').value, this.isPrivate);\n    }\n\n    private _getGroupList(filterData, group_type, isPrivate): any {\n        const params = {\n            search: filterData,\n            onlyMy: group_type,\n            isPrivate: isPrivate ? 1 : 0\n        };\n        this._groupsService.getGroupList(params);\n    }\n\n    private trackGroups() {\n        this.groupsStore.groups$\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe(dt => {\n                this.groups = dt;\n            });\n    }\n\n    private _getAuthInfo() {\n        this._userInfoService._userInfo\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe((data) => {\n                this.authUser = data;\n            });\n    }\n\n    public filterGroups(type) {\n        return this.groups.filter(g => {\n            return type === 'managed' ?\n                g.creator_id === this.authUser?.id :\n                g.creator_id !== this.authUser?.id;\n        });\n    }\n\n    public openModal() {\n        this.dialog.open(CreateNewGroupDialogComponent, {\n            width: '700px',\n            height: 'auto',\n            data: this.authUser\n        }).afterClosed()\n            .pipe(\n                takeUntil(this._unsubscribe$),\n            )\n            .subscribe(async (selectedGroup) => {\n                console.log(selectedGroup,\"HRach\");\n                if (selectedGroup) {\n                    await this.router.navigateByUrl('/groups');\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._unsubscribe$.next();\n        this._unsubscribe$.complete();\n    }\n}\n","import {Directive, Injector, Input, Self} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[disableControl]'\r\n})\r\nexport class DisableControlProperlyDirective {\r\n\r\n    @Input() set disableControl({condition, control}) {\r\n        const action = condition ? 'disable' : 'enable';\r\n        control?.[action]();\r\n    }\r\n\r\n\r\n}\r\n","<div id=\"dialog-header\">\r\n    <h3>Invite contacts to this group</h3>\r\n    <div>\r\n        <img src=\"assets/img/x.svg\" alt=\"close-dialog\" class=\"close-box\" (click)=\"closeDialog()\">\r\n    </div>\r\n</div>\r\n<form [formGroup]=\"contactsInviteForm\">\r\n    <div id=\"group-members-wrap\">\r\n        <div id=\"suggested-contacts\">\r\n            <div id=\"contact-search-wrap\">\r\n                <input placeholder=\"Find a contact\">\r\n                <i class=\"fas fa-search\"></i>\r\n            </div>\r\n\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of contactCtrls.controls;let i = index\" [formGroupName]=\"i\"\r\n                    [class.processed-contact]=\"isProcessedContact(control.value.status)\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"'contact_'+control.value.i\">\r\n                            <div class=\"avatar-wrap\">\r\n                                <img class=\"avatar\"\r\n                                     [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"contact-full-name\">{{control.value.first_name + ' ' + control.value.last_name}}</p>\r\n                                <p class=\"contact-status\"\r\n                                   *ngIf=\"control.value.status !== 'not joined'\">{{control.value.status}}</p>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <label>\r\n                            <input type=\"hidden\" formControlName=\"id\">\r\n                            <input type=\"hidden\" formControlName=\"name\">\r\n                            <input type=\"checkbox\" formControlName=\"checked\"\r\n                                   [id]=\"'contact_'+control.value.id\"\r\n                                   (change)=\"selectContact($event,control)\"\r\n                                   [disableControl]=\"{condition:isProcessedContact(control.value.status ),control: getCheckBoxControl(control)}\"\r\n                            >\r\n                            <span></span>\r\n                        </label>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div id=\"selected-contacts\">\r\n            <p id=\"selected-contacts-count\" *ngIf=\"selectedContacts.length as length\">\r\n                {{length + ' ' + (length === 1 ? 'contact' : 'contacts')}}  selected\r\n            </p>\r\n            <ul formArrayName=\"contacts\">\r\n                <li *ngFor=\"let control of checkedContactCtrls;let i = index\" [formGroupName]=\"i\">\r\n                    <div class=\"details\">\r\n                        <label [for]=\"control.value.id+'_'+i\">\r\n                            <img class=\"avatar\" [src]=\"control.value.avatar|getImgPath: 'images'\">\r\n                            <span>{{control.value.first_name + ' ' + control.value.last_name}}</span>\r\n                        </label>\r\n                    </div>\r\n                    <div class=\"state\">\r\n                        <button id=\"remove-from-selected-contacts-btn\">\r\n                            <i class=\"fas fa-times\" (click)=\"removeContactFromSelected(control)\"></i>\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div id=\"dialog-actions\">\r\n    <button id=\"close-dialog\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button id=\"send-invites\" (click)=\"sendInvitationsToContacts()\">Send invites</button>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {User} from '@shared/models/user';\r\nimport {Subscription} from 'rxjs';\r\nimport {UsersService} from '@core/services/users.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GetTwoArrayOfObjectsDifferencePipe} from '@shared/pipes/get-two-array-of-objects-difference.pipe';\r\nimport {UsersMessagesSubjectService} from '@core/services/stores/users-messages-subject.service';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-invitation-dialog',\r\n    templateUrl: './group-members-invitation-dialog.component.html',\r\n    styleUrls: ['./group-members-invitation-dialog.component.scss']\r\n})\r\nexport class GroupMembersInvitationDialogComponent implements OnInit, OnDestroy {\r\n    selectedGroup;\r\n    userContacts: User[] = [];\r\n    selectedContacts: User[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    contactsInviteForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public authUser: User,\r\n        private groupsStore: GroupsStoreService,\r\n        private usersMessagesStore: UsersMessagesSubjectService,\r\n        private usersService: UsersService,\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private dialog: MatDialogRef<GroupMembersInvitationDialogComponent>,\r\n        private getArraysDifference: GetTwoArrayOfObjectsDifferencePipe,\r\n        private fb: FormBuilder\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedGroup = this.groupsStore.selectedGroup;\r\n        this.initForm();\r\n    }\r\n\r\n\r\n    initForm() {\r\n        this.contactsInviteForm = this.fb.group({\r\n            contacts: this.fb.array(this.getContactsFormGroup()),\r\n        });\r\n    }\r\n\r\n    getContactsFormGroup() {\r\n        const formArray = [];\r\n        this.usersMessagesStore.usersMessages.map((c, index) => {\r\n            const foundInSelected = this.selectedContacts.find(sc => sc.id === c.id);\r\n            const foundInGroup = this.selectedGroup.group_members.find(m => m.id === c.id);\r\n            let connectionWithGroup = 'not joined';\r\n\r\n            if (foundInGroup) {\r\n                const connectionContainer = foundInGroup.groups_members;\r\n\r\n                if (foundInGroup) {\r\n                    connectionWithGroup = !!connectionContainer.confirmed ? 'joined' : 'invited';\r\n                    if (connectionContainer.accepted && !connectionContainer.confirmed) {\r\n                        connectionWithGroup = 'accepted';\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            formArray.push(this.fb.group({\r\n                name: 'contact_' + index,\r\n                checked: !!foundInSelected,\r\n                status: connectionWithGroup,\r\n                ...c\r\n            }));\r\n        });\r\n        return formArray;\r\n    }\r\n\r\n    selectContact(event: Event, control: AbstractControl) {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.selectedContacts.push(control.value);\r\n        } else {\r\n            this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        }\r\n    }\r\n\r\n    removeContactFromSelected(control: AbstractControl) {\r\n        const foundControl = this.contactCtrls.controls.find(c => c.value.id === control.value.id);\r\n        this.selectedContacts = this.selectedContacts.filter(c => c.id !== control.value.id);\r\n        foundControl.patchValue({checked: false});\r\n    }\r\n\r\n    sendInvitationsToContacts() {\r\n        this.subscriptions.push(this.groupsService.addGroupMembers({\r\n            group_id: this.selectedGroup.id,\r\n            member_ids: this.selectedContacts.map(c => c.id)\r\n        }).subscribe(dt => {\r\n            this.socketService.inviteToNewPageGroup({\r\n                invited_members: this.selectedContacts,\r\n                from_user: this.authUser,\r\n                group: this.selectedGroup,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                    has sent an invitation to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n            });\r\n            this.groupsStore.changeGroup(dt);\r\n            this.closeDialog();\r\n        }));\r\n    }\r\n\r\n    isProcessedContact(status) {\r\n        return ['invited', 'joined', 'accepted'].indexOf(status) !== -1;\r\n    }\r\n\r\n    get contactCtrls() {\r\n        return this.contactsInviteForm.controls.contacts as FormArray;\r\n    }\r\n\r\n    get checkedContactCtrls() {\r\n        return this.contactCtrls.controls.filter(c => c.value.checked);\r\n    }\r\n\r\n    getCheckBoxControl(control) {\r\n        return control.controls.checked;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"selectedGroup && !loading\">\r\n    <app-user-tags></app-user-tags>\r\n    <div id=\"group-wrap\">\r\n        <div class=\"images-box\">\r\n            <div class=\"images-cover\">\r\n                <img class=\"images-cover-create\" [src]=\"selectedGroup?.cover|getImgPath:'images'\" alt=\"\">\r\n            </div>\r\n            <div class=\"images-avatar\">\r\n                <img [src]=\"selectedGroup?.avatar|getImgPath:'images'\" alt=\"\">\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row groupsRow\">\r\n            <div id=\"group-details\">\r\n                <div class=\"details-row\">\r\n                    <strong id=\"group-name\">{{selectedGroup?.name}}</strong>\r\n                </div>\r\n\r\n                <div class=\"details-row\">\r\n                    <div id=\"privacy-type\">\r\n                        <mat-icon>{{groupPrivacy === 'public' ? groupPrivacy : 'lock' }}</mat-icon>\r\n                        <span>{{groupPrivacy}}</span>\r\n                    </div>\r\n                    <div id=\"members-count\">\r\n                        <strong>\r\n                            <span>{{getConfirmedMembersCount()}}</span>\r\n                            members\r\n                        </strong>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"group-actions\">\r\n                <ng-container *ngIf=\"showJoinBtn()\">\r\n                    <button id=\"join-group-btn\" (click)=\"joinGroup()\" *ngIf=\"userGroupConnStatus === 'not connected'\">\r\n                        Join\r\n                    </button>\r\n                    <button id=\"joined-group-btn\" [matMenuTriggerFor]=\"menu\"\r\n                            *ngIf=\"userGroupConnStatus === 'confirmed'\">\r\n                        <span>Joined</span>\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n\r\n                    <button id=\"waiting-for-confirmation-btn\" *ngIf=\"userGroupConnStatus === 'unconfirmed'\">\r\n                        <mat-icon>check</mat-icon>\r\n                        <span>Waiting for confirmation</span>\r\n                    </button>\r\n\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item id=\"unfollow-group\">\r\n                            <i class=\"fas fa-times-circle\"></i>\r\n                            <span>Unfollow group</span>\r\n                        </button>\r\n                        <button mat-menu-item id=\"leave-group\" (click)=\"leaveGroup()\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                            <span>Leave group</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </ng-container>\r\n\r\n                <button id=\"invite-to-group-btn\" (click)=\"openMembersModal()\">\r\n                    <mat-icon>add</mat-icon>\r\n                    Invite\r\n                </button>\r\n\r\n                <button type=\"button\" id=\"edit-profile\"\r\n                        [routerLink]=\"'/groups/edit/'+selectedGroup?.id\">\r\n                    <mat-icon>edit</mat-icon>\r\n                    Edit profile\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div id=\"group-tabs\">\r\n                <ul class=\"nav-tabs\">\r\n                    <li class=\"nav-item\" *ngFor=\"let tab of groupTabs\">\r\n                        <a class=\"nav-link\" [routerLink]=\"'/groups/'+passedGroupName+'/'+tab.link\"\r\n                           routerLinkActive=\"active\"\r\n                        >{{tab.name}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tab-content\" *ngIf=\"selectedGroup\">\r\n            <router-outlet (activate)=\"onOutletLoaded($event)\"></router-outlet>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<div style=\"height: 400px;position: relative;\" *ngIf=\"loading\">\r\n        <app-loading></app-loading>\r\n</div>\r\n\r\n<span *ngIf=\"!selectedGroup\">The group is not found</span>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {GROUP_PAGE_TABS} from '@core/constants/global';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {LowercaseRemoveSpacesPipe} from '@shared/pipes/lowercase-remove-spaces.pipe';\r\nimport {GroupMembersInvitationDialogComponent} from '@core/components/modals/group-members-invitation-dialog/group-members-invitation-dialog.component';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {CurrentUserData} from '@core/interfaces';\r\nimport {UserInfoService} from '@core/services/user-info.service';\r\n\r\n@Component({\r\n    selector: 'app-single-group',\r\n    templateUrl: './single-group.component.html',\r\n    styleUrls: ['./single-group.component.scss']\r\n})\r\nexport class SingleGroupComponent implements OnInit, OnDestroy {\r\n    authUser: CurrentUserData;\r\n    public loading = false;\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    selectedGroup;\r\n    isOwnGroup = false;\r\n    passedGroupName: string;\r\n    groupTabs = GROUP_PAGE_TABS;\r\n    groupPrivacy = 'public';\r\n\r\n    userGroupConnStatus = 'not connected';\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        private lowerCaseRemoveSpaces: LowercaseRemoveSpacesPipe,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n        private socketService: SocketIoService,\r\n        private _userInfoService: UserInfoService\r\n    ) {\r\n        this._getAuthInfo();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackSelectedGroup();\r\n        this.getSelectedGroup();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getConfirmedJoinGroup();\r\n        this.getIgnoredJoinGroup();\r\n        this.getJoinGroup();\r\n        this.getRemovedSavedMember();\r\n        this.getLeftGroup();\r\n    }\r\n\r\n\r\n    private _getAuthInfo() {\r\n        this._userInfoService._userInfo.subscribe((data) => {\r\n            this.authUser = data;\r\n        });\r\n    }\r\n\r\n    trackSelectedGroup() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe((dt: any) => {\r\n            console.log(dt, 159357);\r\n            this.selectedGroup = dt;\r\n            // this.groupPrivacy = dt.privacy === 1 ? 'private' : 'public';\r\n            if (!this.isEmptyObj.transform(dt) && this.authUser) {\r\n                this.getUserGroupConnStatus();\r\n            }\r\n        }));\r\n    }\r\n\r\n    getSelectedGroup() {\r\n        this.route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.id;\r\n            if (!this._getGroupById()) {\r\n                this.getGroupFromServer();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getGroupById() {\r\n        this.groupsService.getGroupById(+this.passedGroupName)\r\n            .subscribe((data: any) => {\r\n                this.selectedGroup = data;\r\n                this.groupsStore.selectGroup(this.selectedGroup);\r\n            });\r\n        return !!this.selectedGroup;\r\n    }\r\n\r\n    getGroupFromServer() {\r\n        this.loading = true;\r\n        this.groupsService.getGroupById(+this.passedGroupName)\r\n            .subscribe(data => {\r\n            this.selectedGroup = data;\r\n            this.isOwnGroup = this.selectedGroup.creator_id === this.authUser.id;\r\n            this.groupPrivacy = data.privacy === 1 ? 'private' : 'public';\r\n            this.loading = false;\r\n            this.groupsStore.selectGroup(this.selectedGroup);\r\n        });\r\n    }\r\n\r\n    joinGroup() {\r\n        console.log(this.selectedGroup);\r\n        this.groupsService.joinGroup({\r\n            member_ids: [this.authUser.id],\r\n            group_id: this.selectedGroup.id,\r\n            accepted: 1\r\n        }).subscribe(dt => {\r\n            this.userGroupConnStatus = 'unconfirmed';\r\n\r\n            this.socketService.joinGroup({\r\n                group: this.selectedGroup,\r\n                from_user: this.authUser,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> wants to to join the <strong>${this.selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n\r\n            this.groupsStore.changeGroup(dt);\r\n        });\r\n    }\r\n\r\n    getJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('get joined', rest.group);\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    leaveGroup() {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.leaveGroup({\r\n                    member_id: this.authUser.id,\r\n                    group_id: this.selectedGroup.id,\r\n                }).subscribe(dt => {\r\n                    this.groupsStore.setGroups(dt);\r\n                    this.socketService.leavePageGroup({\r\n                        group: this.selectedGroup,\r\n                        from_user: this.authUser,\r\n                        group_type: 'page',\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> has left the <strong>${this.selectedGroup.name}</strong> group`\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    getLeftGroup() {\r\n        this.subscriptions.push(this.socketService.leavePageGroupNotify().subscribe((data: any) => {\r\n            const {group} = data;\r\n            if (data.from_user.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedMembersCount() {\r\n        return this.selectedGroup?.group_members?.filter(m => !!m.groups_members.confirmed).length || 0;\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getConfirmedJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getConfirmedJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('confirmed in group page', data);\r\n            this.userGroupConnStatus = 'confirmed';\r\n            this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getIgnoredJoinGroup() {\r\n        this.subscriptions.push(this.socketService.getIgnoredJoinGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('ignored in group page', rest);\r\n            if (rest.member.id === this.authUser.id) {\r\n                this.groupsStore.setGroups(rest.leftGroups);\r\n                this.groupsStore.selectGroup(rest.group);\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getRemovedSavedMember() {\r\n        this.subscriptions.push(this.socketService.removeFromPageGroupNotify().subscribe((data: any) => {\r\n            const {member, leftGroups} = data;\r\n            console.log('removed from group in group page', data);\r\n            this.groupsStore.changeGroup(data.group);\r\n            if (member.id === this.authUser.id) {\r\n                this.userGroupConnStatus = 'not connected';\r\n            }\r\n        }));\r\n    }\r\n\r\n    private getUserGroupConnStatus() {\r\n        this.selectedGroup.group_members?.map(m => {\r\n            if (m.id === this.authUser.id) {\r\n                if (m.groups_members.confirmed === 1) {\r\n                    this.userGroupConnStatus = 'confirmed';\r\n                } else {\r\n                    if (m.groups_members.accepted === 1) {\r\n                        this.userGroupConnStatus = 'unconfirmed';\r\n                    } else {\r\n                        this.userGroupConnStatus = 'not connected';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    showJoinBtn() {\r\n        return !this.isOwnGroup;\r\n    }\r\n\r\n    onOutletLoaded(component) {\r\n        if (this.selectedGroup) {\r\n            component.selectedGroup = this.selectedGroup;\r\n            component.isOwnGroup = this.isOwnGroup;\r\n            component.authUser = this.authUser;\r\n        }\r\n    }\r\n\r\n    openMembersModal() {\r\n        this.subscriptions.push(this.dialog.open(GroupMembersInvitationDialogComponent, {\r\n            height: '690px',\r\n            width: '950px',\r\n            data: this.authUser,\r\n        }).afterClosed().subscribe(dt => {\r\n\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div>\r\n    <button [matMenuTriggerFor]=\"menu\" class=\"show-actions\">\r\n        <i class=\"fas fa-ellipsis-h\"></i>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n        <button id=\"make-admin\" mat-menu-item\r\n                *ngIf=\"!isAdmin(member) && !adminRequestSent\"\r\n                (click)=\"makeAdmin(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make admin</span>\r\n        </button>\r\n        <button id=\"remove-make-admin\" mat-menu-item *ngIf=\"isAdmin(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group admin privileges</span>\r\n        </button>\r\n        <button id=\"remove-make-moderator\" mat-menu-item\r\n                *ngIf=\"isModerator(member)\"\r\n                (click)=\"removeAdminPrivileges(member)\" [disableRipple]=\"true\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove group moderator privileges</span>\r\n        </button>\r\n        <button id=\"make-moderator\" *ngIf=\"!isModerator(member) && !moderatorRequestSent\" mat-menu-item\r\n                (click)=\"makeAdmin(member,'moderator')\"\r\n                [disableRipple]=\"true\">\r\n            <i class=\"fas fa-check\"></i>\r\n            <span>Make moderator</span>\r\n        </button>\r\n        <button id=\"remove-member-btn\" mat-menu-item [disableRipple]=\"true\" (click)=\"removeMember(member)\">\r\n            <i class=\"fas fa-times\"></i>\r\n            <span>Remove</span>\r\n        </button>\r\n    </mat-menu>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {ConfirmationDialogComponent} from '@core/components/modals/confirmation-dialog/confirmation-dialog.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-group-members-actions-menu',\r\n    templateUrl: './group-members-actions-menu.component.html',\r\n    styleUrls: ['./group-members-actions-menu.component.scss']\r\n})\r\nexport class GroupMembersActionsMenuComponent implements OnInit, OnDestroy {\r\n    @Input() member;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    adminRequestSent = false;\r\n    moderatorRequestSent = false;\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private dialog: MatDialog,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n    }\r\n\r\n    makeAdmin(member, type = 'admin') {\r\n        console.log('make admin', member)\r\n        this.socketService.sendMakeAdminRequest({\r\n            from_user: this.authUser,\r\n            group: this.selectedGroup,\r\n            member,\r\n            type,\r\n            msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                invites you to become ${type === 'admin' ? 'an admin' : 'a moderator'}\r\n                 for the <strong>${this.selectedGroup.name}</strong> group`\r\n        });\r\n\r\n        this.adminRequestSent = type === 'admin';\r\n        this.moderatorRequestSent = type === 'moderator';\r\n    }\r\n\r\n    removeMember(member) {\r\n        console.log('remove')\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.groupsService.removeGroupMember({\r\n                    group_id: this.selectedGroup.id,\r\n                    member_id: member.id\r\n                }).subscribe(dt => {\r\n                    this.selectedGroup = dt;\r\n                    this.groupsStore.changeGroup(this.selectedGroup);\r\n                    this.socketService.removeFromPageGroup({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed  <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       from <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                });\r\n            }\r\n        }));\r\n    }\r\n\r\n    removeAdminPrivileges(member, type = 'admin') {\r\n        this.subscriptions.push(this.dialog.open(ConfirmationDialogComponent).afterClosed().subscribe(confirmed => {\r\n            if (confirmed) {\r\n                this.subscriptions.push(this.groupsService.removeAdminPrivileges({\r\n                    member_id: member.id,\r\n                    group_id: this.selectedGroup.id\r\n                }).subscribe(dt => {\r\n                    this.socketService.removePageGroupAdminPrivileges({\r\n                        member,\r\n                        from_user: this.authUser,\r\n                        group: this.selectedGroup,\r\n                        msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong> removed ${type}  privileges of <strong>${member.first_name + ' ' + member.last_name}</strong>\r\n                       for the <strong>${this.selectedGroup.name}</strong> group`,\r\n                    });\r\n                    this.groupsStore.changeGroup(dt);\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    makeModerator(member) {\r\n\r\n    }\r\n\r\n    isAdmin(member) {\r\n        return member.groups_members.is_admin;\r\n    }\r\n\r\n    isModerator(member) {\r\n        return member.groups_members.is_moderator;\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"admins\">\r\n    <strong>Admins & moderators</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let admin of admins\">\r\n            <div class=\"details\">\r\n                <img class=\"avatar\" [src]=\"admin.avatar|getImgPath: 'images'\">\r\n                <div>\r\n                    <p class=\"full-name\" [routerLink]=\"'/users/'+admin.username\">\r\n                        {{admin.first_name + ' ' + admin.last_name}}\r\n                    </p>\r\n                    <span class=\"role\">{{getRoleName(admin)}}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <app-group-members-actions-menu *ngIf=\"showActionsMenu(admin)\"\r\n                                            [member]=\"admin\"\r\n                                            [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            [isOwnGroup]=\"isOwnGroup\"></app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admins-list',\r\n    templateUrl: './admins-list.component.html',\r\n    styleUrls: ['./admins-list.component.scss']\r\n})\r\nexport class AdminsListComponent implements OnInit {\r\n    @Input() admins;\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.selectedGroup,\"HRach\");\r\n    }\r\n\r\n    isGroupCreator(admin) {\r\n        return admin.id === this.selectedGroup?.creator_id;\r\n    }\r\n\r\n    isGroupAdmin(admin) {\r\n        return !!admin.groups_members.is_admin;\r\n    }\r\n\r\n\r\n    getUserGroupConnection(user) {\r\n        let connection;\r\n        this.admins.map(a => {\r\n            if (a.id === user?.id) {\r\n                connection = a.groups_members.is_admin ? 'Admin' : 'Moderator';\r\n\r\n                if (this.isGroupCreator(user)) {\r\n                    connection = 'Group creator';\r\n                }\r\n            }\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    showActionsMenu(admin) {\r\n        if (this.authUserGroupConnection === 'Admin') {\r\n            return !this.isGroupCreator(admin) && (admin.id === this.authUser.id || admin.groups_members.is_moderator);\r\n        } else if (this.authUserGroupConnection === 'Group creator') {\r\n            return !this.isGroupCreator(admin);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getRoleName(admin) {\r\n        return this.getUserGroupConnection(admin);\r\n    }\r\n\r\n    get authUserGroupConnection(): string {\r\n        return this.getUserGroupConnection(this.authUser);\r\n    }\r\n\r\n}\r\n","<div id=\"members\">\r\n    <strong>Members</strong>\r\n\r\n    <ul class=\"bordered\">\r\n        <li *ngFor=\"let member of members\" [class.rounded]=\"!isOwnGroup\">\r\n            <div class=\"details\">\r\n                <div class=\"avatarDiv\">\r\n                    <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n                </div>\r\n                <strong class=\"member-name\" [routerLink]=\"'/users/'+member.username\">\r\n                    {{member.first_name + ' ' + member.last_name}}\r\n                </strong>\r\n            </div>\r\n            <app-group-members-actions-menu [member]=\"member\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                            *ngIf=\"isOwnGroup\" [isOwnGroup]=\"isOwnGroup\">\r\n            </app-group-members-actions-menu>\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-group-members-list',\r\n    templateUrl: './group-members-list.component.html',\r\n    styleUrls: ['./group-members-list.component.scss']\r\n})\r\nexport class GroupMembersListComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() members;\r\n    @Input() isOwnGroup;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private socketService: SocketIoService,\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getAcceptedPageGroupAdminRequest();\r\n        this.getDeclinedPageGroupAdminRequest();\r\n    }\r\n\r\n\r\n    getAcceptedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getAcceptedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            // console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    getDeclinedPageGroupAdminRequest() {\r\n        this.subscriptions.push(this.socketService.getDeclinedPageGroupAdminRequest().subscribe((data: any) => {\r\n            const {notification, ...rest} = data;\r\n            // this.adminRequestSent = false;\r\n            if (notification.from_user.id !== this.authUser.id) {\r\n                this.notificationsStore.updateNotifications(notification);\r\n            }\r\n            this.groupsStore.changeGroup(rest.group);\r\n            console.log(this.groupsStore.groups);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","<div id=\"member-requests\">\r\n    <strong>Requests</strong>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let member of requestedMembers\" class=\"group-member pending\">\r\n            <div class=\"requestPartDiv\">\r\n            <div class=\"avatarDiv\">\r\n                <img class=\"avatar\" [src]=\"member.avatar|getImgPath: 'images'\">\r\n            </div>\r\n            <strong class=\"avatarName\">{{member.first_name + ' ' + member.last_name}}</strong>\r\n            </div>\r\n            <div class=\"confirmIgnoreBtns\">\r\n                <button class=\"confirm-request\" (click)=\"confirmJoinGroup(member)\">Confirm</button>\r\n                <button class=\"ignore-request\" (click)=\"ignoreJoinGroup(member)\">Ignore</button>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\n\r\n@Component({\r\n    selector: 'app-member-requests-list',\r\n    templateUrl: './member-requests-list.component.html',\r\n    styleUrls: ['./member-requests-list.component.scss']\r\n})\r\nexport class MemberRequestsListComponent implements OnInit {\r\n\r\n    @Input() authUser;\r\n    @Input() selectedGroup;\r\n    @Input() requestedMembers;\r\n    subscriptions = [];\r\n\r\n    constructor(\r\n        private groupsStore: GroupsStoreService,\r\n        private groupsService: GroupsService,\r\n        private socketService: SocketIoService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    confirmJoinGroup(member) {\r\n        this.subscriptions.push(this.groupsService.confirmGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.confirmJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has confirmed  <strong>${member.first_name + ' ' + member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n    ignoreJoinGroup(member) {\r\n        console.log(member);\r\n        this.subscriptions.push(this.groupsService.ignoreGroupJoin({\r\n            member_id: member.id,\r\n            group_id: this.selectedGroup.id\r\n        }).subscribe(dt => {\r\n            const selectedGroup = dt.find(d => d.id === this.selectedGroup.id);\r\n            this.groupsStore.changeGroup(selectedGroup);\r\n\r\n            this.socketService.ignoreJoinGroup({\r\n                group: selectedGroup,\r\n                from_user: this.authUser,\r\n                member,\r\n                msg: `<strong>${this.authUser.first_name + ' ' + this.authUser.last_name}</strong>\r\n                has declined  <strong>${member.first_name}</strong> <strong>${member.last_name}</strong> to join the <strong>${selectedGroup.name}</strong> group`,\r\n                link: `/channels/show?username=${this.authUser.username}`,\r\n            });\r\n        }));\r\n    }\r\n\r\n}\r\n","<div class=\"tab-container\">\r\n    <div id=\"all-members-wrap\">\r\n        <app-admins-list [admins]=\"admins\" [authUser]=\"authUser\"\r\n                         [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-admins-list>\r\n        <app-group-members-list [members]=\"members\" [authUser]=\"authUser\"\r\n                                [selectedGroup]=\"selectedGroup\" [isOwnGroup]=\"isOwnGroup\"></app-group-members-list>\r\n        <app-member-requests-list *ngIf=\"isOwnGroup\" [authUser]=\"authUser\" [selectedGroup]=\"selectedGroup\"\r\n                                  [requestedMembers]=\"requestedMembers\"></app-member-requests-list>\r\n    </div>\r\n</div>\r\n\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {SocketIoService} from '@core/services/socket-io.service';\r\nimport {ChatService} from '@core/services/chat.service';\r\nimport {CheckForEmptyObjectPipe} from '@shared/pipes/check-for-empty-object.pipe';\r\nimport {GroupsStoreService} from '@core/services/stores/groups-store.service';\r\nimport {NotificationsSubjectStoreService} from '@core/services/stores/notifications-subject-store.service';\r\n\r\n@Component({\r\n    selector: 'app-people-tab',\r\n    templateUrl: './people-tab.component.html',\r\n    styleUrls: ['./people-tab.component.scss']\r\n})\r\nexport class PeopleTabComponent implements OnInit, OnDestroy {\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    @Input() authUser;\r\n\r\n    admins = [];\r\n    members = [];\r\n    requestedMembers = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n\r\n    constructor(\r\n        private groupsService: GroupsService,\r\n        private groupsStore: GroupsStoreService,\r\n        private notificationsStore: NotificationsSubjectStoreService,\r\n        private socketService: SocketIoService,\r\n        private chatService: ChatService,\r\n        private isEmptyObj: CheckForEmptyObjectPipe,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.trackGroups();\r\n        this.getAcceptedJoinPageGroup();\r\n        this.getRemovedPageGroupAdminPrivileges();\r\n    }\r\n\r\n    trackGroups() {\r\n        this.subscriptions.push(this.groupsStore.selectedGroup$.subscribe(dt => {\r\n            console.log(dt);\r\n            this.selectedGroup = dt;\r\n            this.admins = [];\r\n            this.members = [];\r\n            this.requestedMembers = [];\r\n\r\n            if (!this.isEmptyObj.transform(this.selectedGroup)) {\r\n                this.filterMembers();\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n    filterMembers() {\r\n        this.selectedGroup?.group_members?.map(m => {\r\n            if (this.selectedGroup.creator_id === m.id || m.groups_members.is_admin || m.groups_members.is_moderator) {\r\n                this.admins.push(m);\r\n            } else {\r\n                if (m.groups_members.confirmed) {\r\n                    this.members.push(m);\r\n                } else if (m.groups_members.accepted) {\r\n                    this.requestedMembers.push(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getAcceptedJoinPageGroup() {\r\n        this.subscriptions.push(this.socketService.getAcceptedJoinPageGroup().subscribe((data: any) => {\r\n            const {rest} = data;\r\n            console.log('accepted', rest.group);\r\n            // this.groupsStore.changeGroup(rest.group);\r\n        }));\r\n    }\r\n\r\n    getRemovedPageGroupAdminPrivileges() {\r\n        this.subscriptions.push(this.socketService.getRemovedPageGroupAdminPrivileges().subscribe((data: any) => {\r\n            const {notification, member, group} = data;\r\n            this.notificationsStore.updateNotifications(notification);\r\n            console.log('removed privileges', group);\r\n            this.groupsStore.changeGroup(group);\r\n        }));\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-media-tab',\r\n  templateUrl: './media-tab.component.html',\r\n  styleUrls: ['./media-tab.component.scss']\r\n})\r\nexport class MediaTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.selectedGroup)\r\n    }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-about-tab',\r\n    templateUrl: './about-tab.component.html',\r\n    styleUrls: ['./about-tab.component.scss']\r\n})\r\nexport class AboutTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.isOwnGroup)\r\n    }\r\n\r\n}\r\n","<p>about-tab works!</p>\r\n","<p>media-tab works!</p>\r\n","<app-post-form-placeholder [selectedGroup]=\"selectedGroup\"></app-post-form-placeholder>\r\n<app-post-item *ngFor=\"let post of groupPosts$|async; trackBy: trackByElement\"\r\n               [post]=\"post\" [group]=\"selectedGroup\" [accessedFromGroup]=\"true\">\r\n</app-post-item>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {Post} from '@shared/models/post';\r\nimport trackByElement from '@core/helpers/track-by-element';\r\n\r\n@Component({\r\n    selector: 'app-posts-tab',\r\n    templateUrl: './posts-tab.component.html',\r\n    styleUrls: ['./posts-tab.component.scss']\r\n})\r\nexport class PostsTabComponent implements OnInit {\r\n\r\n    @Input() selectedGroup;\r\n    @Input() isOwnGroup;\r\n    groupPosts$: Observable<Post[]>;\r\n\r\n\r\n    trackByElement = trackByElement;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getGroupPosts();\r\n    }\r\n\r\n    getGroupPosts() {\r\n        this.groupPosts$ = this.postsService.getGroupPosts({group_id: this.selectedGroup.id});\r\n    }\r\n\r\n\r\n}\r\n","<section id=\"group-img-edit\" class=\"editCoverDiv\">\r\n    <div class=\"images-box\">\r\n        <div class=\"images-cover\">\r\n            <img class=\"images-cover-create c2\" *ngIf=\"coverShowImg\" [src]=\"coverImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <img class=\"images-cover-create c1\" *ngIf=\"!coverShowImg\" [src]=\"coverImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <input type=\"file\" #coverChangeImg hidden (change)=\"createImage($event, 'square')\">\r\n            <button (click)=\"coverChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"images-avatar\">\r\n            <!--            <img *ngIf=\"!coverShowImg\" [src]=\"coverImg|getImgPath:'images'\" alt=\"\">-->\r\n            <img *ngIf=\"!avatarShowImg\" [src]=\"avatarImgSrc|getImgPath:'images'\" alt=\"\">\r\n            <img *ngIf=\"avatarShowImg\" [src]=\"avatarImgSrc\" alt=\"\">\r\n            <!--            <mat-icon *ngIf=\"!avatarImgSrc\">add_a_photo</mat-icon>-->\r\n            <input type=\"file\" #avatarChangeImg hidden (change)=\"createImage($event, 'circle')\">\r\n            <button (click)=\"avatarChangeImg.click()\" class=\"position-btn\">\r\n                <mat-icon>\r\n                    create\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"images-save-btn-box\" *ngIf=\"(avatarImgSrc && discardORSave) || (coverImgSrc && discardORSave)\">\r\n        <button class=\"save-btn\" (click)=\"saveAvatarImage(avatarImgSrc,coverImgSrc)\">Save</button>\r\n        <button class=\"discard-btn\" (click)=\"remuveAvatarImage('','')\">DISCARD</button>\r\n    </div>\r\n</section>\r\n\r\n<div class=\"border m-60\"></div>\r\n\r\n<section class=\"form-edit_group\">\r\n    <form class=\"form_edit\" [formGroup]=\"editGroupForm\">\r\n        <div class=\"form-group w-80\">\r\n            <input type=\"text\" formControlName=\"nameGroup\" placeholder=\"Name\">\r\n        </div>\r\n        <div class=\"field-row\">\r\n            <label>Please choose Mode of Group</label>\r\n            <mat-radio-group\r\n                aria-label=\"Select an option\"\r\n                formControlName=\"privacy\">\r\n\r\n                <mat-radio-button [value]=\"0\"\r\n                                  name=\"privacy\"\r\n                >Public\r\n                </mat-radio-button>\r\n                <mat-radio-button [value]=\"1\"\r\n                                  name=\"privacy\"\r\n                >Private\r\n                </mat-radio-button>\r\n            </mat-radio-group>\r\n\r\n        </div>\r\n        <div class=\"border\"></div>\r\n        <div class=\"add-description-action\" (click)=\"addDescriptionHideShow()\">\r\n            <mat-icon [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                {{!addDescriptionSectionShow ? 'add' : 'close'}}\r\n            </mat-icon>\r\n            <span [ngClass]=\"{'grey': addDescriptionSectionShow}\">\r\n                    ADD DESCRIPTION\r\n                </span>\r\n        </div>\r\n        <div class=\"field-row w-80\" *ngIf=\"addDescriptionSectionShow\">\r\n            <textarea\r\n                formControlName=\"description\"\r\n                placeholder=\"Type Text here...\"\r\n                class=\"form-group-textarea \"></textarea>\r\n        </div>\r\n        <div class=\"form-submit_btn\">\r\n            <button (click)=\"updateGGroupInfo()\">Save Changes</button>\r\n        </div>\r\n\r\n    </form>\r\n</section>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ImgEditCropperComponent} from '@core/components/modals/img-edit-cropper/img-edit-cropper.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {GroupsService} from '@core/services/groups.service';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {EditGroupInterface} from '@app/groups/single-group/edit-group/interface';\r\nimport {VideoService} from '@core/services/video.service';\r\n\r\n@Component({\r\n    selector: 'app-edit-group',\r\n    templateUrl: 'edit-group.component.html',\r\n    styleUrls: ['edit-group.component.scss']\r\n})\r\n\r\nexport class EditGroupComponent implements OnInit, OnDestroy {\r\n    public editGroupForm: FormGroup | any;\r\n    private imageCoverFile;\r\n    private _groupId: number;\r\n    private imageAvatarFile;\r\n    public addDescriptionSectionShow = false;\r\n    public coverShowImg = false;\r\n    public avatarShowImg = false;\r\n    public discardORSave = false;\r\n    private _imgCoverSuccess;\r\n    private _imgAvatarSuccess;\r\n    public coverImgSrc;\r\n    public avatarImgSrc;\r\n    private _unsubscribe$ = new Subject<void>();\r\n    private passedGroupName: string;\r\n\r\n    constructor(\r\n        private _fb: FormBuilder,\r\n        private _groupsService: GroupsService,\r\n        private _route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        private uploadFile: VideoService,\r\n    ) {\r\n        this._route.params.subscribe((params: Params) => {\r\n            this.passedGroupName = params.id;\r\n        });\r\n    }\r\n\r\n\r\n    get coverImg(): any {\r\n        return false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._formBuilder();\r\n        this._patchInitialValueForm();\r\n    }\r\n\r\n    public addDescriptionHideShow(): void {\r\n        this.addDescriptionSectionShow = !this.addDescriptionSectionShow;\r\n    }\r\n\r\n    public saveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n        if (this.coverShowImg) {\r\n            const fdCover = new FormData();\r\n            fdCover.append('image', this.imageCoverFile);\r\n            fdCover.append('belonging', 'group_cover_img');\r\n            fdCover.append('duration', '');\r\n            this.uploadFile.uploadFile(fdCover, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgCoverSuccess = data.path;\r\n                this.coverImgSrc = data.path;\r\n                console.log(this._imgCoverSuccess);\r\n            });\r\n        }\r\n        if (this.avatarShowImg) {\r\n            const fdAvatar = new FormData();\r\n            fdAvatar.append('image', this.imageAvatarFile);\r\n            fdAvatar.append('belonging', 'group_avatar_img');\r\n            fdAvatar.append('duration', '');\r\n            this.uploadFile.uploadFile(fdAvatar, 'image').subscribe((data) => {\r\n                console.log(data);\r\n                this.coverShowImg = false;\r\n                this._imgAvatarSuccess = data.path;\r\n                // this.coverImgSrc = data.path;\r\n                console.log(this._imgAvatarSuccess);\r\n            });\r\n        }\r\n    }\r\n\r\n    public remuveAvatarImage(avatar: string, cover: string) {\r\n        this.avatarImgSrc = avatar;\r\n        this.coverImgSrc = cover;\r\n        this.discardORSave = false;\r\n    }\r\n\r\n    public createImage(event, shape) {\r\n        const file = event.target.files[0];\r\n        this.dialog.open(ImgEditCropperComponent, {\r\n            maxWidth: '60vw',\r\n            maxHeight: '70vh',\r\n            height: '100%',\r\n            width: '100%',\r\n            data: {\r\n                title: 'Profile Image Cropper',\r\n                shape,\r\n                file\r\n            }\r\n        }).afterClosed()\r\n            .pipe(\r\n                takeUntil(this._unsubscribe$),\r\n            )\r\n            .subscribe(dt => {\r\n                console.log(dt);\r\n                if (dt) {\r\n                    if (dt.shape === 'square') {\r\n                        this.imageCoverFile = dt.blob;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        this.coverShowImg = true;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.coverImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageCoverFile);\r\n                    }\r\n                    if (dt.shape === 'circle') {\r\n                        this.imageAvatarFile = dt.blob;\r\n                        this.avatarShowImg = true;\r\n                        this.discardORSave = !this.discardORSave;\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            this.avatarImgSrc = e.target.result.toString();\r\n                        };\r\n                        reader.readAsDataURL(this.imageAvatarFile);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private _formBuilder(): void {\r\n        this.editGroupForm = this._fb.group({\r\n            nameGroup: [null, Validators.required],\r\n            privacy: [null, Validators.required],\r\n            description: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n    private _patchInitialValueForm(): void {\r\n        console.log(this.passedGroupName);\r\n        this._groupsService.getGroupById(this.passedGroupName)\r\n            .subscribe((data: EditGroupInterface) => {\r\n                this._groupId = data?.id;\r\n                if (data?.cover || data?.avatar) {\r\n                    this.coverImgSrc = data?.cover;\r\n                    this.avatarImgSrc = data?.avatar;\r\n                    this.avatarShowImg = !Boolean(data?.avatar);\r\n                    this.coverShowImg = !Boolean(data?.cover);\r\n                }\r\n                this.editGroupForm.patchValue({\r\n                    nameGroup: data?.name,\r\n                    privacy: data?.privacy,\r\n                    description: data?.description\r\n                });\r\n                if (data?.description) {\r\n                    this.addDescriptionSectionShow = true;\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    public updateGGroupInfo() {\r\n        if (this.editGroupForm.invalid) {\r\n            return;\r\n        }\r\n        const UPDATE_FORM_DATA_GROUP = {\r\n            name: this.editGroupForm.get('nameGroup').value,\r\n            description: this.editGroupForm.get('nameGroup').value,\r\n            cover: this._imgCoverSuccess,\r\n            avatar: this._imgAvatarSuccess,\r\n            privacy: this.editGroupForm.get('privacy').value\r\n        };\r\n        this._groupsService.updateGroup(this._groupId, UPDATE_FORM_DATA_GROUP).subscribe((data) => {\r\n            console.log(data, 'UPDATE_FORM_DATA_GROUP');\r\n        });\r\n        // console.log(UPDATE_FORM_DATA_GROUP, );\r\n    }\r\n\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribe$.next();\r\n        this._unsubscribe$.complete();\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {ShowGroupsComponent} from '@app/groups/show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {PeopleTabComponent} from '@app/groups/single-group/people-tab/people-tab.component';\r\nimport {AboutTabComponent} from '@app/groups/single-group/about-tab/about-tab.component';\r\nimport {MediaTabComponent} from '@app/groups/single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from '@app/groups/single-group/posts-tab/posts-tab.component';\r\nimport {EditGroupComponent} from '@app/groups/single-group/edit-group';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ShowGroupsComponent,\r\n        data: {\r\n            title: 'Groups'\r\n        },\r\n    },\r\n    {path: 'edit/:id', component:  EditGroupComponent, data: {title: 'Group page | People tab'}},\r\n    {\r\n        path: ':id',\r\n        component: SingleGroupComponent,\r\n        children: [\r\n            {path: 'people', component: PeopleTabComponent, data: {title: 'Group page | People tab'}},\r\n            {path: 'about', component: AboutTabComponent, data: {title: 'Group page | About tab'}},\r\n            {path: 'media', component: MediaTabComponent, data: {title: 'Group page | Media tab'}},\r\n            {path: 'posts', component: PostsTabComponent, data: {title: 'Group page | Posts tab'}}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GroupsRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {GroupsRoutingModule} from './groups-routing.module';\r\nimport {ShowGroupsComponent} from './show-groups/show-groups.component';\r\nimport {SingleGroupComponent} from '@app/groups/single-group/single-group.component';\r\nimport {SharedModule} from '@shared/shared.module';\r\nimport {GroupItemComponent} from './show-groups/group-item/group-item.component';\r\nimport {AboutTabComponent} from './single-group/about-tab/about-tab.component';\r\nimport {PeopleTabComponent} from './single-group/people-tab/people-tab.component';\r\nimport {MediaTabComponent} from './single-group/media-tab/media-tab.component';\r\nimport {PostsTabComponent} from './single-group/posts-tab/posts-tab.component';\r\nimport {AdminsListComponent} from './single-group/people-tab/admins-list/admins-list.component';\r\nimport {GroupMembersListComponent} from './single-group/people-tab/group-members-list/group-members-list.component';\r\nimport {MemberRequestsListComponent} from './single-group/people-tab/member-requests-list/member-requests-list.component';\r\nimport {GroupMembersActionsMenuComponent} from './single-group/people-tab/group-members-actions-menu/group-members-actions-menu.component';\r\nimport {EditGroupComponent} from '@app/groups/single-group/edit-group';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowGroupsComponent,\r\n        SingleGroupComponent,\r\n        GroupItemComponent,\r\n        AboutTabComponent,\r\n        PeopleTabComponent,\r\n        MediaTabComponent,\r\n        PostsTabComponent,\r\n        AdminsListComponent,\r\n        GroupMembersListComponent,\r\n        MemberRequestsListComponent,\r\n        EditGroupComponent,\r\n        GroupMembersActionsMenuComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        GroupsRoutingModule,\r\n        SharedModule,\r\n        ReactiveFormsModule\r\n    ]\r\n})\r\nexport class GroupsModule {\r\n}\r\n"]}