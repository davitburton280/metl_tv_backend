{"version":3,"sources":["webpack:///src/app/core/helpers/normalizeTableColumnName.ts","webpack:///src/app/stocks/stock-profile/historical-tab/historical-tab.component.ts","webpack:///src/app/stocks/stock-profile/historical-tab/historical-tab.component.html","webpack:///src/app/stocks/stock-profile/stock-profile.component.ts","webpack:///src/app/stocks/stock-profile/stock-profile.component.html","webpack:///src/app/stocks/stock-profile/summary-tab/summary-tab.component.ts","webpack:///src/app/stocks/stock-profile/summary-tab/summary-tab.component.html","webpack:///src/app/stocks/stocks-routing.module.ts","webpack:///src/app/stocks/stocks.module.ts"],"names":["normalizeColName","col","toUpperCase","slice","replace","trim","HistoricalTabComponent","stocksService","displayedColumns","paginationValues","getStockHistoricalPrices","stock","selectedStock","subscribe","dt","tableData","historical","paginator","selector","templateUrl","styleUrls","StockProfileComponent","router","route","activeTab","multi","name","series","value","view","referenceLines","colorScheme","domain","getIndices","indices","snapshot","params","symbol","tab","SummaryTabComponent","loader","getStockInfo","dataLoading","getStockChartData","chartData","chart","table","routes","path","component","data","title","StocksRoutingModule","forChild","imports","exports","StocksModule","declarations"],"mappings":"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","file":"stocks-stocks-module-es5.js","sourcesContent":["function normalizeColName(col): string {\r\n    col = `${col[0].toUpperCase()}${col.slice(1)}`.replace(/([A-Z])/g, ' $1').trim();\r\n    return col.replace(/_/g, ' ');\r\n}\r\n\r\nexport {normalizeColName as normalizeColName};\r\n","import {Component, Input, OnInit, ViewChild} from '@angular/core';\nimport {StocksService} from '@core/services/stocks.service';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {normalizeColName} from '@core/helpers/normalizeTableColumnName';\nimport {MatPaginator} from '@angular/material/paginator';\n\n@Component({\n    selector: 'app-historical-tab',\n    templateUrl: './historical-tab.component.html',\n    styleUrls: ['./historical-tab.component.scss']\n})\nexport class HistoricalTabComponent implements OnInit {\n    @Input('selectedStock') selectedStock;\n\n    displayedColumns: string[] = ['date', 'price', 'change', 'changePercent', 'open', 'volume'];\n    tableData;\n    paginationValues = [10, 25, 100];\n\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n\n    constructor(\n        private stocksService: StocksService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.stocksService.getStockHistoricalPrices({stock: this.selectedStock}).subscribe(dt => {\n            this.tableData = new MatTableDataSource(dt.historical);\n            this.tableData.paginator = this.paginator;\n        });\n    }\n\n    normalizeColName(col): string {\n        return normalizeColName(col);\n    }\n\n}\n","<table mat-table [dataSource]=\"tableData\" class=\"mat-elevation-z8\" *ngIf=\"tableData && tableData.data.length\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n    <!-- Symbol Column -->\n    <ng-container *ngFor=\"let col of displayedColumns\">\n        <ng-container [matColumnDef]=\"col\">\n            <th mat-header-cell *matHeaderCellDef> {{normalizeColName(col)}}</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element[col]}} </td>\n        </ng-container>\n    </ng-container>\n\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"paginationValues\"\n               [hidden]=\"!tableData?.data.length\"></mat-paginator>\n\n<mat-error *ngIf=\"!tableData?.data.length\">No historical prices found</mat-error>\n","import {Component, OnInit} from '@angular/core';\r\nimport {StocksService} from '@core/services/stocks.service';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-stock-profile',\r\n    templateUrl: './stock-profile.component.html',\r\n    styleUrls: ['./stock-profile.component.scss']\r\n})\r\nexport class StockProfileComponent implements OnInit {\r\n    activeTab = 'summary';\r\n    indices;\r\n    selectedStock;\r\n    stockInfo;\r\n\r\n    multi = [\r\n        {\r\n            name: 'USA',\r\n            series: [\r\n                {\r\n                    name: '1990',\r\n                    value: 250000000\r\n                },\r\n                {\r\n                    name: '2009',\r\n                    value: 109000000\r\n                },\r\n                {\r\n                    name: '2010',\r\n                    value: 309000000\r\n                },\r\n                {\r\n                    name: '2011',\r\n                    value: 311000000\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n    view: any[] = [300, 150];\r\n\r\n    // options\r\n    referenceLines = [\r\n        {\r\n            name: '2009',\r\n            value: 209000000\r\n        }\r\n    ];\r\n\r\n    colorScheme = {\r\n        domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\r\n    };\r\n\r\n\r\n    constructor(\r\n        private stocksService: StocksService,\r\n        public router: Router,\r\n        private route: ActivatedRoute\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.stocksService.getIndices({}).subscribe(dt => {\r\n            this.indices = dt;\r\n        });\r\n        this.selectedStock = this.route.snapshot?.params?.symbol?.toUpperCase();\r\n    }\r\n\r\n\r\n    changeTab(tab) {\r\n        this.activeTab = tab;\r\n    }\r\n\r\n}\r\n","<div class=\"stock-content\">\r\n    <div class=\"major-indexes\">\r\n        <h2>Major indexes</h2>\r\n\r\n        <div class=\"favorites\">\r\n\r\n            <div class=\"crypto-content\">\r\n                <div class=\"crypto-item\" [class.crypto-item-green]=\"stock.changesPercentage > 0\"\r\n                     *ngFor=\"let stock of indices\">\r\n                    <p class=\"crypto-text-1\">{{stock.name}}</p>\r\n                    <p class=\"crypto-text-2\"><span class=\"crypto-text-abs\">$</span>{{stock.price}}</p>\r\n                    <div class=\"crypto-block\">\r\n                        <p class=\"crypto-text-1\">{{stock.change}}</p>\r\n                        <p class=\"crypto-text-1\">{{stock.changesPercentage}}%</p>\r\n                    </div>\r\n<!--                    <div class=\"small-chart-container\">-->\r\n<!--                        <ngx-charts-line-chart  [scheme]=\"colorScheme\" [legend]=\"false\"-->\r\n<!--                                               [showXAxisLabel]=\"false\"-->\r\n<!--                                               [showYAxisLabel]=\"false\" [xAxis]=\"true\" [yAxis]=\"true\"-->\r\n<!--                                               [results]=\"multi\"-->\r\n<!--                                               [autoScale]=\"true\"-->\r\n<!--                                               [yAxisTicks]=\"[]\" [xAxisTicks]=\"[]\" [timeline]=\"true\"-->\r\n<!--                                               [referenceLines]=\"referenceLines\" [showRefLines]=\"true\"-->\r\n<!--                                               [showGridLines]=\"true\" [showRefLabels]=\"false\">-->\r\n<!--                        </ngx-charts-line-chart>-->\r\n<!--                    </div>-->\r\n                    <!--                                        <img class=\"crypto-map\" src=\"assets/img/map.png\">-->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"stock-tabs\" *ngIf=\"selectedStock\">\r\n\r\n        <ul class=\"nav nav-tabs\">\r\n            <li [class.active]=\"activeTab==='summary'\">\r\n                <a data-toggle=\"tab\" (click)=\"changeTab('summary')\">\r\n                    Summary</a></li>\r\n\r\n            <li [class.active]=\"activeTab==='historical'\">\r\n                <a data-toggle=\"tab\" (click)=\"changeTab('historical')\">\r\n                    Historical data</a>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"tab-content\">\r\n\r\n\r\n            <div id=\"summary\">\r\n\r\n                <app-summary-tab [selectedStock]=\"selectedStock\" [hidden]=\"activeTab!=='summary'\"></app-summary-tab>\r\n\r\n            </div>\r\n            <div id=\"historical\">\r\n                <app-historical-tab [selectedStock]=\"selectedStock\"\r\n                                    [hidden]=\"activeTab!=='historical'\"></app-historical-tab>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <mat-error *ngIf=\"!selectedStock\">Please select a stock to view its information</mat-error>\r\n    <!-- <img class=\"stock-content-img\" src=\"assets/img/stock.jpg\"> -->\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {StocksService} from '@core/services/stocks.service';\nimport {normalizeColName} from '@core/helpers/normalizeTableColumnName';\nimport {LoaderService} from '@core/services/loader.service';\n\n@Component({\n    selector: 'app-summary-tab',\n    templateUrl: './summary-tab.component.html',\n    styleUrls: ['./summary-tab.component.scss']\n})\nexport class SummaryTabComponent implements OnInit {\n    // Chart settings\n    chartData: any[];\n    colorScheme = {\n        domain: ['#18B587', '#F53C6F']\n    };\n\n    // Table settings\n    displayedColumns: string[] = ['symbol', 'name', 'price', 'change', 'changesPercentage', 'marketCap', 'open', 'volume'];\n    tableData;\n\n    @Input('selectedStock') selectedStock;\n\n    constructor(\n        private stocksService: StocksService,\n        public loader: LoaderService\n    ) {\n    }\n\n\n    ngOnInit(): void {\n        this.getStockInfo();\n    }\n\n    normalizeColName(col): string {\n        return normalizeColName(col);\n    }\n\n    getStockInfo() {\n        this.loader.dataLoading = true;\n        this.stocksService.getStockChartData({stock: this.selectedStock}).subscribe(dt => {\n            this.chartData = dt.chart;\n            this.tableData = new MatTableDataSource(dt.table);\n            this.loader.dataLoading = false;\n        });\n    }\n\n}\n","<div class=\"table-chart-container\">\n    <div class=\"loader\">\n        <mat-spinner [diameter]=\"50\" *ngIf=\"loader.dataLoading\"></mat-spinner>\n    </div>\n    <ng-container *ngIf=\"chartData && chartData[0].series.length > 0\">\n\n        <div class=\"chart-container\">\n\n            <ngx-charts-area-chart\n                [scheme]=\"colorScheme\"\n                [legend]=\"false\"\n                [showXAxisLabel]=\"false\"\n                [showYAxisLabel]=\"false\"\n                [autoScale]=\"true\"\n                [xAxis]=\"true\"\n                [yAxis]=\"true\"\n                [results]=\"chartData\">\n            </ngx-charts-area-chart>\n        </div>\n        <div class=\"table-container\">\n            <h1 class=\"selected-stock\">{{selectedStock.replace('^', '')}}</h1>\n            <table mat-table [dataSource]=\"tableData\" class=\"mat-elevation-z8\">\n\n                <!--- Note that these columns can be defined in any order.\n                      The actual rendered columns are set as a property on the row definition\" -->\n                <!-- Symbol Column -->\n                <ng-container *ngFor=\"let col of displayedColumns\">\n                    <ng-container [matColumnDef]=\"col\">\n                        <th mat-header-cell *matHeaderCellDef> {{normalizeColName(col)}}</th>\n                        <td mat-cell *matCellDef=\"let element\"> {{element[col]}} </td>\n                    </ng-container>\n                </ng-container>\n\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n        </div>\n    </ng-container>\n</div>\n<mat-error *ngIf=\"(!chartData || chartData[0].series.length === 0) && !loader.dataLoading\">No chart data found\n</mat-error>\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {StockProfileComponent} from '@app/stocks/stock-profile/stock-profile.component';\n\n\nconst routes: Routes = [\n    {\n        path: 'analytics',\n        component: StockProfileComponent,\n        data: {\n            title: 'Stock profile',\n        }\n    },\n    {\n        path: ':symbol/analytics',\n        component: StockProfileComponent,\n        data: {\n            title: 'Stock profile',\n        }\n    },\n\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class StocksRoutingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {StocksRoutingModule} from './stocks-routing.module';\nimport {StockProfileComponent} from '@app/stocks/stock-profile/stock-profile.component';\nimport {SummaryTabComponent} from '@app/stocks/stock-profile/summary-tab/summary-tab.component';\nimport {HistoricalTabComponent} from '@app/stocks/stock-profile/historical-tab/historical-tab.component';\nimport {NgxChartsModule} from '@swimlane/ngx-charts';\nimport {SharedModule} from '@shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        StockProfileComponent,\n        SummaryTabComponent,\n        HistoricalTabComponent\n    ],\n    imports: [\n        CommonModule,\n        StocksRoutingModule,\n        NgxChartsModule,\n        SharedModule\n    ]\n})\nexport class StocksModule {\n}\n"]}